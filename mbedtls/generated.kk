// Copyright (c) 2020, the Koka-Community authors. All rights reserved. 
// Use of this source code is governed by a
// MIT-style license that can be found in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
// 
// Generated by `ffigen`.

import std/cextern
import std/num/int32
import std/num/int64
import std/num/float64

import std/cextern

extern import
  c { library="mbedtls" }

// \brief Flags for mbedtls_mpi_gen_prime()
// 
// Each of these flags is a constraint on the result X returned by
// mbedtls_mpi_gen_prime().
type mbedtls_mpi_gen_prime_flag_t
  // < (X-1)/2 is prime too
  MBEDTLS_MPI_GEN_PRIME_FLAG_DH
  // < lower error rate from 2<sup>-80</sup> to 2<sup>-128</sup>
  MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR

pub fun mbedtls_mpi_gen_prime_flag_t/int(i: mbedtls_mpi_gen_prime_flag_t): int
  match i
    MBEDTLS_MPI_GEN_PRIME_FLAG_DH -> 1
    MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR -> 2

pub fun int/mbedtls_mpi_gen_prime_flag_t(i: int): exn mbedtls_mpi_gen_prime_flag_t
  match i
    1 -> MBEDTLS_MPI_GEN_PRIME_FLAG_DH
    2 -> MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR

// \brief     Supported message digests.
// 
// \warning   MD5 and SHA-1 are considered weak message digests and
// their use constitutes a security risk. We recommend considering
// stronger message digests instead.
type mbedtls_md_type_t
  // < None.
  MBEDTLS_MD_NONE
  // < The MD5 message digest.
  MBEDTLS_MD_MD5
  // < The RIPEMD-160 message digest.
  MBEDTLS_MD_RIPEMD160
  // < The SHA-1 message digest.
  MBEDTLS_MD_SHA1
  // < The SHA-224 message digest.
  MBEDTLS_MD_SHA224
  // < The SHA-256 message digest.
  MBEDTLS_MD_SHA256
  // < The SHA-384 message digest.
  MBEDTLS_MD_SHA384
  // < The SHA-512 message digest.
  MBEDTLS_MD_SHA512
  // < The SHA3-224 message digest.
  MBEDTLS_MD_SHA3_224
  // < The SHA3-256 message digest.
  MBEDTLS_MD_SHA3_256
  // < The SHA3-384 message digest.
  MBEDTLS_MD_SHA3_384
  // < The SHA3-512 message digest.
  MBEDTLS_MD_SHA3_512

pub fun mbedtls_md_type_t/int(i: mbedtls_md_type_t): int
  match i
    MBEDTLS_MD_NONE -> 0
    MBEDTLS_MD_MD5 -> 3
    MBEDTLS_MD_RIPEMD160 -> 4
    MBEDTLS_MD_SHA1 -> 5
    MBEDTLS_MD_SHA224 -> 8
    MBEDTLS_MD_SHA256 -> 9
    MBEDTLS_MD_SHA384 -> 10
    MBEDTLS_MD_SHA512 -> 11
    MBEDTLS_MD_SHA3_224 -> 16
    MBEDTLS_MD_SHA3_256 -> 17
    MBEDTLS_MD_SHA3_384 -> 18
    MBEDTLS_MD_SHA3_512 -> 19

pub fun int/mbedtls_md_type_t(i: int): exn mbedtls_md_type_t
  match i
    0 -> MBEDTLS_MD_NONE
    3 -> MBEDTLS_MD_MD5
    4 -> MBEDTLS_MD_RIPEMD160
    5 -> MBEDTLS_MD_SHA1
    8 -> MBEDTLS_MD_SHA224
    9 -> MBEDTLS_MD_SHA256
    10 -> MBEDTLS_MD_SHA384
    11 -> MBEDTLS_MD_SHA512
    16 -> MBEDTLS_MD_SHA3_224
    17 -> MBEDTLS_MD_SHA3_256
    18 -> MBEDTLS_MD_SHA3_384
    19 -> MBEDTLS_MD_SHA3_512

// Used internally to indicate whether a context uses legacy or PSA.
// 
// Internal use only.
type mbedtls_md_engine_t
  MBEDTLS_MD_ENGINE_LEGACY
  MBEDTLS_MD_ENGINE_PSA

pub fun mbedtls_md_engine_t/int(i: mbedtls_md_engine_t): int
  match i
    MBEDTLS_MD_ENGINE_LEGACY -> 0
    MBEDTLS_MD_ENGINE_PSA -> 1

pub fun int/mbedtls_md_engine_t(i: int): exn mbedtls_md_engine_t
  match i
    0 -> MBEDTLS_MD_ENGINE_LEGACY
    1 -> MBEDTLS_MD_ENGINE_PSA

// Domain-parameter identifiers: curve, subgroup, and generator.
// 
// \note Only curves over prime fields are supported.
// 
// \warning This library does not support validation of arbitrary domain
// parameters. Therefore, only standardized domain parameters from trusted
// sources should be used. See mbedtls_ecp_group_load().
type mbedtls_ecp_group_id
  // !< Curve not defined.
  MBEDTLS_ECP_DP_NONE
  // !< Domain parameters for the 192-bit curve defined by FIPS 186-4 and SEC1.
  MBEDTLS_ECP_DP_SECP192R1
  // !< Domain parameters for the 224-bit curve defined by FIPS 186-4 and SEC1.
  MBEDTLS_ECP_DP_SECP224R1
  // !< Domain parameters for the 256-bit curve defined by FIPS 186-4 and SEC1.
  MBEDTLS_ECP_DP_SECP256R1
  // !< Domain parameters for the 384-bit curve defined by FIPS 186-4 and SEC1.
  MBEDTLS_ECP_DP_SECP384R1
  // !< Domain parameters for the 521-bit curve defined by FIPS 186-4 and SEC1.
  MBEDTLS_ECP_DP_SECP521R1
  // !< Domain parameters for 256-bit Brainpool curve.
  MBEDTLS_ECP_DP_BP256R1
  // !< Domain parameters for 384-bit Brainpool curve.
  MBEDTLS_ECP_DP_BP384R1
  // !< Domain parameters for 512-bit Brainpool curve.
  MBEDTLS_ECP_DP_BP512R1
  // !< Domain parameters for Curve25519.
  MBEDTLS_ECP_DP_CURVE25519
  // !< Domain parameters for 192-bit "Koblitz" curve.
  MBEDTLS_ECP_DP_SECP192K1
  // !< Domain parameters for 224-bit "Koblitz" curve.
  MBEDTLS_ECP_DP_SECP224K1
  // !< Domain parameters for 256-bit "Koblitz" curve.
  MBEDTLS_ECP_DP_SECP256K1
  // !< Domain parameters for Curve448.
  MBEDTLS_ECP_DP_CURVE448

pub fun mbedtls_ecp_group_id/int(i: mbedtls_ecp_group_id): int
  match i
    MBEDTLS_ECP_DP_NONE -> 0
    MBEDTLS_ECP_DP_SECP192R1 -> 1
    MBEDTLS_ECP_DP_SECP224R1 -> 2
    MBEDTLS_ECP_DP_SECP256R1 -> 3
    MBEDTLS_ECP_DP_SECP384R1 -> 4
    MBEDTLS_ECP_DP_SECP521R1 -> 5
    MBEDTLS_ECP_DP_BP256R1 -> 6
    MBEDTLS_ECP_DP_BP384R1 -> 7
    MBEDTLS_ECP_DP_BP512R1 -> 8
    MBEDTLS_ECP_DP_CURVE25519 -> 9
    MBEDTLS_ECP_DP_SECP192K1 -> 10
    MBEDTLS_ECP_DP_SECP224K1 -> 11
    MBEDTLS_ECP_DP_SECP256K1 -> 12
    MBEDTLS_ECP_DP_CURVE448 -> 13

pub fun int/mbedtls_ecp_group_id(i: int): exn mbedtls_ecp_group_id
  match i
    0 -> MBEDTLS_ECP_DP_NONE
    1 -> MBEDTLS_ECP_DP_SECP192R1
    2 -> MBEDTLS_ECP_DP_SECP224R1
    3 -> MBEDTLS_ECP_DP_SECP256R1
    4 -> MBEDTLS_ECP_DP_SECP384R1
    5 -> MBEDTLS_ECP_DP_SECP521R1
    6 -> MBEDTLS_ECP_DP_BP256R1
    7 -> MBEDTLS_ECP_DP_BP384R1
    8 -> MBEDTLS_ECP_DP_BP512R1
    9 -> MBEDTLS_ECP_DP_CURVE25519
    10 -> MBEDTLS_ECP_DP_SECP192K1
    11 -> MBEDTLS_ECP_DP_SECP224K1
    12 -> MBEDTLS_ECP_DP_SECP256K1
    13 -> MBEDTLS_ECP_DP_CURVE448

type mbedtls_ecp_curve_type
  MBEDTLS_ECP_TYPE_NONE
  MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS
  MBEDTLS_ECP_TYPE_MONTGOMERY

pub fun mbedtls_ecp_curve_type/int(i: mbedtls_ecp_curve_type): int
  match i
    MBEDTLS_ECP_TYPE_NONE -> 0
    MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS -> 1
    MBEDTLS_ECP_TYPE_MONTGOMERY -> 2

pub fun int/mbedtls_ecp_curve_type(i: int): exn mbedtls_ecp_curve_type
  match i
    0 -> MBEDTLS_ECP_TYPE_NONE
    1 -> MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS
    2 -> MBEDTLS_ECP_TYPE_MONTGOMERY

// For encrypt-decrypt functions, whether the operation is an encryption
// or a decryption.
type psa_encrypt_or_decrypt_t
  PSA_CRYPTO_DRIVER_DECRYPT
  PSA_CRYPTO_DRIVER_ENCRYPT

pub fun psa_encrypt_or_decrypt_t/int(i: psa_encrypt_or_decrypt_t): int
  match i
    PSA_CRYPTO_DRIVER_DECRYPT -> 0
    PSA_CRYPTO_DRIVER_ENCRYPT -> 1

pub fun int/psa_encrypt_or_decrypt_t(i: int): exn psa_encrypt_or_decrypt_t
  match i
    0 -> PSA_CRYPTO_DRIVER_DECRYPT
    1 -> PSA_CRYPTO_DRIVER_ENCRYPT

// SHA-3 family id.
// 
// It identifies the family (SHA3-256, SHA3-512, etc.)
type mbedtls_sha3_id
  // !< Operation not defined.
  MBEDTLS_SHA3_NONE
  // !< SHA3-224
  MBEDTLS_SHA3_224
  // !< SHA3-256
  MBEDTLS_SHA3_256
  // !< SHA3-384
  MBEDTLS_SHA3_384
  // !< SHA3-512
  MBEDTLS_SHA3_512

pub fun mbedtls_sha3_id/int(i: mbedtls_sha3_id): int
  match i
    MBEDTLS_SHA3_NONE -> 0
    MBEDTLS_SHA3_224 -> 1
    MBEDTLS_SHA3_256 -> 2
    MBEDTLS_SHA3_384 -> 3
    MBEDTLS_SHA3_512 -> 4

pub fun int/mbedtls_sha3_id(i: int): exn mbedtls_sha3_id
  match i
    0 -> MBEDTLS_SHA3_NONE
    1 -> MBEDTLS_SHA3_224
    2 -> MBEDTLS_SHA3_256
    3 -> MBEDTLS_SHA3_384
    4 -> MBEDTLS_SHA3_512

// \brief     Supported cipher types.
// 
// \warning   DES/3DES are considered weak ciphers and their use
// constitutes a security risk. We recommend considering stronger
// ciphers instead.
type mbedtls_cipher_id_t
  // < Placeholder to mark the end of cipher ID lists.
  MBEDTLS_CIPHER_ID_NONE
  // < The identity cipher, treated as a stream cipher.
  MBEDTLS_CIPHER_ID_NULL
  // < The AES cipher.
  MBEDTLS_CIPHER_ID_AES
  // < The DES cipher. \warning DES is considered weak.
  MBEDTLS_CIPHER_ID_DES
  // < The Triple DES cipher. \warning 3DES is considered weak.
  MBEDTLS_CIPHER_ID_3DES
  // < The Camellia cipher.
  MBEDTLS_CIPHER_ID_CAMELLIA
  // < The Aria cipher.
  MBEDTLS_CIPHER_ID_ARIA
  // < The ChaCha20 cipher.
  MBEDTLS_CIPHER_ID_CHACHA20

pub fun mbedtls_cipher_id_t/int(i: mbedtls_cipher_id_t): int
  match i
    MBEDTLS_CIPHER_ID_NONE -> 0
    MBEDTLS_CIPHER_ID_NULL -> 1
    MBEDTLS_CIPHER_ID_AES -> 2
    MBEDTLS_CIPHER_ID_DES -> 3
    MBEDTLS_CIPHER_ID_3DES -> 4
    MBEDTLS_CIPHER_ID_CAMELLIA -> 5
    MBEDTLS_CIPHER_ID_ARIA -> 6
    MBEDTLS_CIPHER_ID_CHACHA20 -> 7

pub fun int/mbedtls_cipher_id_t(i: int): exn mbedtls_cipher_id_t
  match i
    0 -> MBEDTLS_CIPHER_ID_NONE
    1 -> MBEDTLS_CIPHER_ID_NULL
    2 -> MBEDTLS_CIPHER_ID_AES
    3 -> MBEDTLS_CIPHER_ID_DES
    4 -> MBEDTLS_CIPHER_ID_3DES
    5 -> MBEDTLS_CIPHER_ID_CAMELLIA
    6 -> MBEDTLS_CIPHER_ID_ARIA
    7 -> MBEDTLS_CIPHER_ID_CHACHA20

// \brief     Supported {cipher type, cipher mode} pairs.
// 
// \warning   DES/3DES are considered weak ciphers and their use
// constitutes a security risk. We recommend considering stronger
// ciphers instead.
type mbedtls_cipher_type_t
  // < Placeholder to mark the end of cipher-pair lists.
  MBEDTLS_CIPHER_NONE
  // < The identity stream cipher.
  MBEDTLS_CIPHER_NULL
  // < AES cipher with 128-bit ECB mode.
  MBEDTLS_CIPHER_AES_128_ECB
  // < AES cipher with 192-bit ECB mode.
  MBEDTLS_CIPHER_AES_192_ECB
  // < AES cipher with 256-bit ECB mode.
  MBEDTLS_CIPHER_AES_256_ECB
  // < AES cipher with 128-bit CBC mode.
  MBEDTLS_CIPHER_AES_128_CBC
  // < AES cipher with 192-bit CBC mode.
  MBEDTLS_CIPHER_AES_192_CBC
  // < AES cipher with 256-bit CBC mode.
  MBEDTLS_CIPHER_AES_256_CBC
  // < AES cipher with 128-bit CFB128 mode.
  MBEDTLS_CIPHER_AES_128_CFB128
  // < AES cipher with 192-bit CFB128 mode.
  MBEDTLS_CIPHER_AES_192_CFB128
  // < AES cipher with 256-bit CFB128 mode.
  MBEDTLS_CIPHER_AES_256_CFB128
  // < AES cipher with 128-bit CTR mode.
  MBEDTLS_CIPHER_AES_128_CTR
  // < AES cipher with 192-bit CTR mode.
  MBEDTLS_CIPHER_AES_192_CTR
  // < AES cipher with 256-bit CTR mode.
  MBEDTLS_CIPHER_AES_256_CTR
  // < AES cipher with 128-bit GCM mode.
  MBEDTLS_CIPHER_AES_128_GCM
  // < AES cipher with 192-bit GCM mode.
  MBEDTLS_CIPHER_AES_192_GCM
  // < AES cipher with 256-bit GCM mode.
  MBEDTLS_CIPHER_AES_256_GCM
  // < Camellia cipher with 128-bit ECB mode.
  MBEDTLS_CIPHER_CAMELLIA_128_ECB
  // < Camellia cipher with 192-bit ECB mode.
  MBEDTLS_CIPHER_CAMELLIA_192_ECB
  // < Camellia cipher with 256-bit ECB mode.
  MBEDTLS_CIPHER_CAMELLIA_256_ECB
  // < Camellia cipher with 128-bit CBC mode.
  MBEDTLS_CIPHER_CAMELLIA_128_CBC
  // < Camellia cipher with 192-bit CBC mode.
  MBEDTLS_CIPHER_CAMELLIA_192_CBC
  // < Camellia cipher with 256-bit CBC mode.
  MBEDTLS_CIPHER_CAMELLIA_256_CBC
  // < Camellia cipher with 128-bit CFB128 mode.
  MBEDTLS_CIPHER_CAMELLIA_128_CFB128
  // < Camellia cipher with 192-bit CFB128 mode.
  MBEDTLS_CIPHER_CAMELLIA_192_CFB128
  // < Camellia cipher with 256-bit CFB128 mode.
  MBEDTLS_CIPHER_CAMELLIA_256_CFB128
  // < Camellia cipher with 128-bit CTR mode.
  MBEDTLS_CIPHER_CAMELLIA_128_CTR
  // < Camellia cipher with 192-bit CTR mode.
  MBEDTLS_CIPHER_CAMELLIA_192_CTR
  // < Camellia cipher with 256-bit CTR mode.
  MBEDTLS_CIPHER_CAMELLIA_256_CTR
  // < Camellia cipher with 128-bit GCM mode.
  MBEDTLS_CIPHER_CAMELLIA_128_GCM
  // < Camellia cipher with 192-bit GCM mode.
  MBEDTLS_CIPHER_CAMELLIA_192_GCM
  // < Camellia cipher with 256-bit GCM mode.
  MBEDTLS_CIPHER_CAMELLIA_256_GCM
  // < DES cipher with ECB mode. \warning DES is considered weak.
  MBEDTLS_CIPHER_DES_ECB
  // < DES cipher with CBC mode. \warning DES is considered weak.
  MBEDTLS_CIPHER_DES_CBC
  // < DES cipher with EDE ECB mode. \warning 3DES is considered weak.
  MBEDTLS_CIPHER_DES_EDE_ECB
  // < DES cipher with EDE CBC mode. \warning 3DES is considered weak.
  MBEDTLS_CIPHER_DES_EDE_CBC
  // < DES cipher with EDE3 ECB mode. \warning 3DES is considered weak.
  MBEDTLS_CIPHER_DES_EDE3_ECB
  // < DES cipher with EDE3 CBC mode. \warning 3DES is considered weak.
  MBEDTLS_CIPHER_DES_EDE3_CBC
  // < AES cipher with 128-bit CCM mode.
  MBEDTLS_CIPHER_AES_128_CCM
  // < AES cipher with 192-bit CCM mode.
  MBEDTLS_CIPHER_AES_192_CCM
  // < AES cipher with 256-bit CCM mode.
  MBEDTLS_CIPHER_AES_256_CCM
  // < AES cipher with 128-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_AES_128_CCM_STAR_NO_TAG
  // < AES cipher with 192-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_AES_192_CCM_STAR_NO_TAG
  // < AES cipher with 256-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_AES_256_CCM_STAR_NO_TAG
  // < Camellia cipher with 128-bit CCM mode.
  MBEDTLS_CIPHER_CAMELLIA_128_CCM
  // < Camellia cipher with 192-bit CCM mode.
  MBEDTLS_CIPHER_CAMELLIA_192_CCM
  // < Camellia cipher with 256-bit CCM mode.
  MBEDTLS_CIPHER_CAMELLIA_256_CCM
  // < Camellia cipher with 128-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_CAMELLIA_128_CCM_STAR_NO_TAG
  // < Camellia cipher with 192-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_CAMELLIA_192_CCM_STAR_NO_TAG
  // < Camellia cipher with 256-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_CAMELLIA_256_CCM_STAR_NO_TAG
  // < Aria cipher with 128-bit key and ECB mode.
  MBEDTLS_CIPHER_ARIA_128_ECB
  // < Aria cipher with 192-bit key and ECB mode.
  MBEDTLS_CIPHER_ARIA_192_ECB
  // < Aria cipher with 256-bit key and ECB mode.
  MBEDTLS_CIPHER_ARIA_256_ECB
  // < Aria cipher with 128-bit key and CBC mode.
  MBEDTLS_CIPHER_ARIA_128_CBC
  // < Aria cipher with 192-bit key and CBC mode.
  MBEDTLS_CIPHER_ARIA_192_CBC
  // < Aria cipher with 256-bit key and CBC mode.
  MBEDTLS_CIPHER_ARIA_256_CBC
  // < Aria cipher with 128-bit key and CFB-128 mode.
  MBEDTLS_CIPHER_ARIA_128_CFB128
  // < Aria cipher with 192-bit key and CFB-128 mode.
  MBEDTLS_CIPHER_ARIA_192_CFB128
  // < Aria cipher with 256-bit key and CFB-128 mode.
  MBEDTLS_CIPHER_ARIA_256_CFB128
  // < Aria cipher with 128-bit key and CTR mode.
  MBEDTLS_CIPHER_ARIA_128_CTR
  // < Aria cipher with 192-bit key and CTR mode.
  MBEDTLS_CIPHER_ARIA_192_CTR
  // < Aria cipher with 256-bit key and CTR mode.
  MBEDTLS_CIPHER_ARIA_256_CTR
  // < Aria cipher with 128-bit key and GCM mode.
  MBEDTLS_CIPHER_ARIA_128_GCM
  // < Aria cipher with 192-bit key and GCM mode.
  MBEDTLS_CIPHER_ARIA_192_GCM
  // < Aria cipher with 256-bit key and GCM mode.
  MBEDTLS_CIPHER_ARIA_256_GCM
  // < Aria cipher with 128-bit key and CCM mode.
  MBEDTLS_CIPHER_ARIA_128_CCM
  // < Aria cipher with 192-bit key and CCM mode.
  MBEDTLS_CIPHER_ARIA_192_CCM
  // < Aria cipher with 256-bit key and CCM mode.
  MBEDTLS_CIPHER_ARIA_256_CCM
  // < Aria cipher with 128-bit key and CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_ARIA_128_CCM_STAR_NO_TAG
  // < Aria cipher with 192-bit key and CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_ARIA_192_CCM_STAR_NO_TAG
  // < Aria cipher with 256-bit key and CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_ARIA_256_CCM_STAR_NO_TAG
  // < AES 128-bit cipher in OFB mode.
  MBEDTLS_CIPHER_AES_128_OFB
  // < AES 192-bit cipher in OFB mode.
  MBEDTLS_CIPHER_AES_192_OFB
  // < AES 256-bit cipher in OFB mode.
  MBEDTLS_CIPHER_AES_256_OFB
  // < AES 128-bit cipher in XTS block mode.
  MBEDTLS_CIPHER_AES_128_XTS
  // < AES 256-bit cipher in XTS block mode.
  MBEDTLS_CIPHER_AES_256_XTS
  // < ChaCha20 stream cipher.
  MBEDTLS_CIPHER_CHACHA20
  // < ChaCha20-Poly1305 AEAD cipher.
  MBEDTLS_CIPHER_CHACHA20_POLY1305
  // < AES cipher with 128-bit NIST KW mode.
  MBEDTLS_CIPHER_AES_128_KW
  // < AES cipher with 192-bit NIST KW mode.
  MBEDTLS_CIPHER_AES_192_KW
  // < AES cipher with 256-bit NIST KW mode.
  MBEDTLS_CIPHER_AES_256_KW
  // < AES cipher with 128-bit NIST KWP mode.
  MBEDTLS_CIPHER_AES_128_KWP
  // < AES cipher with 192-bit NIST KWP mode.
  MBEDTLS_CIPHER_AES_192_KWP
  // < AES cipher with 256-bit NIST KWP mode.
  MBEDTLS_CIPHER_AES_256_KWP

pub fun mbedtls_cipher_type_t/int(i: mbedtls_cipher_type_t): int
  match i
    MBEDTLS_CIPHER_NONE -> 0
    MBEDTLS_CIPHER_NULL -> 1
    MBEDTLS_CIPHER_AES_128_ECB -> 2
    MBEDTLS_CIPHER_AES_192_ECB -> 3
    MBEDTLS_CIPHER_AES_256_ECB -> 4
    MBEDTLS_CIPHER_AES_128_CBC -> 5
    MBEDTLS_CIPHER_AES_192_CBC -> 6
    MBEDTLS_CIPHER_AES_256_CBC -> 7
    MBEDTLS_CIPHER_AES_128_CFB128 -> 8
    MBEDTLS_CIPHER_AES_192_CFB128 -> 9
    MBEDTLS_CIPHER_AES_256_CFB128 -> 10
    MBEDTLS_CIPHER_AES_128_CTR -> 11
    MBEDTLS_CIPHER_AES_192_CTR -> 12
    MBEDTLS_CIPHER_AES_256_CTR -> 13
    MBEDTLS_CIPHER_AES_128_GCM -> 14
    MBEDTLS_CIPHER_AES_192_GCM -> 15
    MBEDTLS_CIPHER_AES_256_GCM -> 16
    MBEDTLS_CIPHER_CAMELLIA_128_ECB -> 17
    MBEDTLS_CIPHER_CAMELLIA_192_ECB -> 18
    MBEDTLS_CIPHER_CAMELLIA_256_ECB -> 19
    MBEDTLS_CIPHER_CAMELLIA_128_CBC -> 20
    MBEDTLS_CIPHER_CAMELLIA_192_CBC -> 21
    MBEDTLS_CIPHER_CAMELLIA_256_CBC -> 22
    MBEDTLS_CIPHER_CAMELLIA_128_CFB128 -> 23
    MBEDTLS_CIPHER_CAMELLIA_192_CFB128 -> 24
    MBEDTLS_CIPHER_CAMELLIA_256_CFB128 -> 25
    MBEDTLS_CIPHER_CAMELLIA_128_CTR -> 26
    MBEDTLS_CIPHER_CAMELLIA_192_CTR -> 27
    MBEDTLS_CIPHER_CAMELLIA_256_CTR -> 28
    MBEDTLS_CIPHER_CAMELLIA_128_GCM -> 29
    MBEDTLS_CIPHER_CAMELLIA_192_GCM -> 30
    MBEDTLS_CIPHER_CAMELLIA_256_GCM -> 31
    MBEDTLS_CIPHER_DES_ECB -> 32
    MBEDTLS_CIPHER_DES_CBC -> 33
    MBEDTLS_CIPHER_DES_EDE_ECB -> 34
    MBEDTLS_CIPHER_DES_EDE_CBC -> 35
    MBEDTLS_CIPHER_DES_EDE3_ECB -> 36
    MBEDTLS_CIPHER_DES_EDE3_CBC -> 37
    MBEDTLS_CIPHER_AES_128_CCM -> 38
    MBEDTLS_CIPHER_AES_192_CCM -> 39
    MBEDTLS_CIPHER_AES_256_CCM -> 40
    MBEDTLS_CIPHER_AES_128_CCM_STAR_NO_TAG -> 41
    MBEDTLS_CIPHER_AES_192_CCM_STAR_NO_TAG -> 42
    MBEDTLS_CIPHER_AES_256_CCM_STAR_NO_TAG -> 43
    MBEDTLS_CIPHER_CAMELLIA_128_CCM -> 44
    MBEDTLS_CIPHER_CAMELLIA_192_CCM -> 45
    MBEDTLS_CIPHER_CAMELLIA_256_CCM -> 46
    MBEDTLS_CIPHER_CAMELLIA_128_CCM_STAR_NO_TAG -> 47
    MBEDTLS_CIPHER_CAMELLIA_192_CCM_STAR_NO_TAG -> 48
    MBEDTLS_CIPHER_CAMELLIA_256_CCM_STAR_NO_TAG -> 49
    MBEDTLS_CIPHER_ARIA_128_ECB -> 50
    MBEDTLS_CIPHER_ARIA_192_ECB -> 51
    MBEDTLS_CIPHER_ARIA_256_ECB -> 52
    MBEDTLS_CIPHER_ARIA_128_CBC -> 53
    MBEDTLS_CIPHER_ARIA_192_CBC -> 54
    MBEDTLS_CIPHER_ARIA_256_CBC -> 55
    MBEDTLS_CIPHER_ARIA_128_CFB128 -> 56
    MBEDTLS_CIPHER_ARIA_192_CFB128 -> 57
    MBEDTLS_CIPHER_ARIA_256_CFB128 -> 58
    MBEDTLS_CIPHER_ARIA_128_CTR -> 59
    MBEDTLS_CIPHER_ARIA_192_CTR -> 60
    MBEDTLS_CIPHER_ARIA_256_CTR -> 61
    MBEDTLS_CIPHER_ARIA_128_GCM -> 62
    MBEDTLS_CIPHER_ARIA_192_GCM -> 63
    MBEDTLS_CIPHER_ARIA_256_GCM -> 64
    MBEDTLS_CIPHER_ARIA_128_CCM -> 65
    MBEDTLS_CIPHER_ARIA_192_CCM -> 66
    MBEDTLS_CIPHER_ARIA_256_CCM -> 67
    MBEDTLS_CIPHER_ARIA_128_CCM_STAR_NO_TAG -> 68
    MBEDTLS_CIPHER_ARIA_192_CCM_STAR_NO_TAG -> 69
    MBEDTLS_CIPHER_ARIA_256_CCM_STAR_NO_TAG -> 70
    MBEDTLS_CIPHER_AES_128_OFB -> 71
    MBEDTLS_CIPHER_AES_192_OFB -> 72
    MBEDTLS_CIPHER_AES_256_OFB -> 73
    MBEDTLS_CIPHER_AES_128_XTS -> 74
    MBEDTLS_CIPHER_AES_256_XTS -> 75
    MBEDTLS_CIPHER_CHACHA20 -> 76
    MBEDTLS_CIPHER_CHACHA20_POLY1305 -> 77
    MBEDTLS_CIPHER_AES_128_KW -> 78
    MBEDTLS_CIPHER_AES_192_KW -> 79
    MBEDTLS_CIPHER_AES_256_KW -> 80
    MBEDTLS_CIPHER_AES_128_KWP -> 81
    MBEDTLS_CIPHER_AES_192_KWP -> 82
    MBEDTLS_CIPHER_AES_256_KWP -> 83

pub fun int/mbedtls_cipher_type_t(i: int): exn mbedtls_cipher_type_t
  match i
    0 -> MBEDTLS_CIPHER_NONE
    1 -> MBEDTLS_CIPHER_NULL
    2 -> MBEDTLS_CIPHER_AES_128_ECB
    3 -> MBEDTLS_CIPHER_AES_192_ECB
    4 -> MBEDTLS_CIPHER_AES_256_ECB
    5 -> MBEDTLS_CIPHER_AES_128_CBC
    6 -> MBEDTLS_CIPHER_AES_192_CBC
    7 -> MBEDTLS_CIPHER_AES_256_CBC
    8 -> MBEDTLS_CIPHER_AES_128_CFB128
    9 -> MBEDTLS_CIPHER_AES_192_CFB128
    10 -> MBEDTLS_CIPHER_AES_256_CFB128
    11 -> MBEDTLS_CIPHER_AES_128_CTR
    12 -> MBEDTLS_CIPHER_AES_192_CTR
    13 -> MBEDTLS_CIPHER_AES_256_CTR
    14 -> MBEDTLS_CIPHER_AES_128_GCM
    15 -> MBEDTLS_CIPHER_AES_192_GCM
    16 -> MBEDTLS_CIPHER_AES_256_GCM
    17 -> MBEDTLS_CIPHER_CAMELLIA_128_ECB
    18 -> MBEDTLS_CIPHER_CAMELLIA_192_ECB
    19 -> MBEDTLS_CIPHER_CAMELLIA_256_ECB
    20 -> MBEDTLS_CIPHER_CAMELLIA_128_CBC
    21 -> MBEDTLS_CIPHER_CAMELLIA_192_CBC
    22 -> MBEDTLS_CIPHER_CAMELLIA_256_CBC
    23 -> MBEDTLS_CIPHER_CAMELLIA_128_CFB128
    24 -> MBEDTLS_CIPHER_CAMELLIA_192_CFB128
    25 -> MBEDTLS_CIPHER_CAMELLIA_256_CFB128
    26 -> MBEDTLS_CIPHER_CAMELLIA_128_CTR
    27 -> MBEDTLS_CIPHER_CAMELLIA_192_CTR
    28 -> MBEDTLS_CIPHER_CAMELLIA_256_CTR
    29 -> MBEDTLS_CIPHER_CAMELLIA_128_GCM
    30 -> MBEDTLS_CIPHER_CAMELLIA_192_GCM
    31 -> MBEDTLS_CIPHER_CAMELLIA_256_GCM
    32 -> MBEDTLS_CIPHER_DES_ECB
    33 -> MBEDTLS_CIPHER_DES_CBC
    34 -> MBEDTLS_CIPHER_DES_EDE_ECB
    35 -> MBEDTLS_CIPHER_DES_EDE_CBC
    36 -> MBEDTLS_CIPHER_DES_EDE3_ECB
    37 -> MBEDTLS_CIPHER_DES_EDE3_CBC
    38 -> MBEDTLS_CIPHER_AES_128_CCM
    39 -> MBEDTLS_CIPHER_AES_192_CCM
    40 -> MBEDTLS_CIPHER_AES_256_CCM
    41 -> MBEDTLS_CIPHER_AES_128_CCM_STAR_NO_TAG
    42 -> MBEDTLS_CIPHER_AES_192_CCM_STAR_NO_TAG
    43 -> MBEDTLS_CIPHER_AES_256_CCM_STAR_NO_TAG
    44 -> MBEDTLS_CIPHER_CAMELLIA_128_CCM
    45 -> MBEDTLS_CIPHER_CAMELLIA_192_CCM
    46 -> MBEDTLS_CIPHER_CAMELLIA_256_CCM
    47 -> MBEDTLS_CIPHER_CAMELLIA_128_CCM_STAR_NO_TAG
    48 -> MBEDTLS_CIPHER_CAMELLIA_192_CCM_STAR_NO_TAG
    49 -> MBEDTLS_CIPHER_CAMELLIA_256_CCM_STAR_NO_TAG
    50 -> MBEDTLS_CIPHER_ARIA_128_ECB
    51 -> MBEDTLS_CIPHER_ARIA_192_ECB
    52 -> MBEDTLS_CIPHER_ARIA_256_ECB
    53 -> MBEDTLS_CIPHER_ARIA_128_CBC
    54 -> MBEDTLS_CIPHER_ARIA_192_CBC
    55 -> MBEDTLS_CIPHER_ARIA_256_CBC
    56 -> MBEDTLS_CIPHER_ARIA_128_CFB128
    57 -> MBEDTLS_CIPHER_ARIA_192_CFB128
    58 -> MBEDTLS_CIPHER_ARIA_256_CFB128
    59 -> MBEDTLS_CIPHER_ARIA_128_CTR
    60 -> MBEDTLS_CIPHER_ARIA_192_CTR
    61 -> MBEDTLS_CIPHER_ARIA_256_CTR
    62 -> MBEDTLS_CIPHER_ARIA_128_GCM
    63 -> MBEDTLS_CIPHER_ARIA_192_GCM
    64 -> MBEDTLS_CIPHER_ARIA_256_GCM
    65 -> MBEDTLS_CIPHER_ARIA_128_CCM
    66 -> MBEDTLS_CIPHER_ARIA_192_CCM
    67 -> MBEDTLS_CIPHER_ARIA_256_CCM
    68 -> MBEDTLS_CIPHER_ARIA_128_CCM_STAR_NO_TAG
    69 -> MBEDTLS_CIPHER_ARIA_192_CCM_STAR_NO_TAG
    70 -> MBEDTLS_CIPHER_ARIA_256_CCM_STAR_NO_TAG
    71 -> MBEDTLS_CIPHER_AES_128_OFB
    72 -> MBEDTLS_CIPHER_AES_192_OFB
    73 -> MBEDTLS_CIPHER_AES_256_OFB
    74 -> MBEDTLS_CIPHER_AES_128_XTS
    75 -> MBEDTLS_CIPHER_AES_256_XTS
    76 -> MBEDTLS_CIPHER_CHACHA20
    77 -> MBEDTLS_CIPHER_CHACHA20_POLY1305
    78 -> MBEDTLS_CIPHER_AES_128_KW
    79 -> MBEDTLS_CIPHER_AES_192_KW
    80 -> MBEDTLS_CIPHER_AES_256_KW
    81 -> MBEDTLS_CIPHER_AES_128_KWP
    82 -> MBEDTLS_CIPHER_AES_192_KWP
    83 -> MBEDTLS_CIPHER_AES_256_KWP

// Supported cipher modes.
type mbedtls_cipher_mode_t
  // < None.
  MBEDTLS_MODE_NONE
  // < The ECB cipher mode.
  MBEDTLS_MODE_ECB
  // < The CBC cipher mode.
  MBEDTLS_MODE_CBC
  // < The CFB cipher mode.
  MBEDTLS_MODE_CFB
  // < The OFB cipher mode.
  MBEDTLS_MODE_OFB
  // < The CTR cipher mode.
  MBEDTLS_MODE_CTR
  // < The GCM cipher mode.
  MBEDTLS_MODE_GCM
  // < The stream cipher mode.
  MBEDTLS_MODE_STREAM
  // < The CCM cipher mode.
  MBEDTLS_MODE_CCM
  // < The CCM*-no-tag cipher mode.
  MBEDTLS_MODE_CCM_STAR_NO_TAG
  // < The XTS cipher mode.
  MBEDTLS_MODE_XTS
  // < The ChaCha-Poly cipher mode.
  MBEDTLS_MODE_CHACHAPOLY
  // < The SP800-38F KW mode
  MBEDTLS_MODE_KW
  // < The SP800-38F KWP mode
  MBEDTLS_MODE_KWP

pub fun mbedtls_cipher_mode_t/int(i: mbedtls_cipher_mode_t): int
  match i
    MBEDTLS_MODE_NONE -> 0
    MBEDTLS_MODE_ECB -> 1
    MBEDTLS_MODE_CBC -> 2
    MBEDTLS_MODE_CFB -> 3
    MBEDTLS_MODE_OFB -> 4
    MBEDTLS_MODE_CTR -> 5
    MBEDTLS_MODE_GCM -> 6
    MBEDTLS_MODE_STREAM -> 7
    MBEDTLS_MODE_CCM -> 8
    MBEDTLS_MODE_CCM_STAR_NO_TAG -> 9
    MBEDTLS_MODE_XTS -> 10
    MBEDTLS_MODE_CHACHAPOLY -> 11
    MBEDTLS_MODE_KW -> 12
    MBEDTLS_MODE_KWP -> 13

pub fun int/mbedtls_cipher_mode_t(i: int): exn mbedtls_cipher_mode_t
  match i
    0 -> MBEDTLS_MODE_NONE
    1 -> MBEDTLS_MODE_ECB
    2 -> MBEDTLS_MODE_CBC
    3 -> MBEDTLS_MODE_CFB
    4 -> MBEDTLS_MODE_OFB
    5 -> MBEDTLS_MODE_CTR
    6 -> MBEDTLS_MODE_GCM
    7 -> MBEDTLS_MODE_STREAM
    8 -> MBEDTLS_MODE_CCM
    9 -> MBEDTLS_MODE_CCM_STAR_NO_TAG
    10 -> MBEDTLS_MODE_XTS
    11 -> MBEDTLS_MODE_CHACHAPOLY
    12 -> MBEDTLS_MODE_KW
    13 -> MBEDTLS_MODE_KWP

// Supported cipher padding types.
type mbedtls_cipher_padding_t
  // < PKCS7 padding (default).
  MBEDTLS_PADDING_PKCS7
  // < ISO/IEC 7816-4 padding.
  MBEDTLS_PADDING_ONE_AND_ZEROS
  // < ANSI X.923 padding.
  MBEDTLS_PADDING_ZEROS_AND_LEN
  // < Zero padding (not reversible).
  MBEDTLS_PADDING_ZEROS
  // < Never pad (full blocks only).
  MBEDTLS_PADDING_NONE

pub fun mbedtls_cipher_padding_t/int(i: mbedtls_cipher_padding_t): int
  match i
    MBEDTLS_PADDING_PKCS7 -> 0
    MBEDTLS_PADDING_ONE_AND_ZEROS -> 1
    MBEDTLS_PADDING_ZEROS_AND_LEN -> 2
    MBEDTLS_PADDING_ZEROS -> 3
    MBEDTLS_PADDING_NONE -> 4

pub fun int/mbedtls_cipher_padding_t(i: int): exn mbedtls_cipher_padding_t
  match i
    0 -> MBEDTLS_PADDING_PKCS7
    1 -> MBEDTLS_PADDING_ONE_AND_ZEROS
    2 -> MBEDTLS_PADDING_ZEROS_AND_LEN
    3 -> MBEDTLS_PADDING_ZEROS
    4 -> MBEDTLS_PADDING_NONE

// Type of operation.
type mbedtls_operation_t
  MBEDTLS_OPERATION_NONE
  MBEDTLS_DECRYPT
  MBEDTLS_ENCRYPT

pub fun mbedtls_operation_t/int(i: mbedtls_operation_t): int
  match i
    MBEDTLS_OPERATION_NONE -> -1
    MBEDTLS_DECRYPT -> 0
    MBEDTLS_ENCRYPT -> 1

pub fun int/mbedtls_operation_t(i: int): exn mbedtls_operation_t
  match i
    -1 -> MBEDTLS_OPERATION_NONE
    0 -> MBEDTLS_DECRYPT
    1 -> MBEDTLS_ENCRYPT

pub type psa-driver-hash-context-t-c
pub alias psa-driver-hash-context-tc = owned-c<psa-driver-hash-context-t-c>
pub alias psa-driver-hash-context-tcb<s::S> = borrowed-c<s,psa-driver-hash-context-t-c>
pub alias psa-driver-hash-context-tca = owned-c<c-array<psa-driver-hash-context-t>>

extern psa-driver-hash-context-t/size-of(c: c-null<psa-driver-hash-context-t-c>): int32
  c inline "sizeof(union psa_driver_hash_context_t)"

pub fun psa-driver-hash-context-tc(): psa-driver-hash-context-tc
  malloc(?size-of=psa-driver-hash-context-t/size-of)

pub fun psa-driver-hash-context-tc-calloc(): psa-driver-hash-context-tc
  malloc-c(?size-of=psa-driver-hash-context-t/size-of)

pub fun psa-driver-hash-context-tc-array(n: int): psa-driver-hash-context-tca
  malloc(n.int32, ?size-of=psa-driver-hash-context-t/size-of)

pub fun psa-driver-hash-context-tc-array-calloc(n: int): psa-driver-hash-context-tca
  malloc-c(n.int32, ?size-of=psa-driver-hash-context-t/size-of)

inline extern psa-driver-hash-context-t-ptr/dummy(s: intptr_t): int32
  c inline "(unsigned int)(((union psa_driver_hash_context_t*)#1)->dummy)"

pub inline fun psa-driver-hash-context-tc/dummy(^s: psa-driver-hash-context-tc): int32
  s.with-ptr(psa-driver-hash-context-t-ptr/dummy)

pub inline fun psa-driver-hash-context-tcb/dummy(^s: psa-driver-hash-context-tcb<s::S>): int32
  s.with-ptr(psa-driver-hash-context-t-ptr/dummy)

inline extern psa-driver-hash-context-t-ptr/set-dummy(s: intptr_t, dummy: int32): ()
  c inline "((union psa_driver_hash_context_t*)#1)->dummy = (unsigned int)#2"

pub inline fun psa-driver-hash-context-tc/set-dummy(^s: psa-driver-hash-context-tc, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-hash-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-hash-context-tcb/set-dummy(^s: psa-driver-hash-context-tcb<s::S>, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-hash-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-hash-context-tc-wrapper/dummy(^s: psa-driver-hash-context-tc): int
  s.with-ptr(psa-driver-hash-context-t-ptr/dummy).int

pub inline fun psa-driver-hash-context-tcb-wrapper/dummy(^s: psa-driver-hash-context-tcb<s::S>): int
  s.with-ptr(psa-driver-hash-context-t-ptr/dummy).int

pub inline fun psa-driver-hash-context-tc-wrapper/set-dummy(^s: psa-driver-hash-context-tc, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-hash-context-t-ptr/set-dummy(dummy.int32))

pub inline fun psa-driver-hash-context-tcb-wrapper/set-dummy(^s: psa-driver-hash-context-tcb<s::S>, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-hash-context-t-ptr/set-dummy(dummy.int32))

inline extern psa-driver-hash-context-t-ptr/mbedtls_ctx(s: intptr_t): mbedtls-psa-hash-operation-t-c
  c inline "(mbedtls_psa_hash_operation_t)(((union psa_driver_hash_context_t*)#1)->mbedtls_ctx)"

pub inline fun psa-driver-hash-context-tc/mbedtls_ctx(^s: psa-driver-hash-context-tc): mbedtls-psa-hash-operation-t-c
  s.with-ptr(psa-driver-hash-context-t-ptr/mbedtls_ctx)

pub inline fun psa-driver-hash-context-tcb/mbedtls_ctx(^s: psa-driver-hash-context-tcb<s::S>): mbedtls-psa-hash-operation-t-c
  s.with-ptr(psa-driver-hash-context-t-ptr/mbedtls_ctx)

inline extern psa-driver-hash-context-t-ptr/set-mbedtls_ctx(s: intptr_t, mbedtls_ctx: mbedtls-psa-hash-operation-t-c): ()
  c inline "((union psa_driver_hash_context_t*)#1)->mbedtls_ctx = (mbedtls_psa_hash_operation_t)#2"

pub inline fun psa-driver-hash-context-tc/set-mbedtls_ctx(^s: psa-driver-hash-context-tc, mbedtls_ctx: mbedtls-psa-hash-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-hash-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub inline fun psa-driver-hash-context-tcb/set-mbedtls_ctx(^s: psa-driver-hash-context-tcb<s::S>, mbedtls_ctx: mbedtls-psa-hash-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-hash-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub inline fun psa-driver-hash-context-tc-wrapper/mbedtls_ctx(^s: psa-driver-hash-context-tc): mbedtls-psa-hash-operation-t
  s.with-ptr(psa-driver-hash-context-t-ptr/mbedtls_ctx).to-koka

pub inline fun psa-driver-hash-context-tcb-wrapper/mbedtls_ctx(^s: psa-driver-hash-context-tcb<s::S>): mbedtls-psa-hash-operation-t
  s.with-ptr(psa-driver-hash-context-t-ptr/mbedtls_ctx).to-koka

pub inline fun psa-driver-hash-context-tc-wrapper/set-mbedtls_ctx(^s: psa-driver-hash-context-tc, mbedtls_ctx: mbedtls-psa-hash-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-hash-context-t-ptr/set-mbedtls_ctx((struct mbedtls_psa_hash_operation_t)(mbedtls_ctx)))

pub inline fun psa-driver-hash-context-tcb-wrapper/set-mbedtls_ctx(^s: psa-driver-hash-context-tcb<s::S>, mbedtls_ctx: mbedtls-psa-hash-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-hash-context-t-ptr/set-mbedtls_ctx((struct mbedtls_psa_hash_operation_t)(mbedtls_ctx)))

pub value struct mbedtls-psa-hash-operation-t
  private-alg: koka-psa_algorithm_t
  private-ctx: unnamedunion1

pub type mbedtls-psa-hash-operation-t-c
pub alias mbedtls-psa-hash-operation-tc = owned-c<mbedtls-psa-hash-operation-t-c>
pub alias mbedtls-psa-hash-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-hash-operation-t-c>
pub alias mbedtls-psa-hash-operation-tca = owned-c<c-array<mbedtls-psa-hash-operation-t>>

extern mbedtls-psa-hash-operation-t/size-of(c: c-null<mbedtls-psa-hash-operation-t-c>): int32
  c inline "sizeof(struct mbedtls_psa_hash_operation_t)"

pub fun mbedtls-psa-hash-operation-tc(): mbedtls-psa-hash-operation-tc
  malloc(?size-of=mbedtls-psa-hash-operation-t/size-of)

pub fun mbedtls-psa-hash-operation-tc-calloc(): mbedtls-psa-hash-operation-tc
  malloc-c(?size-of=mbedtls-psa-hash-operation-t/size-of)

pub fun mbedtls-psa-hash-operation-tc-array(n: int): mbedtls-psa-hash-operation-tca
  malloc(n.int32, ?size-of=mbedtls-psa-hash-operation-t/size-of)

pub fun mbedtls-psa-hash-operation-tc-array-calloc(n: int): mbedtls-psa-hash-operation-tca
  malloc-c(n.int32, ?size-of=mbedtls-psa-hash-operation-t/size-of)

inline extern mbedtls-psa-hash-operation-t-ptr/private-alg(s: intptr_t): int32
  c inline "(psa_algorithm_t)(((struct mbedtls_psa_hash_operation_t*)#1)->private_alg)"

pub inline fun mbedtls-psa-hash-operation-tc/private-alg(^s: mbedtls-psa-hash-operation-tc): int32
  s.with-ptr(mbedtls-psa-hash-operation-t-ptr/private-alg)

pub inline fun mbedtls-psa-hash-operation-tcb/private-alg(^s: mbedtls-psa-hash-operation-tcb<s::S>): int32
  s.with-ptr(mbedtls-psa-hash-operation-t-ptr/private-alg)

inline extern mbedtls-psa-hash-operation-t-ptr/set-private-alg(s: intptr_t, private-alg: int32): ()
  c inline "((struct mbedtls_psa_hash_operation_t*)#1)->private_alg = (psa_algorithm_t)#2"

pub inline fun mbedtls-psa-hash-operation-tc/set-private-alg(^s: mbedtls-psa-hash-operation-tc, private-alg: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hash-operation-t-ptr/set-private-alg(private-alg))

pub inline fun mbedtls-psa-hash-operation-tcb/set-private-alg(^s: mbedtls-psa-hash-operation-tcb<s::S>, private-alg: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hash-operation-t-ptr/set-private-alg(private-alg))

pub inline fun mbedtls-psa-hash-operation-tc-wrapper/private-alg(^s: mbedtls-psa-hash-operation-tc): koka-psa_algorithm_t
  s.with-ptr(mbedtls-psa-hash-operation-t-ptr/private-alg).int

pub inline fun mbedtls-psa-hash-operation-tcb-wrapper/private-alg(^s: mbedtls-psa-hash-operation-tcb<s::S>): koka-psa_algorithm_t
  s.with-ptr(mbedtls-psa-hash-operation-t-ptr/private-alg).int

pub inline fun mbedtls-psa-hash-operation-tc-wrapper/set-private-alg(^s: mbedtls-psa-hash-operation-tc, private-alg: koka-psa_algorithm_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hash-operation-t-ptr/set-private-alg(private-alg.int32))

pub inline fun mbedtls-psa-hash-operation-tcb-wrapper/set-private-alg(^s: mbedtls-psa-hash-operation-tcb<s::S>, private-alg: koka-psa_algorithm_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hash-operation-t-ptr/set-private-alg(private-alg.int32))

inline extern mbedtls-psa-hash-operation-t-ptr/private-ctx(s: intptr_t): unnamedunion1-c
  c inline "(UnnamedUnion1)(((struct mbedtls_psa_hash_operation_t*)#1)->private_ctx)"

pub inline fun mbedtls-psa-hash-operation-tc/private-ctx(^s: mbedtls-psa-hash-operation-tc): unnamedunion1-c
  s.with-ptr(mbedtls-psa-hash-operation-t-ptr/private-ctx)

pub inline fun mbedtls-psa-hash-operation-tcb/private-ctx(^s: mbedtls-psa-hash-operation-tcb<s::S>): unnamedunion1-c
  s.with-ptr(mbedtls-psa-hash-operation-t-ptr/private-ctx)

inline extern mbedtls-psa-hash-operation-t-ptr/set-private-ctx(s: intptr_t, private-ctx: unnamedunion1-c): ()
  c inline "((struct mbedtls_psa_hash_operation_t*)#1)->private_ctx = (UnnamedUnion1)#2"

pub inline fun mbedtls-psa-hash-operation-tc/set-private-ctx(^s: mbedtls-psa-hash-operation-tc, private-ctx: unnamedunion1-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hash-operation-t-ptr/set-private-ctx(private-ctx))

pub inline fun mbedtls-psa-hash-operation-tcb/set-private-ctx(^s: mbedtls-psa-hash-operation-tcb<s::S>, private-ctx: unnamedunion1-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hash-operation-t-ptr/set-private-ctx(private-ctx))

pub fun mbedtls-psa-hash-operation-t/to-koka(s: mbedtls-psa-hash-operation-tc): mbedtls-psa-hash-operation-t
  Mbedtls-psa-hash-operation-t(s.mbedtls-psa-hash-operation-tc/private-alg.int, s.mbedtls-psa-hash-operation-tc/private-ctx)

// \brief Encoding of a cryptographic algorithm.
// 
// Values of this type are generally constructed by macros called
// `PSA_ALG_xxx`.
// 
// For algorithms that can be applied to multiple key types, this type
// does not encode the key type. For example, for symmetric ciphers
// based on a block cipher, #psa_algorithm_t encodes the block cipher
// mode and the padding mode while the block cipher itself is encoded
// via #psa_key_type_t.
// 
// \note Values of this type are encoded in the persistent key store.
// Any changes to existing values will require bumping the storage
// format version and providing a translation when reading the old
// format.
alias psa-algorithm-t = int32
alias koka-psa_algorithm_t = int
pub type unnamedunion1-c
pub alias unnamedunion1c = owned-c<unnamedunion1-c>
pub alias unnamedunion1cb<s::S> = borrowed-c<s,unnamedunion1-c>
pub alias unnamedunion1ca = owned-c<c-array<unnamedunion1>>

extern unnamedunion1/size-of(c: c-null<unnamedunion1-c>): int32
  c inline "sizeof(union UnnamedUnion1)"

pub fun unnamedunion1c(): unnamedunion1c
  malloc(?size-of=unnamedunion1/size-of)

pub fun unnamedunion1c-calloc(): unnamedunion1c
  malloc-c(?size-of=unnamedunion1/size-of)

pub fun unnamedunion1c-array(n: int): unnamedunion1ca
  malloc(n.int32, ?size-of=unnamedunion1/size-of)

pub fun unnamedunion1c-array-calloc(n: int): unnamedunion1ca
  malloc-c(n.int32, ?size-of=unnamedunion1/size-of)

inline extern unnamedunion1-ptr/dummy(s: intptr_t): int32
  c inline "(unsigned int)(((union UnnamedUnion1*)#1)->dummy)"

pub inline fun unnamedunion1c/dummy(^s: unnamedunion1c): int32
  s.with-ptr(unnamedunion1-ptr/dummy)

pub inline fun unnamedunion1cb/dummy(^s: unnamedunion1cb<s::S>): int32
  s.with-ptr(unnamedunion1-ptr/dummy)

inline extern unnamedunion1-ptr/set-dummy(s: intptr_t, dummy: int32): ()
  c inline "((union UnnamedUnion1*)#1)->dummy = (unsigned int)#2"

pub inline fun unnamedunion1c/set-dummy(^s: unnamedunion1c, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-dummy(dummy))

pub inline fun unnamedunion1cb/set-dummy(^s: unnamedunion1cb<s::S>, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-dummy(dummy))

pub inline fun unnamedunion1c-wrapper/dummy(^s: unnamedunion1c): int
  s.with-ptr(unnamedunion1-ptr/dummy).int

pub inline fun unnamedunion1cb-wrapper/dummy(^s: unnamedunion1cb<s::S>): int
  s.with-ptr(unnamedunion1-ptr/dummy).int

pub inline fun unnamedunion1c-wrapper/set-dummy(^s: unnamedunion1c, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-dummy(dummy.int32))

pub inline fun unnamedunion1cb-wrapper/set-dummy(^s: unnamedunion1cb<s::S>, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-dummy(dummy.int32))

inline extern unnamedunion1-ptr/md5(s: intptr_t): mbedtls-md5-context-c
  c inline "(mbedtls_md5_context)(((union UnnamedUnion1*)#1)->md5)"

pub inline fun unnamedunion1c/md5(^s: unnamedunion1c): mbedtls-md5-context-c
  s.with-ptr(unnamedunion1-ptr/md5)

pub inline fun unnamedunion1cb/md5(^s: unnamedunion1cb<s::S>): mbedtls-md5-context-c
  s.with-ptr(unnamedunion1-ptr/md5)

inline extern unnamedunion1-ptr/set-md5(s: intptr_t, md5: mbedtls-md5-context-c): ()
  c inline "((union UnnamedUnion1*)#1)->md5 = (mbedtls_md5_context)#2"

pub inline fun unnamedunion1c/set-md5(^s: unnamedunion1c, md5: mbedtls-md5-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-md5(md5))

pub inline fun unnamedunion1cb/set-md5(^s: unnamedunion1cb<s::S>, md5: mbedtls-md5-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-md5(md5))

inline extern unnamedunion1-ptr/ripemd160(s: intptr_t): mbedtls-ripemd160-context-c
  c inline "(mbedtls_ripemd160_context)(((union UnnamedUnion1*)#1)->ripemd160)"

pub inline fun unnamedunion1c/ripemd160(^s: unnamedunion1c): mbedtls-ripemd160-context-c
  s.with-ptr(unnamedunion1-ptr/ripemd160)

pub inline fun unnamedunion1cb/ripemd160(^s: unnamedunion1cb<s::S>): mbedtls-ripemd160-context-c
  s.with-ptr(unnamedunion1-ptr/ripemd160)

inline extern unnamedunion1-ptr/set-ripemd160(s: intptr_t, ripemd160: mbedtls-ripemd160-context-c): ()
  c inline "((union UnnamedUnion1*)#1)->ripemd160 = (mbedtls_ripemd160_context)#2"

pub inline fun unnamedunion1c/set-ripemd160(^s: unnamedunion1c, ripemd160: mbedtls-ripemd160-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-ripemd160(ripemd160))

pub inline fun unnamedunion1cb/set-ripemd160(^s: unnamedunion1cb<s::S>, ripemd160: mbedtls-ripemd160-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-ripemd160(ripemd160))

inline extern unnamedunion1-ptr/sha1(s: intptr_t): mbedtls-sha1-context-c
  c inline "(mbedtls_sha1_context)(((union UnnamedUnion1*)#1)->sha1)"

pub inline fun unnamedunion1c/sha1(^s: unnamedunion1c): mbedtls-sha1-context-c
  s.with-ptr(unnamedunion1-ptr/sha1)

pub inline fun unnamedunion1cb/sha1(^s: unnamedunion1cb<s::S>): mbedtls-sha1-context-c
  s.with-ptr(unnamedunion1-ptr/sha1)

inline extern unnamedunion1-ptr/set-sha1(s: intptr_t, sha1: mbedtls-sha1-context-c): ()
  c inline "((union UnnamedUnion1*)#1)->sha1 = (mbedtls_sha1_context)#2"

pub inline fun unnamedunion1c/set-sha1(^s: unnamedunion1c, sha1: mbedtls-sha1-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-sha1(sha1))

pub inline fun unnamedunion1cb/set-sha1(^s: unnamedunion1cb<s::S>, sha1: mbedtls-sha1-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-sha1(sha1))

inline extern unnamedunion1-ptr/sha256(s: intptr_t): mbedtls-sha256-context-c
  c inline "(mbedtls_sha256_context)(((union UnnamedUnion1*)#1)->sha256)"

pub inline fun unnamedunion1c/sha256(^s: unnamedunion1c): mbedtls-sha256-context-c
  s.with-ptr(unnamedunion1-ptr/sha256)

pub inline fun unnamedunion1cb/sha256(^s: unnamedunion1cb<s::S>): mbedtls-sha256-context-c
  s.with-ptr(unnamedunion1-ptr/sha256)

inline extern unnamedunion1-ptr/set-sha256(s: intptr_t, sha256: mbedtls-sha256-context-c): ()
  c inline "((union UnnamedUnion1*)#1)->sha256 = (mbedtls_sha256_context)#2"

pub inline fun unnamedunion1c/set-sha256(^s: unnamedunion1c, sha256: mbedtls-sha256-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-sha256(sha256))

pub inline fun unnamedunion1cb/set-sha256(^s: unnamedunion1cb<s::S>, sha256: mbedtls-sha256-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-sha256(sha256))

inline extern unnamedunion1-ptr/sha512(s: intptr_t): mbedtls-sha512-context-c
  c inline "(mbedtls_sha512_context)(((union UnnamedUnion1*)#1)->sha512)"

pub inline fun unnamedunion1c/sha512(^s: unnamedunion1c): mbedtls-sha512-context-c
  s.with-ptr(unnamedunion1-ptr/sha512)

pub inline fun unnamedunion1cb/sha512(^s: unnamedunion1cb<s::S>): mbedtls-sha512-context-c
  s.with-ptr(unnamedunion1-ptr/sha512)

inline extern unnamedunion1-ptr/set-sha512(s: intptr_t, sha512: mbedtls-sha512-context-c): ()
  c inline "((union UnnamedUnion1*)#1)->sha512 = (mbedtls_sha512_context)#2"

pub inline fun unnamedunion1c/set-sha512(^s: unnamedunion1c, sha512: mbedtls-sha512-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-sha512(sha512))

pub inline fun unnamedunion1cb/set-sha512(^s: unnamedunion1cb<s::S>, sha512: mbedtls-sha512-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-sha512(sha512))

inline extern unnamedunion1-ptr/sha3(s: intptr_t): mbedtls-sha3-context-c
  c inline "(mbedtls_sha3_context)(((union UnnamedUnion1*)#1)->sha3)"

pub inline fun unnamedunion1c/sha3(^s: unnamedunion1c): mbedtls-sha3-context-c
  s.with-ptr(unnamedunion1-ptr/sha3)

pub inline fun unnamedunion1cb/sha3(^s: unnamedunion1cb<s::S>): mbedtls-sha3-context-c
  s.with-ptr(unnamedunion1-ptr/sha3)

inline extern unnamedunion1-ptr/set-sha3(s: intptr_t, sha3: mbedtls-sha3-context-c): ()
  c inline "((union UnnamedUnion1*)#1)->sha3 = (mbedtls_sha3_context)#2"

pub inline fun unnamedunion1c/set-sha3(^s: unnamedunion1c, sha3: mbedtls-sha3-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-sha3(sha3))

pub inline fun unnamedunion1cb/set-sha3(^s: unnamedunion1cb<s::S>, sha3: mbedtls-sha3-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion1-ptr/set-sha3(sha3))

// \brief          MD5 context structure
// 
// \warning        MD5 is considered a weak message digest and its use
// constitutes a security risk. We recommend considering
// stronger message digests instead.
pub type mbedtls-md5-context-c
pub alias mbedtls-md5-contextc<s::S> = owned-c<mbedtls-md5-context-c>
pub alias mbedtls-md5-contextcb<s::S> = borrowed-c<s,mbedtls-md5-context-c>
pub alias mbedtls-md5-contextca<s::S> = owned-c<c-array<mbedtls-md5-context>>

extern mbedtls-md5-context/size-of(c: c-null<mbedtls-md5-context-c>): int32
  c inline "sizeof(struct mbedtls_md5_context)"

pub fun mbedtls-md5-contextc(): mbedtls-md5-contextc<s::S>
  malloc(?size-of=mbedtls-md5-context/size-of)

pub fun mbedtls-md5-contextc-calloc(): mbedtls-md5-contextc<s::S>
  malloc-c(?size-of=mbedtls-md5-context/size-of)

pub fun mbedtls-md5-contextc-array(n: int): mbedtls-md5-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-md5-context/size-of)

pub fun mbedtls-md5-contextc-array-calloc(n: int): mbedtls-md5-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-md5-context/size-of)

// \brief          RIPEMD-160 context structure
pub type mbedtls-ripemd160-context-c
pub alias mbedtls-ripemd160-contextc<s::S> = owned-c<mbedtls-ripemd160-context-c>
pub alias mbedtls-ripemd160-contextcb<s::S> = borrowed-c<s,mbedtls-ripemd160-context-c>
pub alias mbedtls-ripemd160-contextca<s::S> = owned-c<c-array<mbedtls-ripemd160-context>>

extern mbedtls-ripemd160-context/size-of(c: c-null<mbedtls-ripemd160-context-c>): int32
  c inline "sizeof(struct mbedtls_ripemd160_context)"

pub fun mbedtls-ripemd160-contextc(): mbedtls-ripemd160-contextc<s::S>
  malloc(?size-of=mbedtls-ripemd160-context/size-of)

pub fun mbedtls-ripemd160-contextc-calloc(): mbedtls-ripemd160-contextc<s::S>
  malloc-c(?size-of=mbedtls-ripemd160-context/size-of)

pub fun mbedtls-ripemd160-contextc-array(n: int): mbedtls-ripemd160-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-ripemd160-context/size-of)

pub fun mbedtls-ripemd160-contextc-array-calloc(n: int): mbedtls-ripemd160-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-ripemd160-context/size-of)

// \brief          The SHA-1 context structure.
// 
// \warning        SHA-1 is considered a weak message digest and its use
// constitutes a security risk. We recommend considering
// stronger message digests instead.
pub type mbedtls-sha1-context-c
pub alias mbedtls-sha1-contextc<s::S> = owned-c<mbedtls-sha1-context-c>
pub alias mbedtls-sha1-contextcb<s::S> = borrowed-c<s,mbedtls-sha1-context-c>
pub alias mbedtls-sha1-contextca<s::S> = owned-c<c-array<mbedtls-sha1-context>>

extern mbedtls-sha1-context/size-of(c: c-null<mbedtls-sha1-context-c>): int32
  c inline "sizeof(struct mbedtls_sha1_context)"

pub fun mbedtls-sha1-contextc(): mbedtls-sha1-contextc<s::S>
  malloc(?size-of=mbedtls-sha1-context/size-of)

pub fun mbedtls-sha1-contextc-calloc(): mbedtls-sha1-contextc<s::S>
  malloc-c(?size-of=mbedtls-sha1-context/size-of)

pub fun mbedtls-sha1-contextc-array(n: int): mbedtls-sha1-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-sha1-context/size-of)

pub fun mbedtls-sha1-contextc-array-calloc(n: int): mbedtls-sha1-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-sha1-context/size-of)

// \brief          The SHA-256 context structure.
// 
// The structure is used both for SHA-256 and for SHA-224
// checksum calculations. The choice between these two is
// made in the call to mbedtls_sha256_starts().
pub type mbedtls-sha256-context-c
pub alias mbedtls-sha256-contextc<s::S> = owned-c<mbedtls-sha256-context-c>
pub alias mbedtls-sha256-contextcb<s::S> = borrowed-c<s,mbedtls-sha256-context-c>
pub alias mbedtls-sha256-contextca<s::S> = owned-c<c-array<mbedtls-sha256-context>>

extern mbedtls-sha256-context/size-of(c: c-null<mbedtls-sha256-context-c>): int32
  c inline "sizeof(struct mbedtls_sha256_context)"

pub fun mbedtls-sha256-contextc(): mbedtls-sha256-contextc<s::S>
  malloc(?size-of=mbedtls-sha256-context/size-of)

pub fun mbedtls-sha256-contextc-calloc(): mbedtls-sha256-contextc<s::S>
  malloc-c(?size-of=mbedtls-sha256-context/size-of)

pub fun mbedtls-sha256-contextc-array(n: int): mbedtls-sha256-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-sha256-context/size-of)

pub fun mbedtls-sha256-contextc-array-calloc(n: int): mbedtls-sha256-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-sha256-context/size-of)

inline extern mbedtls-sha256-context-ptr/private_is224(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_sha256_context*)#1)->private_is224)"

pub inline fun mbedtls-sha256-contextc/private_is224(^s: mbedtls-sha256-contextc<s::S>): int32
  s.with-ptr(mbedtls-sha256-context-ptr/private_is224)

pub inline fun mbedtls-sha256-contextcb/private_is224(^s: mbedtls-sha256-contextcb<s::S>): int32
  s.with-ptr(mbedtls-sha256-context-ptr/private_is224)

inline extern mbedtls-sha256-context-ptr/set-private_is224(s: intptr_t, private_is224: int32): ()
  c inline "((struct mbedtls_sha256_context*)#1)->private_is224 = (int)#2"

pub inline fun mbedtls-sha256-contextc/set-private_is224(^s: mbedtls-sha256-contextc<s::S>, private_is224: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-context-ptr/set-private_is224(private_is224))

pub inline fun mbedtls-sha256-contextcb/set-private_is224(^s: mbedtls-sha256-contextcb<s::S>, private_is224: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-context-ptr/set-private_is224(private_is224))

pub inline fun mbedtls-sha256-contextc-wrapper/private_is224(^s: mbedtls-sha256-contextc<s::S>): int
  s.with-ptr(mbedtls-sha256-context-ptr/private_is224).int

pub inline fun mbedtls-sha256-contextcb-wrapper/private_is224(^s: mbedtls-sha256-contextcb<s::S>): int
  s.with-ptr(mbedtls-sha256-context-ptr/private_is224).int

pub inline fun mbedtls-sha256-contextc-wrapper/set-private_is224(^s: mbedtls-sha256-contextc<s::S>, private_is224: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-context-ptr/set-private_is224(private_is224.int32))

pub inline fun mbedtls-sha256-contextcb-wrapper/set-private_is224(^s: mbedtls-sha256-contextcb<s::S>, private_is224: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-context-ptr/set-private_is224(private_is224.int32))

// \brief          The SHA-512 context structure.
// 
// The structure is used both for SHA-384 and for SHA-512
// checksum calculations. The choice between these two is
// made in the call to mbedtls_sha512_starts().
pub type mbedtls-sha512-context-c
pub alias mbedtls-sha512-contextc<s::S> = owned-c<mbedtls-sha512-context-c>
pub alias mbedtls-sha512-contextcb<s::S> = borrowed-c<s,mbedtls-sha512-context-c>
pub alias mbedtls-sha512-contextca<s::S> = owned-c<c-array<mbedtls-sha512-context>>

extern mbedtls-sha512-context/size-of(c: c-null<mbedtls-sha512-context-c>): int32
  c inline "sizeof(struct mbedtls_sha512_context)"

pub fun mbedtls-sha512-contextc(): mbedtls-sha512-contextc<s::S>
  malloc(?size-of=mbedtls-sha512-context/size-of)

pub fun mbedtls-sha512-contextc-calloc(): mbedtls-sha512-contextc<s::S>
  malloc-c(?size-of=mbedtls-sha512-context/size-of)

pub fun mbedtls-sha512-contextc-array(n: int): mbedtls-sha512-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-sha512-context/size-of)

pub fun mbedtls-sha512-contextc-array-calloc(n: int): mbedtls-sha512-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-sha512-context/size-of)

inline extern mbedtls-sha512-context-ptr/private_is384(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_sha512_context*)#1)->private_is384)"

pub inline fun mbedtls-sha512-contextc/private_is384(^s: mbedtls-sha512-contextc<s::S>): int32
  s.with-ptr(mbedtls-sha512-context-ptr/private_is384)

pub inline fun mbedtls-sha512-contextcb/private_is384(^s: mbedtls-sha512-contextcb<s::S>): int32
  s.with-ptr(mbedtls-sha512-context-ptr/private_is384)

inline extern mbedtls-sha512-context-ptr/set-private_is384(s: intptr_t, private_is384: int32): ()
  c inline "((struct mbedtls_sha512_context*)#1)->private_is384 = (int)#2"

pub inline fun mbedtls-sha512-contextc/set-private_is384(^s: mbedtls-sha512-contextc<s::S>, private_is384: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-context-ptr/set-private_is384(private_is384))

pub inline fun mbedtls-sha512-contextcb/set-private_is384(^s: mbedtls-sha512-contextcb<s::S>, private_is384: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-context-ptr/set-private_is384(private_is384))

pub inline fun mbedtls-sha512-contextc-wrapper/private_is384(^s: mbedtls-sha512-contextc<s::S>): int
  s.with-ptr(mbedtls-sha512-context-ptr/private_is384).int

pub inline fun mbedtls-sha512-contextcb-wrapper/private_is384(^s: mbedtls-sha512-contextcb<s::S>): int
  s.with-ptr(mbedtls-sha512-context-ptr/private_is384).int

pub inline fun mbedtls-sha512-contextc-wrapper/set-private_is384(^s: mbedtls-sha512-contextc<s::S>, private_is384: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-context-ptr/set-private_is384(private_is384.int32))

pub inline fun mbedtls-sha512-contextcb-wrapper/set-private_is384(^s: mbedtls-sha512-contextcb<s::S>, private_is384: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-context-ptr/set-private_is384(private_is384.int32))

// \brief          The SHA-3 context structure.
// 
// The structure is used SHA-3 checksum calculations.
pub type mbedtls-sha3-context-c
pub alias mbedtls-sha3-contextc<s::S> = owned-c<mbedtls-sha3-context-c>
pub alias mbedtls-sha3-contextcb<s::S> = borrowed-c<s,mbedtls-sha3-context-c>
pub alias mbedtls-sha3-contextca<s::S> = owned-c<c-array<mbedtls-sha3-context>>

extern mbedtls-sha3-context/size-of(c: c-null<mbedtls-sha3-context-c>): int32
  c inline "sizeof(struct mbedtls_sha3_context)"

pub fun mbedtls-sha3-contextc(): mbedtls-sha3-contextc<s::S>
  malloc(?size-of=mbedtls-sha3-context/size-of)

pub fun mbedtls-sha3-contextc-calloc(): mbedtls-sha3-contextc<s::S>
  malloc-c(?size-of=mbedtls-sha3-context/size-of)

pub fun mbedtls-sha3-contextc-array(n: int): mbedtls-sha3-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-sha3-context/size-of)

pub fun mbedtls-sha3-contextc-array-calloc(n: int): mbedtls-sha3-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-sha3-context/size-of)

inline extern mbedtls-sha3-context-ptr/private_index(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_sha3_context*)#1)->private_index)"

pub inline fun mbedtls-sha3-contextc/private_index(^s: mbedtls-sha3-contextc<s::S>): int32
  s.with-ptr(mbedtls-sha3-context-ptr/private_index)

pub inline fun mbedtls-sha3-contextcb/private_index(^s: mbedtls-sha3-contextcb<s::S>): int32
  s.with-ptr(mbedtls-sha3-context-ptr/private_index)

inline extern mbedtls-sha3-context-ptr/set-private_index(s: intptr_t, private_index: int32): ()
  c inline "((struct mbedtls_sha3_context*)#1)->private_index = (int32_t)#2"

pub inline fun mbedtls-sha3-contextc/set-private_index(^s: mbedtls-sha3-contextc<s::S>, private_index: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_index(private_index))

pub inline fun mbedtls-sha3-contextcb/set-private_index(^s: mbedtls-sha3-contextcb<s::S>, private_index: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_index(private_index))

pub inline fun mbedtls-sha3-contextc-wrapper/private_index(^s: mbedtls-sha3-contextc<s::S>): int
  s.with-ptr(mbedtls-sha3-context-ptr/private_index).int

pub inline fun mbedtls-sha3-contextcb-wrapper/private_index(^s: mbedtls-sha3-contextcb<s::S>): int
  s.with-ptr(mbedtls-sha3-context-ptr/private_index).int

pub inline fun mbedtls-sha3-contextc-wrapper/set-private_index(^s: mbedtls-sha3-contextc<s::S>, private_index: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_index(private_index.int32))

pub inline fun mbedtls-sha3-contextcb-wrapper/set-private_index(^s: mbedtls-sha3-contextcb<s::S>, private_index: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_index(private_index.int32))

inline extern mbedtls-sha3-context-ptr/private_olen(s: intptr_t): int16
  c inline "(int16_t)(((struct mbedtls_sha3_context*)#1)->private_olen)"

pub inline fun mbedtls-sha3-contextc/private_olen(^s: mbedtls-sha3-contextc<s::S>): int16
  s.with-ptr(mbedtls-sha3-context-ptr/private_olen)

pub inline fun mbedtls-sha3-contextcb/private_olen(^s: mbedtls-sha3-contextcb<s::S>): int16
  s.with-ptr(mbedtls-sha3-context-ptr/private_olen)

inline extern mbedtls-sha3-context-ptr/set-private_olen(s: intptr_t, private_olen: int16): ()
  c inline "((struct mbedtls_sha3_context*)#1)->private_olen = (int16_t)#2"

pub inline fun mbedtls-sha3-contextc/set-private_olen(^s: mbedtls-sha3-contextc<s::S>, private_olen: int16): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_olen(private_olen))

pub inline fun mbedtls-sha3-contextcb/set-private_olen(^s: mbedtls-sha3-contextcb<s::S>, private_olen: int16): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_olen(private_olen))

pub inline fun mbedtls-sha3-contextc-wrapper/private_olen(^s: mbedtls-sha3-contextc<s::S>): int
  s.with-ptr(mbedtls-sha3-context-ptr/private_olen).int

pub inline fun mbedtls-sha3-contextcb-wrapper/private_olen(^s: mbedtls-sha3-contextcb<s::S>): int
  s.with-ptr(mbedtls-sha3-context-ptr/private_olen).int

pub inline fun mbedtls-sha3-contextc-wrapper/set-private_olen(^s: mbedtls-sha3-contextc<s::S>, private_olen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_olen(private_olen.int16))

pub inline fun mbedtls-sha3-contextcb-wrapper/set-private_olen(^s: mbedtls-sha3-contextcb<s::S>, private_olen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_olen(private_olen.int16))

inline extern mbedtls-sha3-context-ptr/private_max_block_size(s: intptr_t): int16
  c inline "(int16_t)(((struct mbedtls_sha3_context*)#1)->private_max_block_size)"

pub inline fun mbedtls-sha3-contextc/private_max_block_size(^s: mbedtls-sha3-contextc<s::S>): int16
  s.with-ptr(mbedtls-sha3-context-ptr/private_max_block_size)

pub inline fun mbedtls-sha3-contextcb/private_max_block_size(^s: mbedtls-sha3-contextcb<s::S>): int16
  s.with-ptr(mbedtls-sha3-context-ptr/private_max_block_size)

inline extern mbedtls-sha3-context-ptr/set-private_max_block_size(s: intptr_t, private_max_block_size: int16): ()
  c inline "((struct mbedtls_sha3_context*)#1)->private_max_block_size = (int16_t)#2"

pub inline fun mbedtls-sha3-contextc/set-private_max_block_size(^s: mbedtls-sha3-contextc<s::S>, private_max_block_size: int16): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_max_block_size(private_max_block_size))

pub inline fun mbedtls-sha3-contextcb/set-private_max_block_size(^s: mbedtls-sha3-contextcb<s::S>, private_max_block_size: int16): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_max_block_size(private_max_block_size))

pub inline fun mbedtls-sha3-contextc-wrapper/private_max_block_size(^s: mbedtls-sha3-contextc<s::S>): int
  s.with-ptr(mbedtls-sha3-context-ptr/private_max_block_size).int

pub inline fun mbedtls-sha3-contextcb-wrapper/private_max_block_size(^s: mbedtls-sha3-contextcb<s::S>): int
  s.with-ptr(mbedtls-sha3-context-ptr/private_max_block_size).int

pub inline fun mbedtls-sha3-contextc-wrapper/set-private_max_block_size(^s: mbedtls-sha3-contextc<s::S>, private_max_block_size: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_max_block_size(private_max_block_size.int16))

pub inline fun mbedtls-sha3-contextcb-wrapper/set-private_max_block_size(^s: mbedtls-sha3-contextcb<s::S>, private_max_block_size: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-context-ptr/set-private_max_block_size(private_max_block_size.int16))

pub type psa-driver-cipher-context-t-c
pub alias psa-driver-cipher-context-tc = owned-c<psa-driver-cipher-context-t-c>
pub alias psa-driver-cipher-context-tcb<s::S> = borrowed-c<s,psa-driver-cipher-context-t-c>
pub alias psa-driver-cipher-context-tca = owned-c<c-array<psa-driver-cipher-context-t>>

extern psa-driver-cipher-context-t/size-of(c: c-null<psa-driver-cipher-context-t-c>): int32
  c inline "sizeof(union psa_driver_cipher_context_t)"

pub fun psa-driver-cipher-context-tc(): psa-driver-cipher-context-tc
  malloc(?size-of=psa-driver-cipher-context-t/size-of)

pub fun psa-driver-cipher-context-tc-calloc(): psa-driver-cipher-context-tc
  malloc-c(?size-of=psa-driver-cipher-context-t/size-of)

pub fun psa-driver-cipher-context-tc-array(n: int): psa-driver-cipher-context-tca
  malloc(n.int32, ?size-of=psa-driver-cipher-context-t/size-of)

pub fun psa-driver-cipher-context-tc-array-calloc(n: int): psa-driver-cipher-context-tca
  malloc-c(n.int32, ?size-of=psa-driver-cipher-context-t/size-of)

inline extern psa-driver-cipher-context-t-ptr/dummy(s: intptr_t): int32
  c inline "(unsigned int)(((union psa_driver_cipher_context_t*)#1)->dummy)"

pub inline fun psa-driver-cipher-context-tc/dummy(^s: psa-driver-cipher-context-tc): int32
  s.with-ptr(psa-driver-cipher-context-t-ptr/dummy)

pub inline fun psa-driver-cipher-context-tcb/dummy(^s: psa-driver-cipher-context-tcb<s::S>): int32
  s.with-ptr(psa-driver-cipher-context-t-ptr/dummy)

inline extern psa-driver-cipher-context-t-ptr/set-dummy(s: intptr_t, dummy: int32): ()
  c inline "((union psa_driver_cipher_context_t*)#1)->dummy = (unsigned int)#2"

pub inline fun psa-driver-cipher-context-tc/set-dummy(^s: psa-driver-cipher-context-tc, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-cipher-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-cipher-context-tcb/set-dummy(^s: psa-driver-cipher-context-tcb<s::S>, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-cipher-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-cipher-context-tc-wrapper/dummy(^s: psa-driver-cipher-context-tc): int
  s.with-ptr(psa-driver-cipher-context-t-ptr/dummy).int

pub inline fun psa-driver-cipher-context-tcb-wrapper/dummy(^s: psa-driver-cipher-context-tcb<s::S>): int
  s.with-ptr(psa-driver-cipher-context-t-ptr/dummy).int

pub inline fun psa-driver-cipher-context-tc-wrapper/set-dummy(^s: psa-driver-cipher-context-tc, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-cipher-context-t-ptr/set-dummy(dummy.int32))

pub inline fun psa-driver-cipher-context-tcb-wrapper/set-dummy(^s: psa-driver-cipher-context-tcb<s::S>, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-cipher-context-t-ptr/set-dummy(dummy.int32))

inline extern psa-driver-cipher-context-t-ptr/mbedtls_ctx(s: intptr_t): mbedtls-psa-cipher-operation-t-c
  c inline "(mbedtls_psa_cipher_operation_t)(((union psa_driver_cipher_context_t*)#1)->mbedtls_ctx)"

pub inline fun psa-driver-cipher-context-tc/mbedtls_ctx(^s: psa-driver-cipher-context-tc): mbedtls-psa-cipher-operation-t-c
  s.with-ptr(psa-driver-cipher-context-t-ptr/mbedtls_ctx)

pub inline fun psa-driver-cipher-context-tcb/mbedtls_ctx(^s: psa-driver-cipher-context-tcb<s::S>): mbedtls-psa-cipher-operation-t-c
  s.with-ptr(psa-driver-cipher-context-t-ptr/mbedtls_ctx)

inline extern psa-driver-cipher-context-t-ptr/set-mbedtls_ctx(s: intptr_t, mbedtls_ctx: mbedtls-psa-cipher-operation-t-c): ()
  c inline "((union psa_driver_cipher_context_t*)#1)->mbedtls_ctx = (mbedtls_psa_cipher_operation_t)#2"

pub inline fun psa-driver-cipher-context-tc/set-mbedtls_ctx(^s: psa-driver-cipher-context-tc, mbedtls_ctx: mbedtls-psa-cipher-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-cipher-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub inline fun psa-driver-cipher-context-tcb/set-mbedtls_ctx(^s: psa-driver-cipher-context-tcb<s::S>, mbedtls_ctx: mbedtls-psa-cipher-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-cipher-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub inline fun psa-driver-cipher-context-tc-wrapper/mbedtls_ctx(^s: psa-driver-cipher-context-tc): mbedtls-psa-cipher-operation-t
  s.with-ptr(psa-driver-cipher-context-t-ptr/mbedtls_ctx).to-koka

pub inline fun psa-driver-cipher-context-tcb-wrapper/mbedtls_ctx(^s: psa-driver-cipher-context-tcb<s::S>): mbedtls-psa-cipher-operation-t
  s.with-ptr(psa-driver-cipher-context-t-ptr/mbedtls_ctx).to-koka

pub inline fun psa-driver-cipher-context-tc-wrapper/set-mbedtls_ctx(^s: psa-driver-cipher-context-tc, mbedtls_ctx: mbedtls-psa-cipher-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-cipher-context-t-ptr/set-mbedtls_ctx((struct mbedtls_psa_cipher_operation_t)(mbedtls_ctx)))

pub inline fun psa-driver-cipher-context-tcb-wrapper/set-mbedtls_ctx(^s: psa-driver-cipher-context-tcb<s::S>, mbedtls_ctx: mbedtls-psa-cipher-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-cipher-context-t-ptr/set-mbedtls_ctx((struct mbedtls_psa_cipher_operation_t)(mbedtls_ctx)))

pub struct mbedtls-psa-cipher-operation-t
  private-alg: koka-psa_algorithm_t
  private-iv-length: int
  private-block-length: int
  private-ctx: unnamedunion2

pub type mbedtls-psa-cipher-operation-t-c
pub alias mbedtls-psa-cipher-operation-tc = owned-c<mbedtls-psa-cipher-operation-t-c>
pub alias mbedtls-psa-cipher-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-cipher-operation-t-c>
pub alias mbedtls-psa-cipher-operation-tca = owned-c<c-array<mbedtls-psa-cipher-operation-t>>

extern mbedtls-psa-cipher-operation-t/size-of(c: c-null<mbedtls-psa-cipher-operation-t-c>): int32
  c inline "sizeof(struct mbedtls_psa_cipher_operation_t)"

pub fun mbedtls-psa-cipher-operation-tc(): mbedtls-psa-cipher-operation-tc
  malloc(?size-of=mbedtls-psa-cipher-operation-t/size-of)

pub fun mbedtls-psa-cipher-operation-tc-calloc(): mbedtls-psa-cipher-operation-tc
  malloc-c(?size-of=mbedtls-psa-cipher-operation-t/size-of)

pub fun mbedtls-psa-cipher-operation-tc-array(n: int): mbedtls-psa-cipher-operation-tca
  malloc(n.int32, ?size-of=mbedtls-psa-cipher-operation-t/size-of)

pub fun mbedtls-psa-cipher-operation-tc-array-calloc(n: int): mbedtls-psa-cipher-operation-tca
  malloc-c(n.int32, ?size-of=mbedtls-psa-cipher-operation-t/size-of)

inline extern mbedtls-psa-cipher-operation-t-ptr/private-alg(s: intptr_t): int32
  c inline "(psa_algorithm_t)(((struct mbedtls_psa_cipher_operation_t*)#1)->private_alg)"

pub inline fun mbedtls-psa-cipher-operation-tc/private-alg(^s: mbedtls-psa-cipher-operation-tc): int32
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-alg)

pub inline fun mbedtls-psa-cipher-operation-tcb/private-alg(^s: mbedtls-psa-cipher-operation-tcb<s::S>): int32
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-alg)

inline extern mbedtls-psa-cipher-operation-t-ptr/set-private-alg(s: intptr_t, private-alg: int32): ()
  c inline "((struct mbedtls_psa_cipher_operation_t*)#1)->private_alg = (psa_algorithm_t)#2"

pub inline fun mbedtls-psa-cipher-operation-tc/set-private-alg(^s: mbedtls-psa-cipher-operation-tc, private-alg: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-alg(private-alg))

pub inline fun mbedtls-psa-cipher-operation-tcb/set-private-alg(^s: mbedtls-psa-cipher-operation-tcb<s::S>, private-alg: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-alg(private-alg))

pub inline fun mbedtls-psa-cipher-operation-tc-wrapper/private-alg(^s: mbedtls-psa-cipher-operation-tc): koka-psa_algorithm_t
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-alg).int

pub inline fun mbedtls-psa-cipher-operation-tcb-wrapper/private-alg(^s: mbedtls-psa-cipher-operation-tcb<s::S>): koka-psa_algorithm_t
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-alg).int

pub inline fun mbedtls-psa-cipher-operation-tc-wrapper/set-private-alg(^s: mbedtls-psa-cipher-operation-tc, private-alg: koka-psa_algorithm_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-alg(private-alg.int32))

pub inline fun mbedtls-psa-cipher-operation-tcb-wrapper/set-private-alg(^s: mbedtls-psa-cipher-operation-tcb<s::S>, private-alg: koka-psa_algorithm_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-alg(private-alg.int32))

inline extern mbedtls-psa-cipher-operation-t-ptr/private-iv-length(s: intptr_t): int8
  c inline "(uint8_t)(((struct mbedtls_psa_cipher_operation_t*)#1)->private_iv_length)"

pub inline fun mbedtls-psa-cipher-operation-tc/private-iv-length(^s: mbedtls-psa-cipher-operation-tc): int8
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-iv-length)

pub inline fun mbedtls-psa-cipher-operation-tcb/private-iv-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>): int8
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-iv-length)

inline extern mbedtls-psa-cipher-operation-t-ptr/set-private-iv-length(s: intptr_t, private-iv-length: int8): ()
  c inline "((struct mbedtls_psa_cipher_operation_t*)#1)->private_iv_length = (uint8_t)#2"

pub inline fun mbedtls-psa-cipher-operation-tc/set-private-iv-length(^s: mbedtls-psa-cipher-operation-tc, private-iv-length: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-iv-length(private-iv-length))

pub inline fun mbedtls-psa-cipher-operation-tcb/set-private-iv-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>, private-iv-length: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-iv-length(private-iv-length))

pub inline fun mbedtls-psa-cipher-operation-tc-wrapper/private-iv-length(^s: mbedtls-psa-cipher-operation-tc): int
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-iv-length).int

pub inline fun mbedtls-psa-cipher-operation-tcb-wrapper/private-iv-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>): int
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-iv-length).int

pub inline fun mbedtls-psa-cipher-operation-tc-wrapper/set-private-iv-length(^s: mbedtls-psa-cipher-operation-tc, private-iv-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-iv-length(private-iv-length.int8))

pub inline fun mbedtls-psa-cipher-operation-tcb-wrapper/set-private-iv-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>, private-iv-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-iv-length(private-iv-length.int8))

inline extern mbedtls-psa-cipher-operation-t-ptr/private-block-length(s: intptr_t): int8
  c inline "(uint8_t)(((struct mbedtls_psa_cipher_operation_t*)#1)->private_block_length)"

pub inline fun mbedtls-psa-cipher-operation-tc/private-block-length(^s: mbedtls-psa-cipher-operation-tc): int8
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-block-length)

pub inline fun mbedtls-psa-cipher-operation-tcb/private-block-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>): int8
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-block-length)

inline extern mbedtls-psa-cipher-operation-t-ptr/set-private-block-length(s: intptr_t, private-block-length: int8): ()
  c inline "((struct mbedtls_psa_cipher_operation_t*)#1)->private_block_length = (uint8_t)#2"

pub inline fun mbedtls-psa-cipher-operation-tc/set-private-block-length(^s: mbedtls-psa-cipher-operation-tc, private-block-length: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-block-length(private-block-length))

pub inline fun mbedtls-psa-cipher-operation-tcb/set-private-block-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>, private-block-length: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-block-length(private-block-length))

pub inline fun mbedtls-psa-cipher-operation-tc-wrapper/private-block-length(^s: mbedtls-psa-cipher-operation-tc): int
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-block-length).int

pub inline fun mbedtls-psa-cipher-operation-tcb-wrapper/private-block-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>): int
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-block-length).int

pub inline fun mbedtls-psa-cipher-operation-tc-wrapper/set-private-block-length(^s: mbedtls-psa-cipher-operation-tc, private-block-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-block-length(private-block-length.int8))

pub inline fun mbedtls-psa-cipher-operation-tcb-wrapper/set-private-block-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>, private-block-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-block-length(private-block-length.int8))

inline extern mbedtls-psa-cipher-operation-t-ptr/private-ctx(s: intptr_t): unnamedunion2-c
  c inline "(UnnamedUnion2)(((struct mbedtls_psa_cipher_operation_t*)#1)->private_ctx)"

pub inline fun mbedtls-psa-cipher-operation-tc/private-ctx(^s: mbedtls-psa-cipher-operation-tc): unnamedunion2-c
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-ctx)

pub inline fun mbedtls-psa-cipher-operation-tcb/private-ctx(^s: mbedtls-psa-cipher-operation-tcb<s::S>): unnamedunion2-c
  s.with-ptr(mbedtls-psa-cipher-operation-t-ptr/private-ctx)

inline extern mbedtls-psa-cipher-operation-t-ptr/set-private-ctx(s: intptr_t, private-ctx: unnamedunion2-c): ()
  c inline "((struct mbedtls_psa_cipher_operation_t*)#1)->private_ctx = (UnnamedUnion2)#2"

pub inline fun mbedtls-psa-cipher-operation-tc/set-private-ctx(^s: mbedtls-psa-cipher-operation-tc, private-ctx: unnamedunion2-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-ctx(private-ctx))

pub inline fun mbedtls-psa-cipher-operation-tcb/set-private-ctx(^s: mbedtls-psa-cipher-operation-tcb<s::S>, private-ctx: unnamedunion2-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-t-ptr/set-private-ctx(private-ctx))

pub fun mbedtls-psa-cipher-operation-t/to-koka(s: mbedtls-psa-cipher-operation-tc): mbedtls-psa-cipher-operation-t
  Mbedtls-psa-cipher-operation-t(s.mbedtls-psa-cipher-operation-tc/private-alg.int, s.mbedtls-psa-cipher-operation-tc/private-iv-length.int, s.mbedtls-psa-cipher-operation-tc/private-block-length.int, s.mbedtls-psa-cipher-operation-tc/private-ctx)

pub type unnamedunion2-c
pub alias unnamedunion2c = owned-c<unnamedunion2-c>
pub alias unnamedunion2cb<s::S> = borrowed-c<s,unnamedunion2-c>
pub alias unnamedunion2ca = owned-c<c-array<unnamedunion2>>

extern unnamedunion2/size-of(c: c-null<unnamedunion2-c>): int32
  c inline "sizeof(union UnnamedUnion2)"

pub fun unnamedunion2c(): unnamedunion2c
  malloc(?size-of=unnamedunion2/size-of)

pub fun unnamedunion2c-calloc(): unnamedunion2c
  malloc-c(?size-of=unnamedunion2/size-of)

pub fun unnamedunion2c-array(n: int): unnamedunion2ca
  malloc(n.int32, ?size-of=unnamedunion2/size-of)

pub fun unnamedunion2c-array-calloc(n: int): unnamedunion2ca
  malloc-c(n.int32, ?size-of=unnamedunion2/size-of)

inline extern unnamedunion2-ptr/private_dummy(s: intptr_t): int32
  c inline "(unsigned int)(((union UnnamedUnion2*)#1)->private_dummy)"

pub inline fun unnamedunion2c/private_dummy(^s: unnamedunion2c): int32
  s.with-ptr(unnamedunion2-ptr/private_dummy)

pub inline fun unnamedunion2cb/private_dummy(^s: unnamedunion2cb<s::S>): int32
  s.with-ptr(unnamedunion2-ptr/private_dummy)

inline extern unnamedunion2-ptr/set-private_dummy(s: intptr_t, private_dummy: int32): ()
  c inline "((union UnnamedUnion2*)#1)->private_dummy = (unsigned int)#2"

pub inline fun unnamedunion2c/set-private_dummy(^s: unnamedunion2c, private_dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion2-ptr/set-private_dummy(private_dummy))

pub inline fun unnamedunion2cb/set-private_dummy(^s: unnamedunion2cb<s::S>, private_dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion2-ptr/set-private_dummy(private_dummy))

pub inline fun unnamedunion2c-wrapper/private_dummy(^s: unnamedunion2c): int
  s.with-ptr(unnamedunion2-ptr/private_dummy).int

pub inline fun unnamedunion2cb-wrapper/private_dummy(^s: unnamedunion2cb<s::S>): int
  s.with-ptr(unnamedunion2-ptr/private_dummy).int

pub inline fun unnamedunion2c-wrapper/set-private_dummy(^s: unnamedunion2c, private_dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion2-ptr/set-private_dummy(private_dummy.int32))

pub inline fun unnamedunion2cb-wrapper/set-private_dummy(^s: unnamedunion2cb<s::S>, private_dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion2-ptr/set-private_dummy(private_dummy.int32))

inline extern unnamedunion2-ptr/private_cipher(s: intptr_t): mbedtls-cipher-context-t-c
  c inline "(mbedtls_cipher_context_t)(((union UnnamedUnion2*)#1)->private_cipher)"

pub inline fun unnamedunion2c/private_cipher(^s: unnamedunion2c): mbedtls-cipher-context-t-c
  s.with-ptr(unnamedunion2-ptr/private_cipher)

pub inline fun unnamedunion2cb/private_cipher(^s: unnamedunion2cb<s::S>): mbedtls-cipher-context-t-c
  s.with-ptr(unnamedunion2-ptr/private_cipher)

inline extern unnamedunion2-ptr/set-private_cipher(s: intptr_t, private_cipher: mbedtls-cipher-context-t-c): ()
  c inline "((union UnnamedUnion2*)#1)->private_cipher = (mbedtls_cipher_context_t)#2"

pub inline fun unnamedunion2c/set-private_cipher(^s: unnamedunion2c, private_cipher: mbedtls-cipher-context-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion2-ptr/set-private_cipher(private_cipher))

pub inline fun unnamedunion2cb/set-private_cipher(^s: unnamedunion2cb<s::S>, private_cipher: mbedtls-cipher-context-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion2-ptr/set-private_cipher(private_cipher))

// Generic cipher context.
pub type mbedtls-cipher-context-t-c
pub alias mbedtls-cipher-context-tc<s::S> = owned-c<mbedtls-cipher-context-t-c>
pub alias mbedtls-cipher-context-tcb<s::S> = borrowed-c<s,mbedtls-cipher-context-t-c>
pub alias mbedtls-cipher-context-tca<s::S> = owned-c<c-array<mbedtls-cipher-context-t>>

extern mbedtls-cipher-context-t/size-of(c: c-null<mbedtls-cipher-context-t-c>): int32
  c inline "sizeof(struct mbedtls_cipher_context_t)"

pub fun mbedtls-cipher-context-tc(): mbedtls-cipher-context-tc<s::S>
  malloc(?size-of=mbedtls-cipher-context-t/size-of)

pub fun mbedtls-cipher-context-tc-calloc(): mbedtls-cipher-context-tc<s::S>
  malloc-c(?size-of=mbedtls-cipher-context-t/size-of)

pub fun mbedtls-cipher-context-tc-array(n: int): mbedtls-cipher-context-tca<s::S>
  malloc(n.int32, ?size-of=mbedtls-cipher-context-t/size-of)

pub fun mbedtls-cipher-context-tc-array-calloc(n: int): mbedtls-cipher-context-tca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-cipher-context-t/size-of)

inline extern mbedtls-cipher-context-t-ptr/private_cipher_info(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_cipher_info)"

pub inline fun mbedtls-cipher-context-tc/private_cipher_info(^s: mbedtls-cipher-context-tc<s::S>): intptr_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cipher_info)

pub inline fun mbedtls-cipher-context-tcb/private_cipher_info(^s: mbedtls-cipher-context-tcb<s::S>): intptr_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cipher_info)

inline extern mbedtls-cipher-context-t-ptr/set-private_cipher_info(s: intptr_t, private_cipher_info: intptr_t): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_cipher_info = (struct mbedtls_cipher_info_t*)#2"

pub inline fun mbedtls-cipher-context-tc/set-private_cipher_info(^s: mbedtls-cipher-context-tc<s::S>, private_cipher_info: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cipher_info(private_cipher_info))

pub inline fun mbedtls-cipher-context-tcb/set-private_cipher_info(^s: mbedtls-cipher-context-tcb<s::S>, private_cipher_info: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cipher_info(private_cipher_info))

pub inline fun mbedtls-cipher-context-tc-wrapper/private_cipher_info(^s: mbedtls-cipher-context-tc<s::S>): owned-c<mbedtls-cipher-info-t-c>
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cipher_info).c-own

pub inline fun mbedtls-cipher-context-tcb-wrapper/private_cipher_info(^s: mbedtls-cipher-context-tcb<s::S>): owned-c<mbedtls-cipher-info-t-c>
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cipher_info).c-own

pub inline fun mbedtls-cipher-context-tc-wrapper/set-private_cipher_info(^s: mbedtls-cipher-context-tc<s::S>, private_cipher_info: owned-c<mbedtls-cipher-info-t-c>): ()
  with koka-ptr <- private_cipher_info.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cipher_info(koka-ptr))

pub inline fun mbedtls-cipher-context-tcb-wrapper/set-private_cipher_info(^s: mbedtls-cipher-context-tcb<s::S>, private_cipher_info: owned-c<mbedtls-cipher-info-t-c>): ()
  with koka-ptr <- private_cipher_info.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cipher_info(koka-ptr))

inline extern mbedtls-cipher-context-t-ptr/private_key_bitlen(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_cipher_context_t*)#1)->private_key_bitlen)"

pub inline fun mbedtls-cipher-context-tc/private_key_bitlen(^s: mbedtls-cipher-context-tc<s::S>): int32
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_key_bitlen)

pub inline fun mbedtls-cipher-context-tcb/private_key_bitlen(^s: mbedtls-cipher-context-tcb<s::S>): int32
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_key_bitlen)

inline extern mbedtls-cipher-context-t-ptr/set-private_key_bitlen(s: intptr_t, private_key_bitlen: int32): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_key_bitlen = (int)#2"

pub inline fun mbedtls-cipher-context-tc/set-private_key_bitlen(^s: mbedtls-cipher-context-tc<s::S>, private_key_bitlen: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_key_bitlen(private_key_bitlen))

pub inline fun mbedtls-cipher-context-tcb/set-private_key_bitlen(^s: mbedtls-cipher-context-tcb<s::S>, private_key_bitlen: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_key_bitlen(private_key_bitlen))

pub inline fun mbedtls-cipher-context-tc-wrapper/private_key_bitlen(^s: mbedtls-cipher-context-tc<s::S>): int
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_key_bitlen).int

pub inline fun mbedtls-cipher-context-tcb-wrapper/private_key_bitlen(^s: mbedtls-cipher-context-tcb<s::S>): int
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_key_bitlen).int

pub inline fun mbedtls-cipher-context-tc-wrapper/set-private_key_bitlen(^s: mbedtls-cipher-context-tc<s::S>, private_key_bitlen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_key_bitlen(private_key_bitlen.int32))

pub inline fun mbedtls-cipher-context-tcb-wrapper/set-private_key_bitlen(^s: mbedtls-cipher-context-tcb<s::S>, private_key_bitlen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_key_bitlen(private_key_bitlen.int32))

inline extern mbedtls-cipher-context-t-ptr/private_operation(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_cipher_context_t*)#1)->private_operation)"

pub inline fun mbedtls-cipher-context-tc/private_operation(^s: mbedtls-cipher-context-tc<s::S>): int32
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_operation)

pub inline fun mbedtls-cipher-context-tcb/private_operation(^s: mbedtls-cipher-context-tcb<s::S>): int32
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_operation)

inline extern mbedtls-cipher-context-t-ptr/set-private_operation(s: intptr_t, private_operation: int32): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_operation = (int32_t)#2"

pub inline fun mbedtls-cipher-context-tc/set-private_operation(^s: mbedtls-cipher-context-tc<s::S>, private_operation: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_operation(private_operation))

pub inline fun mbedtls-cipher-context-tcb/set-private_operation(^s: mbedtls-cipher-context-tcb<s::S>, private_operation: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_operation(private_operation))

inline extern mbedtls-cipher-context-t-ptr/private_add_padding(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_add_padding)"

pub inline fun mbedtls-cipher-context-tc/private_add_padding(^s: mbedtls-cipher-context-tc<s::S>): intptr_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_add_padding)

pub inline fun mbedtls-cipher-context-tcb/private_add_padding(^s: mbedtls-cipher-context-tcb<s::S>): intptr_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_add_padding)

inline extern mbedtls-cipher-context-t-ptr/set-private_add_padding(s: intptr_t, private_add_padding: intptr_t): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_add_padding = (((output : unsigned char*, olen : ssize_t, data_len : ssize_t) -> kk_unit_t)*)#2"

pub inline fun mbedtls-cipher-context-tc/set-private_add_padding(^s: mbedtls-cipher-context-tc<s::S>, private_add_padding: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_add_padding(private_add_padding))

pub inline fun mbedtls-cipher-context-tcb/set-private_add_padding(^s: mbedtls-cipher-context-tcb<s::S>, private_add_padding: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_add_padding(private_add_padding))

pub inline fun mbedtls-cipher-context-tc-wrapper/private_add_padding(^s: mbedtls-cipher-context-tc<s::S>): owned-c<((output : intptr_t, olen : ssize_t, data_len : ssize_t) -> ())>
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_add_padding).c-own

pub inline fun mbedtls-cipher-context-tcb-wrapper/private_add_padding(^s: mbedtls-cipher-context-tcb<s::S>): owned-c<((output : intptr_t, olen : ssize_t, data_len : ssize_t) -> ())>
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_add_padding).c-own

pub inline fun mbedtls-cipher-context-tc-wrapper/set-private_add_padding(^s: mbedtls-cipher-context-tc<s::S>, private_add_padding: owned-c<((output : intptr_t, olen : ssize_t, data_len : ssize_t) -> ())>): ()
  with koka-ptr <- private_add_padding.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_add_padding(koka-ptr))

pub inline fun mbedtls-cipher-context-tcb-wrapper/set-private_add_padding(^s: mbedtls-cipher-context-tcb<s::S>, private_add_padding: owned-c<((output : intptr_t, olen : ssize_t, data_len : ssize_t) -> ())>): ()
  with koka-ptr <- private_add_padding.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_add_padding(koka-ptr))

inline extern mbedtls-cipher-context-t-ptr/private_get_padding(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_get_padding)"

pub inline fun mbedtls-cipher-context-tc/private_get_padding(^s: mbedtls-cipher-context-tc<s::S>): intptr_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_get_padding)

pub inline fun mbedtls-cipher-context-tcb/private_get_padding(^s: mbedtls-cipher-context-tcb<s::S>): intptr_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_get_padding)

inline extern mbedtls-cipher-context-t-ptr/set-private_get_padding(s: intptr_t, private_get_padding: intptr_t): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_get_padding = (((input : unsigned char*, ilen : ssize_t, data_len : ssize_t*) -> int)*)#2"

pub inline fun mbedtls-cipher-context-tc/set-private_get_padding(^s: mbedtls-cipher-context-tc<s::S>, private_get_padding: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_get_padding(private_get_padding))

pub inline fun mbedtls-cipher-context-tcb/set-private_get_padding(^s: mbedtls-cipher-context-tcb<s::S>, private_get_padding: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_get_padding(private_get_padding))

pub inline fun mbedtls-cipher-context-tc-wrapper/private_get_padding(^s: mbedtls-cipher-context-tc<s::S>): owned-c<((input : intptr_t, ilen : ssize_t, data_len : intptr_t) -> int32)>
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_get_padding).c-own

pub inline fun mbedtls-cipher-context-tcb-wrapper/private_get_padding(^s: mbedtls-cipher-context-tcb<s::S>): owned-c<((input : intptr_t, ilen : ssize_t, data_len : intptr_t) -> int32)>
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_get_padding).c-own

pub inline fun mbedtls-cipher-context-tc-wrapper/set-private_get_padding(^s: mbedtls-cipher-context-tc<s::S>, private_get_padding: owned-c<((input : intptr_t, ilen : ssize_t, data_len : intptr_t) -> int32)>): ()
  with koka-ptr <- private_get_padding.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_get_padding(koka-ptr))

pub inline fun mbedtls-cipher-context-tcb-wrapper/set-private_get_padding(^s: mbedtls-cipher-context-tcb<s::S>, private_get_padding: owned-c<((input : intptr_t, ilen : ssize_t, data_len : intptr_t) -> int32)>): ()
  with koka-ptr <- private_get_padding.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_get_padding(koka-ptr))

inline extern mbedtls-cipher-context-t-ptr/private_unprocessed_len(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_cipher_context_t*)#1)->private_unprocessed_len)"

pub inline fun mbedtls-cipher-context-tc/private_unprocessed_len(^s: mbedtls-cipher-context-tc<s::S>): ssize_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_unprocessed_len)

pub inline fun mbedtls-cipher-context-tcb/private_unprocessed_len(^s: mbedtls-cipher-context-tcb<s::S>): ssize_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_unprocessed_len)

inline extern mbedtls-cipher-context-t-ptr/set-private_unprocessed_len(s: intptr_t, private_unprocessed_len: ssize_t): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_unprocessed_len = (ssize_t)#2"

pub inline fun mbedtls-cipher-context-tc/set-private_unprocessed_len(^s: mbedtls-cipher-context-tc<s::S>, private_unprocessed_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_unprocessed_len(private_unprocessed_len))

pub inline fun mbedtls-cipher-context-tcb/set-private_unprocessed_len(^s: mbedtls-cipher-context-tcb<s::S>, private_unprocessed_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_unprocessed_len(private_unprocessed_len))

inline extern mbedtls-cipher-context-t-ptr/private_iv_size(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_cipher_context_t*)#1)->private_iv_size)"

pub inline fun mbedtls-cipher-context-tc/private_iv_size(^s: mbedtls-cipher-context-tc<s::S>): ssize_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_iv_size)

pub inline fun mbedtls-cipher-context-tcb/private_iv_size(^s: mbedtls-cipher-context-tcb<s::S>): ssize_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_iv_size)

inline extern mbedtls-cipher-context-t-ptr/set-private_iv_size(s: intptr_t, private_iv_size: ssize_t): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_iv_size = (ssize_t)#2"

pub inline fun mbedtls-cipher-context-tc/set-private_iv_size(^s: mbedtls-cipher-context-tc<s::S>, private_iv_size: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_iv_size(private_iv_size))

pub inline fun mbedtls-cipher-context-tcb/set-private_iv_size(^s: mbedtls-cipher-context-tcb<s::S>, private_iv_size: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_iv_size(private_iv_size))

inline extern mbedtls-cipher-context-t-ptr/private_cipher_ctx(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_cipher_ctx)"

pub inline fun mbedtls-cipher-context-tc/private_cipher_ctx(^s: mbedtls-cipher-context-tc<s::S>): intptr_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cipher_ctx)

pub inline fun mbedtls-cipher-context-tcb/private_cipher_ctx(^s: mbedtls-cipher-context-tcb<s::S>): intptr_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cipher_ctx)

inline extern mbedtls-cipher-context-t-ptr/set-private_cipher_ctx(s: intptr_t, private_cipher_ctx: intptr_t): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_cipher_ctx = (kk_unit_t*)#2"

pub inline fun mbedtls-cipher-context-tc/set-private_cipher_ctx(^s: mbedtls-cipher-context-tc<s::S>, private_cipher_ctx: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cipher_ctx(private_cipher_ctx))

pub inline fun mbedtls-cipher-context-tcb/set-private_cipher_ctx(^s: mbedtls-cipher-context-tcb<s::S>, private_cipher_ctx: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cipher_ctx(private_cipher_ctx))

pub inline fun mbedtls-cipher-context-tc-wrapper/private_cipher_ctx(^s: mbedtls-cipher-context-tc<s::S>): owned-c<()>
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cipher_ctx).c-own

pub inline fun mbedtls-cipher-context-tcb-wrapper/private_cipher_ctx(^s: mbedtls-cipher-context-tcb<s::S>): owned-c<()>
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cipher_ctx).c-own

pub inline fun mbedtls-cipher-context-tc-wrapper/set-private_cipher_ctx(^s: mbedtls-cipher-context-tc<s::S>, private_cipher_ctx: owned-c<()>): ()
  with koka-ptr <- private_cipher_ctx.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cipher_ctx(koka-ptr))

pub inline fun mbedtls-cipher-context-tcb-wrapper/set-private_cipher_ctx(^s: mbedtls-cipher-context-tcb<s::S>, private_cipher_ctx: owned-c<()>): ()
  with koka-ptr <- private_cipher_ctx.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cipher_ctx(koka-ptr))

inline extern mbedtls-cipher-context-t-ptr/private_cmac_ctx(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_cmac_ctx)"

pub inline fun mbedtls-cipher-context-tc/private_cmac_ctx(^s: mbedtls-cipher-context-tc<s::S>): intptr_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cmac_ctx)

pub inline fun mbedtls-cipher-context-tcb/private_cmac_ctx(^s: mbedtls-cipher-context-tcb<s::S>): intptr_t
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cmac_ctx)

inline extern mbedtls-cipher-context-t-ptr/set-private_cmac_ctx(s: intptr_t, private_cmac_ctx: intptr_t): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_cmac_ctx = (struct mbedtls_cmac_context_t*)#2"

pub inline fun mbedtls-cipher-context-tc/set-private_cmac_ctx(^s: mbedtls-cipher-context-tc<s::S>, private_cmac_ctx: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cmac_ctx(private_cmac_ctx))

pub inline fun mbedtls-cipher-context-tcb/set-private_cmac_ctx(^s: mbedtls-cipher-context-tcb<s::S>, private_cmac_ctx: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cmac_ctx(private_cmac_ctx))

pub inline fun mbedtls-cipher-context-tc-wrapper/private_cmac_ctx(^s: mbedtls-cipher-context-tc<s::S>): owned-c<mbedtls-cmac-context-t-c>
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cmac_ctx).c-own

pub inline fun mbedtls-cipher-context-tcb-wrapper/private_cmac_ctx(^s: mbedtls-cipher-context-tcb<s::S>): owned-c<mbedtls-cmac-context-t-c>
  s.with-ptr(mbedtls-cipher-context-t-ptr/private_cmac_ctx).c-own

pub inline fun mbedtls-cipher-context-tc-wrapper/set-private_cmac_ctx(^s: mbedtls-cipher-context-tc<s::S>, private_cmac_ctx: owned-c<mbedtls-cmac-context-t-c>): ()
  with koka-ptr <- private_cmac_ctx.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cmac_ctx(koka-ptr))

pub inline fun mbedtls-cipher-context-tcb-wrapper/set-private_cmac_ctx(^s: mbedtls-cipher-context-tcb<s::S>, private_cmac_ctx: owned-c<mbedtls-cmac-context-t-c>): ()
  with koka-ptr <- private_cmac_ctx.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-t-ptr/set-private_cmac_ctx(koka-ptr))

// Cipher information. Allows calling cipher functions
// in a generic way.
// 
// \note        The library does not support custom cipher info structures,
// only built-in structures returned by the functions
// mbedtls_cipher_info_from_string(),
// mbedtls_cipher_info_from_type(),
// mbedtls_cipher_info_from_values(),
// mbedtls_cipher_info_from_psa().
// 
// \note        Some fields store a value that has been right-shifted to save
// code-size, so should not be used directly. The accessor
// functions adjust for this and return the "natural" value.
pub struct mbedtls-cipher-info-t
pub type mbedtls-cipher-info-t-c
pub alias mbedtls-cipher-info-tc = owned-c<mbedtls-cipher-info-t-c>
pub alias mbedtls-cipher-info-tcb<s::S> = borrowed-c<s,mbedtls-cipher-info-t-c>
pub alias mbedtls-cipher-info-tca = owned-c<c-array<mbedtls-cipher-info-t>>

pub fun mbedtls-cipher-info-t/to-koka(s: mbedtls-cipher-info-tc): mbedtls-cipher-info-t
  Mbedtls-cipher-info-t()

// The CMAC context structure.
pub type mbedtls-cmac-context-t-c
pub alias mbedtls-cmac-context-tc<s::S> = owned-c<mbedtls-cmac-context-t-c>
pub alias mbedtls-cmac-context-tcb<s::S> = borrowed-c<s,mbedtls-cmac-context-t-c>
pub alias mbedtls-cmac-context-tca<s::S> = owned-c<c-array<mbedtls-cmac-context-t>>

extern mbedtls-cmac-context-t/size-of(c: c-null<mbedtls-cmac-context-t-c>): int32
  c inline "sizeof(struct mbedtls_cmac_context_t)"

pub fun mbedtls-cmac-context-tc(): mbedtls-cmac-context-tc<s::S>
  malloc(?size-of=mbedtls-cmac-context-t/size-of)

pub fun mbedtls-cmac-context-tc-calloc(): mbedtls-cmac-context-tc<s::S>
  malloc-c(?size-of=mbedtls-cmac-context-t/size-of)

pub fun mbedtls-cmac-context-tc-array(n: int): mbedtls-cmac-context-tca<s::S>
  malloc(n.int32, ?size-of=mbedtls-cmac-context-t/size-of)

pub fun mbedtls-cmac-context-tc-array-calloc(n: int): mbedtls-cmac-context-tca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-cmac-context-t/size-of)

inline extern mbedtls-cmac-context-t-ptr/private_unprocessed_len(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_cmac_context_t*)#1)->private_unprocessed_len)"

pub inline fun mbedtls-cmac-context-tc/private_unprocessed_len(^s: mbedtls-cmac-context-tc<s::S>): ssize_t
  s.with-ptr(mbedtls-cmac-context-t-ptr/private_unprocessed_len)

pub inline fun mbedtls-cmac-context-tcb/private_unprocessed_len(^s: mbedtls-cmac-context-tcb<s::S>): ssize_t
  s.with-ptr(mbedtls-cmac-context-t-ptr/private_unprocessed_len)

inline extern mbedtls-cmac-context-t-ptr/set-private_unprocessed_len(s: intptr_t, private_unprocessed_len: ssize_t): ()
  c inline "((struct mbedtls_cmac_context_t*)#1)->private_unprocessed_len = (ssize_t)#2"

pub inline fun mbedtls-cmac-context-tc/set-private_unprocessed_len(^s: mbedtls-cmac-context-tc<s::S>, private_unprocessed_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cmac-context-t-ptr/set-private_unprocessed_len(private_unprocessed_len))

pub inline fun mbedtls-cmac-context-tcb/set-private_unprocessed_len(^s: mbedtls-cmac-context-tcb<s::S>, private_unprocessed_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cmac-context-t-ptr/set-private_unprocessed_len(private_unprocessed_len))

type mbedtls_chachapoly_mode_t
  // < The mode value for performing encryption.
  MBEDTLS_CHACHAPOLY_ENCRYPT
  // < The mode value for performing decryption.
  MBEDTLS_CHACHAPOLY_DECRYPT

pub fun mbedtls_chachapoly_mode_t/int(i: mbedtls_chachapoly_mode_t): int
  match i
    MBEDTLS_CHACHAPOLY_ENCRYPT -> 0
    MBEDTLS_CHACHAPOLY_DECRYPT -> 1

pub fun int/mbedtls_chachapoly_mode_t(i: int): exn mbedtls_chachapoly_mode_t
  match i
    0 -> MBEDTLS_CHACHAPOLY_ENCRYPT
    1 -> MBEDTLS_CHACHAPOLY_DECRYPT

// Roles in the EC J-PAKE exchange
type mbedtls_ecjpake_role
  // < Client
  MBEDTLS_ECJPAKE_CLIENT
  // < Server
  MBEDTLS_ECJPAKE_SERVER
  // < Undefined
  MBEDTLS_ECJPAKE_NONE

pub fun mbedtls_ecjpake_role/int(i: mbedtls_ecjpake_role): int
  match i
    MBEDTLS_ECJPAKE_CLIENT -> 0
    MBEDTLS_ECJPAKE_SERVER -> 1
    MBEDTLS_ECJPAKE_NONE -> 2

pub fun int/mbedtls_ecjpake_role(i: int): exn mbedtls_ecjpake_role
  match i
    0 -> MBEDTLS_ECJPAKE_CLIENT
    1 -> MBEDTLS_ECJPAKE_SERVER
    2 -> MBEDTLS_ECJPAKE_NONE

pub type psa-driver-mac-context-t-c
pub alias psa-driver-mac-context-tc = owned-c<psa-driver-mac-context-t-c>
pub alias psa-driver-mac-context-tcb<s::S> = borrowed-c<s,psa-driver-mac-context-t-c>
pub alias psa-driver-mac-context-tca = owned-c<c-array<psa-driver-mac-context-t>>

extern psa-driver-mac-context-t/size-of(c: c-null<psa-driver-mac-context-t-c>): int32
  c inline "sizeof(union psa_driver_mac_context_t)"

pub fun psa-driver-mac-context-tc(): psa-driver-mac-context-tc
  malloc(?size-of=psa-driver-mac-context-t/size-of)

pub fun psa-driver-mac-context-tc-calloc(): psa-driver-mac-context-tc
  malloc-c(?size-of=psa-driver-mac-context-t/size-of)

pub fun psa-driver-mac-context-tc-array(n: int): psa-driver-mac-context-tca
  malloc(n.int32, ?size-of=psa-driver-mac-context-t/size-of)

pub fun psa-driver-mac-context-tc-array-calloc(n: int): psa-driver-mac-context-tca
  malloc-c(n.int32, ?size-of=psa-driver-mac-context-t/size-of)

inline extern psa-driver-mac-context-t-ptr/dummy(s: intptr_t): int32
  c inline "(unsigned int)(((union psa_driver_mac_context_t*)#1)->dummy)"

pub inline fun psa-driver-mac-context-tc/dummy(^s: psa-driver-mac-context-tc): int32
  s.with-ptr(psa-driver-mac-context-t-ptr/dummy)

pub inline fun psa-driver-mac-context-tcb/dummy(^s: psa-driver-mac-context-tcb<s::S>): int32
  s.with-ptr(psa-driver-mac-context-t-ptr/dummy)

inline extern psa-driver-mac-context-t-ptr/set-dummy(s: intptr_t, dummy: int32): ()
  c inline "((union psa_driver_mac_context_t*)#1)->dummy = (unsigned int)#2"

pub inline fun psa-driver-mac-context-tc/set-dummy(^s: psa-driver-mac-context-tc, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-mac-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-mac-context-tcb/set-dummy(^s: psa-driver-mac-context-tcb<s::S>, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-mac-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-mac-context-tc-wrapper/dummy(^s: psa-driver-mac-context-tc): int
  s.with-ptr(psa-driver-mac-context-t-ptr/dummy).int

pub inline fun psa-driver-mac-context-tcb-wrapper/dummy(^s: psa-driver-mac-context-tcb<s::S>): int
  s.with-ptr(psa-driver-mac-context-t-ptr/dummy).int

pub inline fun psa-driver-mac-context-tc-wrapper/set-dummy(^s: psa-driver-mac-context-tc, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-mac-context-t-ptr/set-dummy(dummy.int32))

pub inline fun psa-driver-mac-context-tcb-wrapper/set-dummy(^s: psa-driver-mac-context-tcb<s::S>, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-mac-context-t-ptr/set-dummy(dummy.int32))

inline extern psa-driver-mac-context-t-ptr/mbedtls_ctx(s: intptr_t): mbedtls-psa-mac-operation-t-c
  c inline "(mbedtls_psa_mac_operation_t)(((union psa_driver_mac_context_t*)#1)->mbedtls_ctx)"

pub inline fun psa-driver-mac-context-tc/mbedtls_ctx(^s: psa-driver-mac-context-tc): mbedtls-psa-mac-operation-t-c
  s.with-ptr(psa-driver-mac-context-t-ptr/mbedtls_ctx)

pub inline fun psa-driver-mac-context-tcb/mbedtls_ctx(^s: psa-driver-mac-context-tcb<s::S>): mbedtls-psa-mac-operation-t-c
  s.with-ptr(psa-driver-mac-context-t-ptr/mbedtls_ctx)

inline extern psa-driver-mac-context-t-ptr/set-mbedtls_ctx(s: intptr_t, mbedtls_ctx: mbedtls-psa-mac-operation-t-c): ()
  c inline "((union psa_driver_mac_context_t*)#1)->mbedtls_ctx = (mbedtls_psa_mac_operation_t)#2"

pub inline fun psa-driver-mac-context-tc/set-mbedtls_ctx(^s: psa-driver-mac-context-tc, mbedtls_ctx: mbedtls-psa-mac-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-mac-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub inline fun psa-driver-mac-context-tcb/set-mbedtls_ctx(^s: psa-driver-mac-context-tcb<s::S>, mbedtls_ctx: mbedtls-psa-mac-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-mac-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub inline fun psa-driver-mac-context-tc-wrapper/mbedtls_ctx(^s: psa-driver-mac-context-tc): mbedtls-psa-mac-operation-t
  s.with-ptr(psa-driver-mac-context-t-ptr/mbedtls_ctx).to-koka

pub inline fun psa-driver-mac-context-tcb-wrapper/mbedtls_ctx(^s: psa-driver-mac-context-tcb<s::S>): mbedtls-psa-mac-operation-t
  s.with-ptr(psa-driver-mac-context-t-ptr/mbedtls_ctx).to-koka

pub inline fun psa-driver-mac-context-tc-wrapper/set-mbedtls_ctx(^s: psa-driver-mac-context-tc, mbedtls_ctx: mbedtls-psa-mac-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-mac-context-t-ptr/set-mbedtls_ctx((struct mbedtls_psa_mac_operation_t)(mbedtls_ctx)))

pub inline fun psa-driver-mac-context-tcb-wrapper/set-mbedtls_ctx(^s: psa-driver-mac-context-tcb<s::S>, mbedtls_ctx: mbedtls-psa-mac-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-mac-context-t-ptr/set-mbedtls_ctx((struct mbedtls_psa_mac_operation_t)(mbedtls_ctx)))

pub value struct mbedtls-psa-mac-operation-t
  private-alg: koka-psa_algorithm_t
  private-ctx: unnamedunion3

pub type mbedtls-psa-mac-operation-t-c
pub alias mbedtls-psa-mac-operation-tc = owned-c<mbedtls-psa-mac-operation-t-c>
pub alias mbedtls-psa-mac-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-mac-operation-t-c>
pub alias mbedtls-psa-mac-operation-tca = owned-c<c-array<mbedtls-psa-mac-operation-t>>

extern mbedtls-psa-mac-operation-t/size-of(c: c-null<mbedtls-psa-mac-operation-t-c>): int32
  c inline "sizeof(struct mbedtls_psa_mac_operation_t)"

pub fun mbedtls-psa-mac-operation-tc(): mbedtls-psa-mac-operation-tc
  malloc(?size-of=mbedtls-psa-mac-operation-t/size-of)

pub fun mbedtls-psa-mac-operation-tc-calloc(): mbedtls-psa-mac-operation-tc
  malloc-c(?size-of=mbedtls-psa-mac-operation-t/size-of)

pub fun mbedtls-psa-mac-operation-tc-array(n: int): mbedtls-psa-mac-operation-tca
  malloc(n.int32, ?size-of=mbedtls-psa-mac-operation-t/size-of)

pub fun mbedtls-psa-mac-operation-tc-array-calloc(n: int): mbedtls-psa-mac-operation-tca
  malloc-c(n.int32, ?size-of=mbedtls-psa-mac-operation-t/size-of)

inline extern mbedtls-psa-mac-operation-t-ptr/private-alg(s: intptr_t): int32
  c inline "(psa_algorithm_t)(((struct mbedtls_psa_mac_operation_t*)#1)->private_alg)"

pub inline fun mbedtls-psa-mac-operation-tc/private-alg(^s: mbedtls-psa-mac-operation-tc): int32
  s.with-ptr(mbedtls-psa-mac-operation-t-ptr/private-alg)

pub inline fun mbedtls-psa-mac-operation-tcb/private-alg(^s: mbedtls-psa-mac-operation-tcb<s::S>): int32
  s.with-ptr(mbedtls-psa-mac-operation-t-ptr/private-alg)

inline extern mbedtls-psa-mac-operation-t-ptr/set-private-alg(s: intptr_t, private-alg: int32): ()
  c inline "((struct mbedtls_psa_mac_operation_t*)#1)->private_alg = (psa_algorithm_t)#2"

pub inline fun mbedtls-psa-mac-operation-tc/set-private-alg(^s: mbedtls-psa-mac-operation-tc, private-alg: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-mac-operation-t-ptr/set-private-alg(private-alg))

pub inline fun mbedtls-psa-mac-operation-tcb/set-private-alg(^s: mbedtls-psa-mac-operation-tcb<s::S>, private-alg: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-mac-operation-t-ptr/set-private-alg(private-alg))

pub inline fun mbedtls-psa-mac-operation-tc-wrapper/private-alg(^s: mbedtls-psa-mac-operation-tc): koka-psa_algorithm_t
  s.with-ptr(mbedtls-psa-mac-operation-t-ptr/private-alg).int

pub inline fun mbedtls-psa-mac-operation-tcb-wrapper/private-alg(^s: mbedtls-psa-mac-operation-tcb<s::S>): koka-psa_algorithm_t
  s.with-ptr(mbedtls-psa-mac-operation-t-ptr/private-alg).int

pub inline fun mbedtls-psa-mac-operation-tc-wrapper/set-private-alg(^s: mbedtls-psa-mac-operation-tc, private-alg: koka-psa_algorithm_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-mac-operation-t-ptr/set-private-alg(private-alg.int32))

pub inline fun mbedtls-psa-mac-operation-tcb-wrapper/set-private-alg(^s: mbedtls-psa-mac-operation-tcb<s::S>, private-alg: koka-psa_algorithm_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-mac-operation-t-ptr/set-private-alg(private-alg.int32))

inline extern mbedtls-psa-mac-operation-t-ptr/private-ctx(s: intptr_t): unnamedunion3-c
  c inline "(UnnamedUnion3)(((struct mbedtls_psa_mac_operation_t*)#1)->private_ctx)"

pub inline fun mbedtls-psa-mac-operation-tc/private-ctx(^s: mbedtls-psa-mac-operation-tc): unnamedunion3-c
  s.with-ptr(mbedtls-psa-mac-operation-t-ptr/private-ctx)

pub inline fun mbedtls-psa-mac-operation-tcb/private-ctx(^s: mbedtls-psa-mac-operation-tcb<s::S>): unnamedunion3-c
  s.with-ptr(mbedtls-psa-mac-operation-t-ptr/private-ctx)

inline extern mbedtls-psa-mac-operation-t-ptr/set-private-ctx(s: intptr_t, private-ctx: unnamedunion3-c): ()
  c inline "((struct mbedtls_psa_mac_operation_t*)#1)->private_ctx = (UnnamedUnion3)#2"

pub inline fun mbedtls-psa-mac-operation-tc/set-private-ctx(^s: mbedtls-psa-mac-operation-tc, private-ctx: unnamedunion3-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-mac-operation-t-ptr/set-private-ctx(private-ctx))

pub inline fun mbedtls-psa-mac-operation-tcb/set-private-ctx(^s: mbedtls-psa-mac-operation-tcb<s::S>, private-ctx: unnamedunion3-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-mac-operation-t-ptr/set-private-ctx(private-ctx))

pub fun mbedtls-psa-mac-operation-t/to-koka(s: mbedtls-psa-mac-operation-tc): mbedtls-psa-mac-operation-t
  Mbedtls-psa-mac-operation-t(s.mbedtls-psa-mac-operation-tc/private-alg.int, s.mbedtls-psa-mac-operation-tc/private-ctx)

pub type unnamedunion3-c
pub alias unnamedunion3c = owned-c<unnamedunion3-c>
pub alias unnamedunion3cb<s::S> = borrowed-c<s,unnamedunion3-c>
pub alias unnamedunion3ca = owned-c<c-array<unnamedunion3>>

extern unnamedunion3/size-of(c: c-null<unnamedunion3-c>): int32
  c inline "sizeof(union UnnamedUnion3)"

pub fun unnamedunion3c(): unnamedunion3c
  malloc(?size-of=unnamedunion3/size-of)

pub fun unnamedunion3c-calloc(): unnamedunion3c
  malloc-c(?size-of=unnamedunion3/size-of)

pub fun unnamedunion3c-array(n: int): unnamedunion3ca
  malloc(n.int32, ?size-of=unnamedunion3/size-of)

pub fun unnamedunion3c-array-calloc(n: int): unnamedunion3ca
  malloc-c(n.int32, ?size-of=unnamedunion3/size-of)

inline extern unnamedunion3-ptr/private_dummy(s: intptr_t): int32
  c inline "(unsigned int)(((union UnnamedUnion3*)#1)->private_dummy)"

pub inline fun unnamedunion3c/private_dummy(^s: unnamedunion3c): int32
  s.with-ptr(unnamedunion3-ptr/private_dummy)

pub inline fun unnamedunion3cb/private_dummy(^s: unnamedunion3cb<s::S>): int32
  s.with-ptr(unnamedunion3-ptr/private_dummy)

inline extern unnamedunion3-ptr/set-private_dummy(s: intptr_t, private_dummy: int32): ()
  c inline "((union UnnamedUnion3*)#1)->private_dummy = (unsigned int)#2"

pub inline fun unnamedunion3c/set-private_dummy(^s: unnamedunion3c, private_dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion3-ptr/set-private_dummy(private_dummy))

pub inline fun unnamedunion3cb/set-private_dummy(^s: unnamedunion3cb<s::S>, private_dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion3-ptr/set-private_dummy(private_dummy))

pub inline fun unnamedunion3c-wrapper/private_dummy(^s: unnamedunion3c): int
  s.with-ptr(unnamedunion3-ptr/private_dummy).int

pub inline fun unnamedunion3cb-wrapper/private_dummy(^s: unnamedunion3cb<s::S>): int
  s.with-ptr(unnamedunion3-ptr/private_dummy).int

pub inline fun unnamedunion3c-wrapper/set-private_dummy(^s: unnamedunion3c, private_dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion3-ptr/set-private_dummy(private_dummy.int32))

pub inline fun unnamedunion3cb-wrapper/set-private_dummy(^s: unnamedunion3cb<s::S>, private_dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion3-ptr/set-private_dummy(private_dummy.int32))

inline extern unnamedunion3-ptr/private_hmac(s: intptr_t): mbedtls-psa-hmac-operation-t-c
  c inline "(mbedtls_psa_hmac_operation_t)(((union UnnamedUnion3*)#1)->private_hmac)"

pub inline fun unnamedunion3c/private_hmac(^s: unnamedunion3c): mbedtls-psa-hmac-operation-t-c
  s.with-ptr(unnamedunion3-ptr/private_hmac)

pub inline fun unnamedunion3cb/private_hmac(^s: unnamedunion3cb<s::S>): mbedtls-psa-hmac-operation-t-c
  s.with-ptr(unnamedunion3-ptr/private_hmac)

inline extern unnamedunion3-ptr/set-private_hmac(s: intptr_t, private_hmac: mbedtls-psa-hmac-operation-t-c): ()
  c inline "((union UnnamedUnion3*)#1)->private_hmac = (mbedtls_psa_hmac_operation_t)#2"

pub inline fun unnamedunion3c/set-private_hmac(^s: unnamedunion3c, private_hmac: mbedtls-psa-hmac-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion3-ptr/set-private_hmac(private_hmac))

pub inline fun unnamedunion3cb/set-private_hmac(^s: unnamedunion3cb<s::S>, private_hmac: mbedtls-psa-hmac-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion3-ptr/set-private_hmac(private_hmac))

inline extern unnamedunion3-ptr/private_cmac(s: intptr_t): mbedtls-cipher-context-t-c
  c inline "(mbedtls_cipher_context_t)(((union UnnamedUnion3*)#1)->private_cmac)"

pub inline fun unnamedunion3c/private_cmac(^s: unnamedunion3c): mbedtls-cipher-context-t-c
  s.with-ptr(unnamedunion3-ptr/private_cmac)

pub inline fun unnamedunion3cb/private_cmac(^s: unnamedunion3cb<s::S>): mbedtls-cipher-context-t-c
  s.with-ptr(unnamedunion3-ptr/private_cmac)

inline extern unnamedunion3-ptr/set-private_cmac(s: intptr_t, private_cmac: mbedtls-cipher-context-t-c): ()
  c inline "((union UnnamedUnion3*)#1)->private_cmac = (mbedtls_cipher_context_t)#2"

pub inline fun unnamedunion3c/set-private_cmac(^s: unnamedunion3c, private_cmac: mbedtls-cipher-context-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion3-ptr/set-private_cmac(private_cmac))

pub inline fun unnamedunion3cb/set-private_cmac(^s: unnamedunion3cb<s::S>, private_cmac: mbedtls-cipher-context-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion3-ptr/set-private_cmac(private_cmac))

pub type mbedtls-psa-hmac-operation-t-c
pub alias mbedtls-psa-hmac-operation-tc<s::S> = owned-c<mbedtls-psa-hmac-operation-t-c>
pub alias mbedtls-psa-hmac-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-hmac-operation-t-c>
pub alias mbedtls-psa-hmac-operation-tca<s::S> = owned-c<c-array<mbedtls-psa-hmac-operation-t>>

extern mbedtls-psa-hmac-operation-t/size-of(c: c-null<mbedtls-psa-hmac-operation-t-c>): int32
  c inline "sizeof(struct mbedtls_psa_hmac_operation_t)"

pub fun mbedtls-psa-hmac-operation-tc(): mbedtls-psa-hmac-operation-tc<s::S>
  malloc(?size-of=mbedtls-psa-hmac-operation-t/size-of)

pub fun mbedtls-psa-hmac-operation-tc-calloc(): mbedtls-psa-hmac-operation-tc<s::S>
  malloc-c(?size-of=mbedtls-psa-hmac-operation-t/size-of)

pub fun mbedtls-psa-hmac-operation-tc-array(n: int): mbedtls-psa-hmac-operation-tca<s::S>
  malloc(n.int32, ?size-of=mbedtls-psa-hmac-operation-t/size-of)

pub fun mbedtls-psa-hmac-operation-tc-array-calloc(n: int): mbedtls-psa-hmac-operation-tca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-psa-hmac-operation-t/size-of)

inline extern mbedtls-psa-hmac-operation-t-ptr/private_alg(s: intptr_t): int32
  c inline "(psa_algorithm_t)(((struct mbedtls_psa_hmac_operation_t*)#1)->private_alg)"

pub inline fun mbedtls-psa-hmac-operation-tc/private_alg(^s: mbedtls-psa-hmac-operation-tc<s::S>): int32
  s.with-ptr(mbedtls-psa-hmac-operation-t-ptr/private_alg)

pub inline fun mbedtls-psa-hmac-operation-tcb/private_alg(^s: mbedtls-psa-hmac-operation-tcb<s::S>): int32
  s.with-ptr(mbedtls-psa-hmac-operation-t-ptr/private_alg)

inline extern mbedtls-psa-hmac-operation-t-ptr/set-private_alg(s: intptr_t, private_alg: int32): ()
  c inline "((struct mbedtls_psa_hmac_operation_t*)#1)->private_alg = (psa_algorithm_t)#2"

pub inline fun mbedtls-psa-hmac-operation-tc/set-private_alg(^s: mbedtls-psa-hmac-operation-tc<s::S>, private_alg: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-t-ptr/set-private_alg(private_alg))

pub inline fun mbedtls-psa-hmac-operation-tcb/set-private_alg(^s: mbedtls-psa-hmac-operation-tcb<s::S>, private_alg: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-t-ptr/set-private_alg(private_alg))

pub inline fun mbedtls-psa-hmac-operation-tc-wrapper/private_alg(^s: mbedtls-psa-hmac-operation-tc<s::S>): koka-psa_algorithm_t
  s.with-ptr(mbedtls-psa-hmac-operation-t-ptr/private_alg).int

pub inline fun mbedtls-psa-hmac-operation-tcb-wrapper/private_alg(^s: mbedtls-psa-hmac-operation-tcb<s::S>): koka-psa_algorithm_t
  s.with-ptr(mbedtls-psa-hmac-operation-t-ptr/private_alg).int

pub inline fun mbedtls-psa-hmac-operation-tc-wrapper/set-private_alg(^s: mbedtls-psa-hmac-operation-tc<s::S>, private_alg: koka-psa_algorithm_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-t-ptr/set-private_alg(private_alg.int32))

pub inline fun mbedtls-psa-hmac-operation-tcb-wrapper/set-private_alg(^s: mbedtls-psa-hmac-operation-tcb<s::S>, private_alg: koka-psa_algorithm_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-t-ptr/set-private_alg(private_alg.int32))

inline extern mbedtls-psa-hmac-operation-t-ptr/hash_ctx(s: intptr_t): psa-hash-operation-s-c
  c inline "(psa_hash_operation_s)(((struct mbedtls_psa_hmac_operation_t*)#1)->hash_ctx)"

pub inline fun mbedtls-psa-hmac-operation-tc/hash_ctx(^s: mbedtls-psa-hmac-operation-tc<s::S>): psa-hash-operation-s-c
  s.with-ptr(mbedtls-psa-hmac-operation-t-ptr/hash_ctx)

pub inline fun mbedtls-psa-hmac-operation-tcb/hash_ctx(^s: mbedtls-psa-hmac-operation-tcb<s::S>): psa-hash-operation-s-c
  s.with-ptr(mbedtls-psa-hmac-operation-t-ptr/hash_ctx)

inline extern mbedtls-psa-hmac-operation-t-ptr/set-hash_ctx(s: intptr_t, hash_ctx: psa-hash-operation-s-c): ()
  c inline "((struct mbedtls_psa_hmac_operation_t*)#1)->hash_ctx = (psa_hash_operation_s)#2"

pub inline fun mbedtls-psa-hmac-operation-tc/set-hash_ctx(^s: mbedtls-psa-hmac-operation-tc<s::S>, hash_ctx: psa-hash-operation-s-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-t-ptr/set-hash_ctx(hash_ctx))

pub inline fun mbedtls-psa-hmac-operation-tcb/set-hash_ctx(^s: mbedtls-psa-hmac-operation-tcb<s::S>, hash_ctx: psa-hash-operation-s-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-t-ptr/set-hash_ctx(hash_ctx))

pub inline fun mbedtls-psa-hmac-operation-tc-wrapper/hash_ctx(^s: mbedtls-psa-hmac-operation-tc<s::S>): psa-hash-operation-s
  s.with-ptr(mbedtls-psa-hmac-operation-t-ptr/hash_ctx).to-koka

pub inline fun mbedtls-psa-hmac-operation-tcb-wrapper/hash_ctx(^s: mbedtls-psa-hmac-operation-tcb<s::S>): psa-hash-operation-s
  s.with-ptr(mbedtls-psa-hmac-operation-t-ptr/hash_ctx).to-koka

pub inline fun mbedtls-psa-hmac-operation-tc-wrapper/set-hash_ctx(^s: mbedtls-psa-hmac-operation-tc<s::S>, hash_ctx: psa-hash-operation-s): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-t-ptr/set-hash_ctx((struct psa_hash_operation_s)(hash_ctx)))

pub inline fun mbedtls-psa-hmac-operation-tcb-wrapper/set-hash_ctx(^s: mbedtls-psa-hmac-operation-tcb<s::S>, hash_ctx: psa-hash-operation-s): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-t-ptr/set-hash_ctx((struct psa_hash_operation_s)(hash_ctx)))

pub value struct psa-hash-operation-s
  private-id: int
  private-ctx: psa-driver-hash-context-t

pub type psa-hash-operation-s-c
pub alias psa-hash-operation-sc = owned-c<psa-hash-operation-s-c>
pub alias psa-hash-operation-scb<s::S> = borrowed-c<s,psa-hash-operation-s-c>
pub alias psa-hash-operation-sca = owned-c<c-array<psa-hash-operation-s>>

extern psa-hash-operation-s/size-of(c: c-null<psa-hash-operation-s-c>): int32
  c inline "sizeof(struct psa_hash_operation_s)"

pub fun psa-hash-operation-sc(): psa-hash-operation-sc
  malloc(?size-of=psa-hash-operation-s/size-of)

pub fun psa-hash-operation-sc-calloc(): psa-hash-operation-sc
  malloc-c(?size-of=psa-hash-operation-s/size-of)

pub fun psa-hash-operation-sc-array(n: int): psa-hash-operation-sca
  malloc(n.int32, ?size-of=psa-hash-operation-s/size-of)

pub fun psa-hash-operation-sc-array-calloc(n: int): psa-hash-operation-sca
  malloc-c(n.int32, ?size-of=psa-hash-operation-s/size-of)

inline extern psa-hash-operation-s-ptr/private-id(s: intptr_t): int32
  c inline "(unsigned int)(((struct psa_hash_operation_s*)#1)->private_id)"

pub inline fun psa-hash-operation-sc/private-id(^s: psa-hash-operation-sc): int32
  s.with-ptr(psa-hash-operation-s-ptr/private-id)

pub inline fun psa-hash-operation-scb/private-id(^s: psa-hash-operation-scb<s::S>): int32
  s.with-ptr(psa-hash-operation-s-ptr/private-id)

inline extern psa-hash-operation-s-ptr/set-private-id(s: intptr_t, private-id: int32): ()
  c inline "((struct psa_hash_operation_s*)#1)->private_id = (unsigned int)#2"

pub inline fun psa-hash-operation-sc/set-private-id(^s: psa-hash-operation-sc, private-id: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-hash-operation-s-ptr/set-private-id(private-id))

pub inline fun psa-hash-operation-scb/set-private-id(^s: psa-hash-operation-scb<s::S>, private-id: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-hash-operation-s-ptr/set-private-id(private-id))

pub inline fun psa-hash-operation-sc-wrapper/private-id(^s: psa-hash-operation-sc): int
  s.with-ptr(psa-hash-operation-s-ptr/private-id).int

pub inline fun psa-hash-operation-scb-wrapper/private-id(^s: psa-hash-operation-scb<s::S>): int
  s.with-ptr(psa-hash-operation-s-ptr/private-id).int

pub inline fun psa-hash-operation-sc-wrapper/set-private-id(^s: psa-hash-operation-sc, private-id: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-hash-operation-s-ptr/set-private-id(private-id.int32))

pub inline fun psa-hash-operation-scb-wrapper/set-private-id(^s: psa-hash-operation-scb<s::S>, private-id: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-hash-operation-s-ptr/set-private-id(private-id.int32))

inline extern psa-hash-operation-s-ptr/private-ctx(s: intptr_t): psa-driver-hash-context-t-c
  c inline "(psa_driver_hash_context_t)(((struct psa_hash_operation_s*)#1)->private_ctx)"

pub inline fun psa-hash-operation-sc/private-ctx(^s: psa-hash-operation-sc): psa-driver-hash-context-t-c
  s.with-ptr(psa-hash-operation-s-ptr/private-ctx)

pub inline fun psa-hash-operation-scb/private-ctx(^s: psa-hash-operation-scb<s::S>): psa-driver-hash-context-t-c
  s.with-ptr(psa-hash-operation-s-ptr/private-ctx)

inline extern psa-hash-operation-s-ptr/set-private-ctx(s: intptr_t, private-ctx: psa-driver-hash-context-t-c): ()
  c inline "((struct psa_hash_operation_s*)#1)->private_ctx = (psa_driver_hash_context_t)#2"

pub inline fun psa-hash-operation-sc/set-private-ctx(^s: psa-hash-operation-sc, private-ctx: psa-driver-hash-context-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-hash-operation-s-ptr/set-private-ctx(private-ctx))

pub inline fun psa-hash-operation-scb/set-private-ctx(^s: psa-hash-operation-scb<s::S>, private-ctx: psa-driver-hash-context-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-hash-operation-s-ptr/set-private-ctx(private-ctx))

pub fun psa-hash-operation-s/to-koka(s: psa-hash-operation-sc): psa-hash-operation-s
  Psa-hash-operation-s(s.psa-hash-operation-sc/private-id.int, s.psa-hash-operation-sc/private-ctx)

pub struct psa-driver-aead-context-t
pub type psa-driver-aead-context-t-c
pub alias psa-driver-aead-context-tc = owned-c<psa-driver-aead-context-t-c>
pub alias psa-driver-aead-context-tcb<s::S> = borrowed-c<s,psa-driver-aead-context-t-c>
pub alias psa-driver-aead-context-tca = owned-c<c-array<psa-driver-aead-context-t>>

pub fun psa-driver-aead-context-t/to-koka(s: psa-driver-aead-context-tc): psa-driver-aead-context-t
  Psa-driver-aead-context-t()

pub type psa-driver-sign-hash-interruptible-context-t-c
pub alias psa-driver-sign-hash-interruptible-context-tc = owned-c<psa-driver-sign-hash-interruptible-context-t-c>
pub alias psa-driver-sign-hash-interruptible-context-tcb<s::S> = borrowed-c<s,psa-driver-sign-hash-interruptible-context-t-c>
pub alias psa-driver-sign-hash-interruptible-context-tca = owned-c<c-array<psa-driver-sign-hash-interruptible-context-t>>

extern psa-driver-sign-hash-interruptible-context-t/size-of(c: c-null<psa-driver-sign-hash-interruptible-context-t-c>): int32
  c inline "sizeof(union psa_driver_sign_hash_interruptible_context_t)"

pub fun psa-driver-sign-hash-interruptible-context-tc(): psa-driver-sign-hash-interruptible-context-tc
  malloc(?size-of=psa-driver-sign-hash-interruptible-context-t/size-of)

pub fun psa-driver-sign-hash-interruptible-context-tc-calloc(): psa-driver-sign-hash-interruptible-context-tc
  malloc-c(?size-of=psa-driver-sign-hash-interruptible-context-t/size-of)

pub fun psa-driver-sign-hash-interruptible-context-tc-array(n: int): psa-driver-sign-hash-interruptible-context-tca
  malloc(n.int32, ?size-of=psa-driver-sign-hash-interruptible-context-t/size-of)

pub fun psa-driver-sign-hash-interruptible-context-tc-array-calloc(n: int): psa-driver-sign-hash-interruptible-context-tca
  malloc-c(n.int32, ?size-of=psa-driver-sign-hash-interruptible-context-t/size-of)

inline extern psa-driver-sign-hash-interruptible-context-t-ptr/dummy(s: intptr_t): int32
  c inline "(unsigned int)(((union psa_driver_sign_hash_interruptible_context_t*)#1)->dummy)"

pub inline fun psa-driver-sign-hash-interruptible-context-tc/dummy(^s: psa-driver-sign-hash-interruptible-context-tc): int32
  s.with-ptr(psa-driver-sign-hash-interruptible-context-t-ptr/dummy)

pub inline fun psa-driver-sign-hash-interruptible-context-tcb/dummy(^s: psa-driver-sign-hash-interruptible-context-tcb<s::S>): int32
  s.with-ptr(psa-driver-sign-hash-interruptible-context-t-ptr/dummy)

inline extern psa-driver-sign-hash-interruptible-context-t-ptr/set-dummy(s: intptr_t, dummy: int32): ()
  c inline "((union psa_driver_sign_hash_interruptible_context_t*)#1)->dummy = (unsigned int)#2"

pub inline fun psa-driver-sign-hash-interruptible-context-tc/set-dummy(^s: psa-driver-sign-hash-interruptible-context-tc, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-sign-hash-interruptible-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-sign-hash-interruptible-context-tcb/set-dummy(^s: psa-driver-sign-hash-interruptible-context-tcb<s::S>, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-sign-hash-interruptible-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-sign-hash-interruptible-context-tc-wrapper/dummy(^s: psa-driver-sign-hash-interruptible-context-tc): int
  s.with-ptr(psa-driver-sign-hash-interruptible-context-t-ptr/dummy).int

pub inline fun psa-driver-sign-hash-interruptible-context-tcb-wrapper/dummy(^s: psa-driver-sign-hash-interruptible-context-tcb<s::S>): int
  s.with-ptr(psa-driver-sign-hash-interruptible-context-t-ptr/dummy).int

pub inline fun psa-driver-sign-hash-interruptible-context-tc-wrapper/set-dummy(^s: psa-driver-sign-hash-interruptible-context-tc, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-sign-hash-interruptible-context-t-ptr/set-dummy(dummy.int32))

pub inline fun psa-driver-sign-hash-interruptible-context-tcb-wrapper/set-dummy(^s: psa-driver-sign-hash-interruptible-context-tcb<s::S>, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-sign-hash-interruptible-context-t-ptr/set-dummy(dummy.int32))

inline extern psa-driver-sign-hash-interruptible-context-t-ptr/mbedtls_ctx(s: intptr_t): mbedtls-psa-sign-hash-interruptible-operation-t-c
  c inline "(mbedtls_psa_sign_hash_interruptible_operation_t)(((union psa_driver_sign_hash_interruptible_context_t*)#1)->mbedtls_ctx)"

pub inline fun psa-driver-sign-hash-interruptible-context-tc/mbedtls_ctx(^s: psa-driver-sign-hash-interruptible-context-tc): mbedtls-psa-sign-hash-interruptible-operation-t-c
  s.with-ptr(psa-driver-sign-hash-interruptible-context-t-ptr/mbedtls_ctx)

pub inline fun psa-driver-sign-hash-interruptible-context-tcb/mbedtls_ctx(^s: psa-driver-sign-hash-interruptible-context-tcb<s::S>): mbedtls-psa-sign-hash-interruptible-operation-t-c
  s.with-ptr(psa-driver-sign-hash-interruptible-context-t-ptr/mbedtls_ctx)

inline extern psa-driver-sign-hash-interruptible-context-t-ptr/set-mbedtls_ctx(s: intptr_t, mbedtls_ctx: mbedtls-psa-sign-hash-interruptible-operation-t-c): ()
  c inline "((union psa_driver_sign_hash_interruptible_context_t*)#1)->mbedtls_ctx = (mbedtls_psa_sign_hash_interruptible_operation_t)#2"

pub inline fun psa-driver-sign-hash-interruptible-context-tc/set-mbedtls_ctx(^s: psa-driver-sign-hash-interruptible-context-tc, mbedtls_ctx: mbedtls-psa-sign-hash-interruptible-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-sign-hash-interruptible-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub inline fun psa-driver-sign-hash-interruptible-context-tcb/set-mbedtls_ctx(^s: psa-driver-sign-hash-interruptible-context-tcb<s::S>, mbedtls_ctx: mbedtls-psa-sign-hash-interruptible-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-sign-hash-interruptible-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub inline fun psa-driver-sign-hash-interruptible-context-tc-wrapper/mbedtls_ctx(^s: psa-driver-sign-hash-interruptible-context-tc): mbedtls-psa-sign-hash-interruptible-operation-t
  s.with-ptr(psa-driver-sign-hash-interruptible-context-t-ptr/mbedtls_ctx).to-koka

pub inline fun psa-driver-sign-hash-interruptible-context-tcb-wrapper/mbedtls_ctx(^s: psa-driver-sign-hash-interruptible-context-tcb<s::S>): mbedtls-psa-sign-hash-interruptible-operation-t
  s.with-ptr(psa-driver-sign-hash-interruptible-context-t-ptr/mbedtls_ctx).to-koka

pub inline fun psa-driver-sign-hash-interruptible-context-tc-wrapper/set-mbedtls_ctx(^s: psa-driver-sign-hash-interruptible-context-tc, mbedtls_ctx: mbedtls-psa-sign-hash-interruptible-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-sign-hash-interruptible-context-t-ptr/set-mbedtls_ctx((struct mbedtls_psa_sign_hash_interruptible_operation_t)(mbedtls_ctx)))

pub inline fun psa-driver-sign-hash-interruptible-context-tcb-wrapper/set-mbedtls_ctx(^s: psa-driver-sign-hash-interruptible-context-tcb<s::S>, mbedtls_ctx: mbedtls-psa-sign-hash-interruptible-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-sign-hash-interruptible-context-t-ptr/set-mbedtls_ctx((struct mbedtls_psa_sign_hash_interruptible_operation_t)(mbedtls_ctx)))

pub value struct mbedtls-psa-sign-hash-interruptible-operation-t
  private-dummy: int

pub type mbedtls-psa-sign-hash-interruptible-operation-t-c
pub alias mbedtls-psa-sign-hash-interruptible-operation-tc = owned-c<mbedtls-psa-sign-hash-interruptible-operation-t-c>
pub alias mbedtls-psa-sign-hash-interruptible-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-sign-hash-interruptible-operation-t-c>
pub alias mbedtls-psa-sign-hash-interruptible-operation-tca = owned-c<c-array<mbedtls-psa-sign-hash-interruptible-operation-t>>

extern mbedtls-psa-sign-hash-interruptible-operation-t/size-of(c: c-null<mbedtls-psa-sign-hash-interruptible-operation-t-c>): int32
  c inline "sizeof(struct mbedtls_psa_sign_hash_interruptible_operation_t)"

pub fun mbedtls-psa-sign-hash-interruptible-operation-tc(): mbedtls-psa-sign-hash-interruptible-operation-tc
  malloc(?size-of=mbedtls-psa-sign-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-sign-hash-interruptible-operation-tc-calloc(): mbedtls-psa-sign-hash-interruptible-operation-tc
  malloc-c(?size-of=mbedtls-psa-sign-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-sign-hash-interruptible-operation-tc-array(n: int): mbedtls-psa-sign-hash-interruptible-operation-tca
  malloc(n.int32, ?size-of=mbedtls-psa-sign-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-sign-hash-interruptible-operation-tc-array-calloc(n: int): mbedtls-psa-sign-hash-interruptible-operation-tca
  malloc-c(n.int32, ?size-of=mbedtls-psa-sign-hash-interruptible-operation-t/size-of)

inline extern mbedtls-psa-sign-hash-interruptible-operation-t-ptr/private-dummy(s: intptr_t): int32
  c inline "(unsigned int)(((struct mbedtls_psa_sign_hash_interruptible_operation_t*)#1)->private_dummy)"

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tc/private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tc): int32
  s.with-ptr(mbedtls-psa-sign-hash-interruptible-operation-t-ptr/private-dummy)

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tcb/private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tcb<s::S>): int32
  s.with-ptr(mbedtls-psa-sign-hash-interruptible-operation-t-ptr/private-dummy)

inline extern mbedtls-psa-sign-hash-interruptible-operation-t-ptr/set-private-dummy(s: intptr_t, private-dummy: int32): ()
  c inline "((struct mbedtls_psa_sign_hash_interruptible_operation_t*)#1)->private_dummy = (unsigned int)#2"

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tc/set-private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tc, private-dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-sign-hash-interruptible-operation-t-ptr/set-private-dummy(private-dummy))

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tcb/set-private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tcb<s::S>, private-dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-sign-hash-interruptible-operation-t-ptr/set-private-dummy(private-dummy))

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tc-wrapper/private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tc): int
  s.with-ptr(mbedtls-psa-sign-hash-interruptible-operation-t-ptr/private-dummy).int

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tcb-wrapper/private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tcb<s::S>): int
  s.with-ptr(mbedtls-psa-sign-hash-interruptible-operation-t-ptr/private-dummy).int

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tc-wrapper/set-private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tc, private-dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-sign-hash-interruptible-operation-t-ptr/set-private-dummy(private-dummy.int32))

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tcb-wrapper/set-private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tcb<s::S>, private-dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-sign-hash-interruptible-operation-t-ptr/set-private-dummy(private-dummy.int32))

pub fun mbedtls-psa-sign-hash-interruptible-operation-t/to-koka(s: mbedtls-psa-sign-hash-interruptible-operation-tc): mbedtls-psa-sign-hash-interruptible-operation-t
  Mbedtls-psa-sign-hash-interruptible-operation-t(s.mbedtls-psa-sign-hash-interruptible-operation-tc/private-dummy.int)

pub type psa-driver-verify-hash-interruptible-context-t-c
pub alias psa-driver-verify-hash-interruptible-context-tc = owned-c<psa-driver-verify-hash-interruptible-context-t-c>
pub alias psa-driver-verify-hash-interruptible-context-tcb<s::S> = borrowed-c<s,psa-driver-verify-hash-interruptible-context-t-c>
pub alias psa-driver-verify-hash-interruptible-context-tca = owned-c<c-array<psa-driver-verify-hash-interruptible-context-t>>

extern psa-driver-verify-hash-interruptible-context-t/size-of(c: c-null<psa-driver-verify-hash-interruptible-context-t-c>): int32
  c inline "sizeof(union psa_driver_verify_hash_interruptible_context_t)"

pub fun psa-driver-verify-hash-interruptible-context-tc(): psa-driver-verify-hash-interruptible-context-tc
  malloc(?size-of=psa-driver-verify-hash-interruptible-context-t/size-of)

pub fun psa-driver-verify-hash-interruptible-context-tc-calloc(): psa-driver-verify-hash-interruptible-context-tc
  malloc-c(?size-of=psa-driver-verify-hash-interruptible-context-t/size-of)

pub fun psa-driver-verify-hash-interruptible-context-tc-array(n: int): psa-driver-verify-hash-interruptible-context-tca
  malloc(n.int32, ?size-of=psa-driver-verify-hash-interruptible-context-t/size-of)

pub fun psa-driver-verify-hash-interruptible-context-tc-array-calloc(n: int): psa-driver-verify-hash-interruptible-context-tca
  malloc-c(n.int32, ?size-of=psa-driver-verify-hash-interruptible-context-t/size-of)

inline extern psa-driver-verify-hash-interruptible-context-t-ptr/dummy(s: intptr_t): int32
  c inline "(unsigned int)(((union psa_driver_verify_hash_interruptible_context_t*)#1)->dummy)"

pub inline fun psa-driver-verify-hash-interruptible-context-tc/dummy(^s: psa-driver-verify-hash-interruptible-context-tc): int32
  s.with-ptr(psa-driver-verify-hash-interruptible-context-t-ptr/dummy)

pub inline fun psa-driver-verify-hash-interruptible-context-tcb/dummy(^s: psa-driver-verify-hash-interruptible-context-tcb<s::S>): int32
  s.with-ptr(psa-driver-verify-hash-interruptible-context-t-ptr/dummy)

inline extern psa-driver-verify-hash-interruptible-context-t-ptr/set-dummy(s: intptr_t, dummy: int32): ()
  c inline "((union psa_driver_verify_hash_interruptible_context_t*)#1)->dummy = (unsigned int)#2"

pub inline fun psa-driver-verify-hash-interruptible-context-tc/set-dummy(^s: psa-driver-verify-hash-interruptible-context-tc, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-verify-hash-interruptible-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-verify-hash-interruptible-context-tcb/set-dummy(^s: psa-driver-verify-hash-interruptible-context-tcb<s::S>, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-verify-hash-interruptible-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-verify-hash-interruptible-context-tc-wrapper/dummy(^s: psa-driver-verify-hash-interruptible-context-tc): int
  s.with-ptr(psa-driver-verify-hash-interruptible-context-t-ptr/dummy).int

pub inline fun psa-driver-verify-hash-interruptible-context-tcb-wrapper/dummy(^s: psa-driver-verify-hash-interruptible-context-tcb<s::S>): int
  s.with-ptr(psa-driver-verify-hash-interruptible-context-t-ptr/dummy).int

pub inline fun psa-driver-verify-hash-interruptible-context-tc-wrapper/set-dummy(^s: psa-driver-verify-hash-interruptible-context-tc, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-verify-hash-interruptible-context-t-ptr/set-dummy(dummy.int32))

pub inline fun psa-driver-verify-hash-interruptible-context-tcb-wrapper/set-dummy(^s: psa-driver-verify-hash-interruptible-context-tcb<s::S>, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-verify-hash-interruptible-context-t-ptr/set-dummy(dummy.int32))

inline extern psa-driver-verify-hash-interruptible-context-t-ptr/mbedtls_ctx(s: intptr_t): mbedtls-psa-verify-hash-interruptible-operation-t-c
  c inline "(mbedtls_psa_verify_hash_interruptible_operation_t)(((union psa_driver_verify_hash_interruptible_context_t*)#1)->mbedtls_ctx)"

pub inline fun psa-driver-verify-hash-interruptible-context-tc/mbedtls_ctx(^s: psa-driver-verify-hash-interruptible-context-tc): mbedtls-psa-verify-hash-interruptible-operation-t-c
  s.with-ptr(psa-driver-verify-hash-interruptible-context-t-ptr/mbedtls_ctx)

pub inline fun psa-driver-verify-hash-interruptible-context-tcb/mbedtls_ctx(^s: psa-driver-verify-hash-interruptible-context-tcb<s::S>): mbedtls-psa-verify-hash-interruptible-operation-t-c
  s.with-ptr(psa-driver-verify-hash-interruptible-context-t-ptr/mbedtls_ctx)

inline extern psa-driver-verify-hash-interruptible-context-t-ptr/set-mbedtls_ctx(s: intptr_t, mbedtls_ctx: mbedtls-psa-verify-hash-interruptible-operation-t-c): ()
  c inline "((union psa_driver_verify_hash_interruptible_context_t*)#1)->mbedtls_ctx = (mbedtls_psa_verify_hash_interruptible_operation_t)#2"

pub inline fun psa-driver-verify-hash-interruptible-context-tc/set-mbedtls_ctx(^s: psa-driver-verify-hash-interruptible-context-tc, mbedtls_ctx: mbedtls-psa-verify-hash-interruptible-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-verify-hash-interruptible-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub inline fun psa-driver-verify-hash-interruptible-context-tcb/set-mbedtls_ctx(^s: psa-driver-verify-hash-interruptible-context-tcb<s::S>, mbedtls_ctx: mbedtls-psa-verify-hash-interruptible-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-verify-hash-interruptible-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub inline fun psa-driver-verify-hash-interruptible-context-tc-wrapper/mbedtls_ctx(^s: psa-driver-verify-hash-interruptible-context-tc): mbedtls-psa-verify-hash-interruptible-operation-t
  s.with-ptr(psa-driver-verify-hash-interruptible-context-t-ptr/mbedtls_ctx).to-koka

pub inline fun psa-driver-verify-hash-interruptible-context-tcb-wrapper/mbedtls_ctx(^s: psa-driver-verify-hash-interruptible-context-tcb<s::S>): mbedtls-psa-verify-hash-interruptible-operation-t
  s.with-ptr(psa-driver-verify-hash-interruptible-context-t-ptr/mbedtls_ctx).to-koka

pub inline fun psa-driver-verify-hash-interruptible-context-tc-wrapper/set-mbedtls_ctx(^s: psa-driver-verify-hash-interruptible-context-tc, mbedtls_ctx: mbedtls-psa-verify-hash-interruptible-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-verify-hash-interruptible-context-t-ptr/set-mbedtls_ctx((struct mbedtls_psa_verify_hash_interruptible_operation_t)(mbedtls_ctx)))

pub inline fun psa-driver-verify-hash-interruptible-context-tcb-wrapper/set-mbedtls_ctx(^s: psa-driver-verify-hash-interruptible-context-tcb<s::S>, mbedtls_ctx: mbedtls-psa-verify-hash-interruptible-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-verify-hash-interruptible-context-t-ptr/set-mbedtls_ctx((struct mbedtls_psa_verify_hash_interruptible_operation_t)(mbedtls_ctx)))

pub value struct mbedtls-psa-verify-hash-interruptible-operation-t
  private-dummy: int

pub type mbedtls-psa-verify-hash-interruptible-operation-t-c
pub alias mbedtls-psa-verify-hash-interruptible-operation-tc = owned-c<mbedtls-psa-verify-hash-interruptible-operation-t-c>
pub alias mbedtls-psa-verify-hash-interruptible-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-verify-hash-interruptible-operation-t-c>
pub alias mbedtls-psa-verify-hash-interruptible-operation-tca = owned-c<c-array<mbedtls-psa-verify-hash-interruptible-operation-t>>

extern mbedtls-psa-verify-hash-interruptible-operation-t/size-of(c: c-null<mbedtls-psa-verify-hash-interruptible-operation-t-c>): int32
  c inline "sizeof(struct mbedtls_psa_verify_hash_interruptible_operation_t)"

pub fun mbedtls-psa-verify-hash-interruptible-operation-tc(): mbedtls-psa-verify-hash-interruptible-operation-tc
  malloc(?size-of=mbedtls-psa-verify-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-verify-hash-interruptible-operation-tc-calloc(): mbedtls-psa-verify-hash-interruptible-operation-tc
  malloc-c(?size-of=mbedtls-psa-verify-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-verify-hash-interruptible-operation-tc-array(n: int): mbedtls-psa-verify-hash-interruptible-operation-tca
  malloc(n.int32, ?size-of=mbedtls-psa-verify-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-verify-hash-interruptible-operation-tc-array-calloc(n: int): mbedtls-psa-verify-hash-interruptible-operation-tca
  malloc-c(n.int32, ?size-of=mbedtls-psa-verify-hash-interruptible-operation-t/size-of)

inline extern mbedtls-psa-verify-hash-interruptible-operation-t-ptr/private-dummy(s: intptr_t): int32
  c inline "(unsigned int)(((struct mbedtls_psa_verify_hash_interruptible_operation_t*)#1)->private_dummy)"

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tc/private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tc): int32
  s.with-ptr(mbedtls-psa-verify-hash-interruptible-operation-t-ptr/private-dummy)

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tcb/private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tcb<s::S>): int32
  s.with-ptr(mbedtls-psa-verify-hash-interruptible-operation-t-ptr/private-dummy)

inline extern mbedtls-psa-verify-hash-interruptible-operation-t-ptr/set-private-dummy(s: intptr_t, private-dummy: int32): ()
  c inline "((struct mbedtls_psa_verify_hash_interruptible_operation_t*)#1)->private_dummy = (unsigned int)#2"

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tc/set-private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tc, private-dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-verify-hash-interruptible-operation-t-ptr/set-private-dummy(private-dummy))

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tcb/set-private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tcb<s::S>, private-dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-verify-hash-interruptible-operation-t-ptr/set-private-dummy(private-dummy))

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tc-wrapper/private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tc): int
  s.with-ptr(mbedtls-psa-verify-hash-interruptible-operation-t-ptr/private-dummy).int

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tcb-wrapper/private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tcb<s::S>): int
  s.with-ptr(mbedtls-psa-verify-hash-interruptible-operation-t-ptr/private-dummy).int

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tc-wrapper/set-private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tc, private-dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-verify-hash-interruptible-operation-t-ptr/set-private-dummy(private-dummy.int32))

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tcb-wrapper/set-private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tcb<s::S>, private-dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-verify-hash-interruptible-operation-t-ptr/set-private-dummy(private-dummy.int32))

pub fun mbedtls-psa-verify-hash-interruptible-operation-t/to-koka(s: mbedtls-psa-verify-hash-interruptible-operation-tc): mbedtls-psa-verify-hash-interruptible-operation-t
  Mbedtls-psa-verify-hash-interruptible-operation-t(s.mbedtls-psa-verify-hash-interruptible-operation-tc/private-dummy.int)

pub type psa-driver-pake-context-t-c
pub alias psa-driver-pake-context-tc = owned-c<psa-driver-pake-context-t-c>
pub alias psa-driver-pake-context-tcb<s::S> = borrowed-c<s,psa-driver-pake-context-t-c>
pub alias psa-driver-pake-context-tca = owned-c<c-array<psa-driver-pake-context-t>>

extern psa-driver-pake-context-t/size-of(c: c-null<psa-driver-pake-context-t-c>): int32
  c inline "sizeof(union psa_driver_pake_context_t)"

pub fun psa-driver-pake-context-tc(): psa-driver-pake-context-tc
  malloc(?size-of=psa-driver-pake-context-t/size-of)

pub fun psa-driver-pake-context-tc-calloc(): psa-driver-pake-context-tc
  malloc-c(?size-of=psa-driver-pake-context-t/size-of)

pub fun psa-driver-pake-context-tc-array(n: int): psa-driver-pake-context-tca
  malloc(n.int32, ?size-of=psa-driver-pake-context-t/size-of)

pub fun psa-driver-pake-context-tc-array-calloc(n: int): psa-driver-pake-context-tca
  malloc-c(n.int32, ?size-of=psa-driver-pake-context-t/size-of)

inline extern psa-driver-pake-context-t-ptr/dummy(s: intptr_t): int32
  c inline "(unsigned int)(((union psa_driver_pake_context_t*)#1)->dummy)"

pub inline fun psa-driver-pake-context-tc/dummy(^s: psa-driver-pake-context-tc): int32
  s.with-ptr(psa-driver-pake-context-t-ptr/dummy)

pub inline fun psa-driver-pake-context-tcb/dummy(^s: psa-driver-pake-context-tcb<s::S>): int32
  s.with-ptr(psa-driver-pake-context-t-ptr/dummy)

inline extern psa-driver-pake-context-t-ptr/set-dummy(s: intptr_t, dummy: int32): ()
  c inline "((union psa_driver_pake_context_t*)#1)->dummy = (unsigned int)#2"

pub inline fun psa-driver-pake-context-tc/set-dummy(^s: psa-driver-pake-context-tc, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-pake-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-pake-context-tcb/set-dummy(^s: psa-driver-pake-context-tcb<s::S>, dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-pake-context-t-ptr/set-dummy(dummy))

pub inline fun psa-driver-pake-context-tc-wrapper/dummy(^s: psa-driver-pake-context-tc): int
  s.with-ptr(psa-driver-pake-context-t-ptr/dummy).int

pub inline fun psa-driver-pake-context-tcb-wrapper/dummy(^s: psa-driver-pake-context-tcb<s::S>): int
  s.with-ptr(psa-driver-pake-context-t-ptr/dummy).int

pub inline fun psa-driver-pake-context-tc-wrapper/set-dummy(^s: psa-driver-pake-context-tc, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-pake-context-t-ptr/set-dummy(dummy.int32))

pub inline fun psa-driver-pake-context-tcb-wrapper/set-dummy(^s: psa-driver-pake-context-tcb<s::S>, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-pake-context-t-ptr/set-dummy(dummy.int32))

inline extern psa-driver-pake-context-t-ptr/mbedtls_ctx(s: intptr_t): mbedtls-psa-pake-operation-t-c
  c inline "(mbedtls_psa_pake_operation_t)(((union psa_driver_pake_context_t*)#1)->mbedtls_ctx)"

pub inline fun psa-driver-pake-context-tc/mbedtls_ctx(^s: psa-driver-pake-context-tc): mbedtls-psa-pake-operation-t-c
  s.with-ptr(psa-driver-pake-context-t-ptr/mbedtls_ctx)

pub inline fun psa-driver-pake-context-tcb/mbedtls_ctx(^s: psa-driver-pake-context-tcb<s::S>): mbedtls-psa-pake-operation-t-c
  s.with-ptr(psa-driver-pake-context-t-ptr/mbedtls_ctx)

inline extern psa-driver-pake-context-t-ptr/set-mbedtls_ctx(s: intptr_t, mbedtls_ctx: mbedtls-psa-pake-operation-t-c): ()
  c inline "((union psa_driver_pake_context_t*)#1)->mbedtls_ctx = (mbedtls_psa_pake_operation_t)#2"

pub inline fun psa-driver-pake-context-tc/set-mbedtls_ctx(^s: psa-driver-pake-context-tc, mbedtls_ctx: mbedtls-psa-pake-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-pake-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub inline fun psa-driver-pake-context-tcb/set-mbedtls_ctx(^s: psa-driver-pake-context-tcb<s::S>, mbedtls_ctx: mbedtls-psa-pake-operation-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-driver-pake-context-t-ptr/set-mbedtls_ctx(mbedtls_ctx))

pub type mbedtls-psa-pake-operation-t-c
pub alias mbedtls-psa-pake-operation-tc<s::S> = owned-c<mbedtls-psa-pake-operation-t-c>
pub alias mbedtls-psa-pake-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-pake-operation-t-c>
pub alias mbedtls-psa-pake-operation-tca<s::S> = owned-c<c-array<mbedtls-psa-pake-operation-t>>

extern mbedtls-psa-pake-operation-t/size-of(c: c-null<mbedtls-psa-pake-operation-t-c>): int32
  c inline "sizeof(struct mbedtls_psa_pake_operation_t)"

pub fun mbedtls-psa-pake-operation-tc(): mbedtls-psa-pake-operation-tc<s::S>
  malloc(?size-of=mbedtls-psa-pake-operation-t/size-of)

pub fun mbedtls-psa-pake-operation-tc-calloc(): mbedtls-psa-pake-operation-tc<s::S>
  malloc-c(?size-of=mbedtls-psa-pake-operation-t/size-of)

pub fun mbedtls-psa-pake-operation-tc-array(n: int): mbedtls-psa-pake-operation-tca<s::S>
  malloc(n.int32, ?size-of=mbedtls-psa-pake-operation-t/size-of)

pub fun mbedtls-psa-pake-operation-tc-array-calloc(n: int): mbedtls-psa-pake-operation-tca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-psa-pake-operation-t/size-of)

inline extern mbedtls-psa-pake-operation-t-ptr/private_alg(s: intptr_t): int32
  c inline "(psa_algorithm_t)(((struct mbedtls_psa_pake_operation_t*)#1)->private_alg)"

pub inline fun mbedtls-psa-pake-operation-tc/private_alg(^s: mbedtls-psa-pake-operation-tc<s::S>): int32
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_alg)

pub inline fun mbedtls-psa-pake-operation-tcb/private_alg(^s: mbedtls-psa-pake-operation-tcb<s::S>): int32
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_alg)

inline extern mbedtls-psa-pake-operation-t-ptr/set-private_alg(s: intptr_t, private_alg: int32): ()
  c inline "((struct mbedtls_psa_pake_operation_t*)#1)->private_alg = (psa_algorithm_t)#2"

pub inline fun mbedtls-psa-pake-operation-tc/set-private_alg(^s: mbedtls-psa-pake-operation-tc<s::S>, private_alg: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_alg(private_alg))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private_alg(^s: mbedtls-psa-pake-operation-tcb<s::S>, private_alg: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_alg(private_alg))

pub inline fun mbedtls-psa-pake-operation-tc-wrapper/private_alg(^s: mbedtls-psa-pake-operation-tc<s::S>): koka-psa_algorithm_t
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_alg).int

pub inline fun mbedtls-psa-pake-operation-tcb-wrapper/private_alg(^s: mbedtls-psa-pake-operation-tcb<s::S>): koka-psa_algorithm_t
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_alg).int

pub inline fun mbedtls-psa-pake-operation-tc-wrapper/set-private_alg(^s: mbedtls-psa-pake-operation-tc<s::S>, private_alg: koka-psa_algorithm_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_alg(private_alg.int32))

pub inline fun mbedtls-psa-pake-operation-tcb-wrapper/set-private_alg(^s: mbedtls-psa-pake-operation-tcb<s::S>, private_alg: koka-psa_algorithm_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_alg(private_alg.int32))

inline extern mbedtls-psa-pake-operation-t-ptr/private_password(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_psa_pake_operation_t*)#1)->private_password)"

pub inline fun mbedtls-psa-pake-operation-tc/private_password(^s: mbedtls-psa-pake-operation-tc<s::S>): intptr_t
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_password)

pub inline fun mbedtls-psa-pake-operation-tcb/private_password(^s: mbedtls-psa-pake-operation-tcb<s::S>): intptr_t
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_password)

inline extern mbedtls-psa-pake-operation-t-ptr/set-private_password(s: intptr_t, private_password: intptr_t): ()
  c inline "((struct mbedtls_psa_pake_operation_t*)#1)->private_password = (uint8_t*)#2"

pub inline fun mbedtls-psa-pake-operation-tc/set-private_password(^s: mbedtls-psa-pake-operation-tc<s::S>, private_password: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_password(private_password))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private_password(^s: mbedtls-psa-pake-operation-tcb<s::S>, private_password: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_password(private_password))

pub inline fun mbedtls-psa-pake-operation-tc-wrapper/private_password(^s: mbedtls-psa-pake-operation-tc<s::S>): owned-c<int8>
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_password).c-own

pub inline fun mbedtls-psa-pake-operation-tcb-wrapper/private_password(^s: mbedtls-psa-pake-operation-tcb<s::S>): owned-c<int8>
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_password).c-own

pub inline fun mbedtls-psa-pake-operation-tc-wrapper/set-private_password(^s: mbedtls-psa-pake-operation-tc<s::S>, private_password: owned-c<int8>): ()
  with koka-ptr <- private_password.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_password(koka-ptr))

pub inline fun mbedtls-psa-pake-operation-tcb-wrapper/set-private_password(^s: mbedtls-psa-pake-operation-tcb<s::S>, private_password: owned-c<int8>): ()
  with koka-ptr <- private_password.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_password(koka-ptr))

inline extern mbedtls-psa-pake-operation-t-ptr/private_password_len(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_psa_pake_operation_t*)#1)->private_password_len)"

pub inline fun mbedtls-psa-pake-operation-tc/private_password_len(^s: mbedtls-psa-pake-operation-tc<s::S>): ssize_t
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_password_len)

pub inline fun mbedtls-psa-pake-operation-tcb/private_password_len(^s: mbedtls-psa-pake-operation-tcb<s::S>): ssize_t
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_password_len)

inline extern mbedtls-psa-pake-operation-t-ptr/set-private_password_len(s: intptr_t, private_password_len: ssize_t): ()
  c inline "((struct mbedtls_psa_pake_operation_t*)#1)->private_password_len = (ssize_t)#2"

pub inline fun mbedtls-psa-pake-operation-tc/set-private_password_len(^s: mbedtls-psa-pake-operation-tc<s::S>, private_password_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_password_len(private_password_len))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private_password_len(^s: mbedtls-psa-pake-operation-tcb<s::S>, private_password_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_password_len(private_password_len))

inline extern mbedtls-psa-pake-operation-t-ptr/private_role(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_psa_pake_operation_t*)#1)->private_role)"

pub inline fun mbedtls-psa-pake-operation-tc/private_role(^s: mbedtls-psa-pake-operation-tc<s::S>): int32
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_role)

pub inline fun mbedtls-psa-pake-operation-tcb/private_role(^s: mbedtls-psa-pake-operation-tcb<s::S>): int32
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_role)

inline extern mbedtls-psa-pake-operation-t-ptr/set-private_role(s: intptr_t, private_role: int32): ()
  c inline "((struct mbedtls_psa_pake_operation_t*)#1)->private_role = (int32_t)#2"

pub inline fun mbedtls-psa-pake-operation-tc/set-private_role(^s: mbedtls-psa-pake-operation-tc<s::S>, private_role: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_role(private_role))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private_role(^s: mbedtls-psa-pake-operation-tcb<s::S>, private_role: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_role(private_role))

inline extern mbedtls-psa-pake-operation-t-ptr/private_buffer_length(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_psa_pake_operation_t*)#1)->private_buffer_length)"

pub inline fun mbedtls-psa-pake-operation-tc/private_buffer_length(^s: mbedtls-psa-pake-operation-tc<s::S>): ssize_t
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_buffer_length)

pub inline fun mbedtls-psa-pake-operation-tcb/private_buffer_length(^s: mbedtls-psa-pake-operation-tcb<s::S>): ssize_t
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_buffer_length)

inline extern mbedtls-psa-pake-operation-t-ptr/set-private_buffer_length(s: intptr_t, private_buffer_length: ssize_t): ()
  c inline "((struct mbedtls_psa_pake_operation_t*)#1)->private_buffer_length = (ssize_t)#2"

pub inline fun mbedtls-psa-pake-operation-tc/set-private_buffer_length(^s: mbedtls-psa-pake-operation-tc<s::S>, private_buffer_length: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_buffer_length(private_buffer_length))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private_buffer_length(^s: mbedtls-psa-pake-operation-tcb<s::S>, private_buffer_length: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_buffer_length(private_buffer_length))

inline extern mbedtls-psa-pake-operation-t-ptr/private_buffer_offset(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_psa_pake_operation_t*)#1)->private_buffer_offset)"

pub inline fun mbedtls-psa-pake-operation-tc/private_buffer_offset(^s: mbedtls-psa-pake-operation-tc<s::S>): ssize_t
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_buffer_offset)

pub inline fun mbedtls-psa-pake-operation-tcb/private_buffer_offset(^s: mbedtls-psa-pake-operation-tcb<s::S>): ssize_t
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_buffer_offset)

inline extern mbedtls-psa-pake-operation-t-ptr/set-private_buffer_offset(s: intptr_t, private_buffer_offset: ssize_t): ()
  c inline "((struct mbedtls_psa_pake_operation_t*)#1)->private_buffer_offset = (ssize_t)#2"

pub inline fun mbedtls-psa-pake-operation-tc/set-private_buffer_offset(^s: mbedtls-psa-pake-operation-tc<s::S>, private_buffer_offset: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_buffer_offset(private_buffer_offset))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private_buffer_offset(^s: mbedtls-psa-pake-operation-tcb<s::S>, private_buffer_offset: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_buffer_offset(private_buffer_offset))

inline extern mbedtls-psa-pake-operation-t-ptr/private_ctx(s: intptr_t): unnamedunion5-c
  c inline "(UnnamedUnion5)(((struct mbedtls_psa_pake_operation_t*)#1)->private_ctx)"

pub inline fun mbedtls-psa-pake-operation-tc/private_ctx(^s: mbedtls-psa-pake-operation-tc<s::S>): unnamedunion5-c
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_ctx)

pub inline fun mbedtls-psa-pake-operation-tcb/private_ctx(^s: mbedtls-psa-pake-operation-tcb<s::S>): unnamedunion5-c
  s.with-ptr(mbedtls-psa-pake-operation-t-ptr/private_ctx)

inline extern mbedtls-psa-pake-operation-t-ptr/set-private_ctx(s: intptr_t, private_ctx: unnamedunion5-c): ()
  c inline "((struct mbedtls_psa_pake_operation_t*)#1)->private_ctx = (UnnamedUnion5)#2"

pub inline fun mbedtls-psa-pake-operation-tc/set-private_ctx(^s: mbedtls-psa-pake-operation-tc<s::S>, private_ctx: unnamedunion5-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_ctx(private_ctx))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private_ctx(^s: mbedtls-psa-pake-operation-tcb<s::S>, private_ctx: unnamedunion5-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-t-ptr/set-private_ctx(private_ctx))

pub type unnamedunion5-c
pub alias unnamedunion5c = owned-c<unnamedunion5-c>
pub alias unnamedunion5cb<s::S> = borrowed-c<s,unnamedunion5-c>
pub alias unnamedunion5ca = owned-c<c-array<unnamedunion5>>

extern unnamedunion5/size-of(c: c-null<unnamedunion5-c>): int32
  c inline "sizeof(union UnnamedUnion5)"

pub fun unnamedunion5c(): unnamedunion5c
  malloc(?size-of=unnamedunion5/size-of)

pub fun unnamedunion5c-calloc(): unnamedunion5c
  malloc-c(?size-of=unnamedunion5/size-of)

pub fun unnamedunion5c-array(n: int): unnamedunion5ca
  malloc(n.int32, ?size-of=unnamedunion5/size-of)

pub fun unnamedunion5c-array-calloc(n: int): unnamedunion5ca
  malloc-c(n.int32, ?size-of=unnamedunion5/size-of)

inline extern unnamedunion5-ptr/private_dummy(s: intptr_t): int32
  c inline "(unsigned int)(((union UnnamedUnion5*)#1)->private_dummy)"

pub inline fun unnamedunion5c/private_dummy(^s: unnamedunion5c): int32
  s.with-ptr(unnamedunion5-ptr/private_dummy)

pub inline fun unnamedunion5cb/private_dummy(^s: unnamedunion5cb<s::S>): int32
  s.with-ptr(unnamedunion5-ptr/private_dummy)

inline extern unnamedunion5-ptr/set-private_dummy(s: intptr_t, private_dummy: int32): ()
  c inline "((union UnnamedUnion5*)#1)->private_dummy = (unsigned int)#2"

pub inline fun unnamedunion5c/set-private_dummy(^s: unnamedunion5c, private_dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion5-ptr/set-private_dummy(private_dummy))

pub inline fun unnamedunion5cb/set-private_dummy(^s: unnamedunion5cb<s::S>, private_dummy: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion5-ptr/set-private_dummy(private_dummy))

pub inline fun unnamedunion5c-wrapper/private_dummy(^s: unnamedunion5c): int
  s.with-ptr(unnamedunion5-ptr/private_dummy).int

pub inline fun unnamedunion5cb-wrapper/private_dummy(^s: unnamedunion5cb<s::S>): int
  s.with-ptr(unnamedunion5-ptr/private_dummy).int

pub inline fun unnamedunion5c-wrapper/set-private_dummy(^s: unnamedunion5c, private_dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion5-ptr/set-private_dummy(private_dummy.int32))

pub inline fun unnamedunion5cb-wrapper/set-private_dummy(^s: unnamedunion5cb<s::S>, private_dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion5-ptr/set-private_dummy(private_dummy.int32))

inline extern unnamedunion5-ptr/private_jpake(s: intptr_t): mbedtls-ecjpake-context-c
  c inline "(mbedtls_ecjpake_context)(((union UnnamedUnion5*)#1)->private_jpake)"

pub inline fun unnamedunion5c/private_jpake(^s: unnamedunion5c): mbedtls-ecjpake-context-c
  s.with-ptr(unnamedunion5-ptr/private_jpake)

pub inline fun unnamedunion5cb/private_jpake(^s: unnamedunion5cb<s::S>): mbedtls-ecjpake-context-c
  s.with-ptr(unnamedunion5-ptr/private_jpake)

inline extern unnamedunion5-ptr/set-private_jpake(s: intptr_t, private_jpake: mbedtls-ecjpake-context-c): ()
  c inline "((union UnnamedUnion5*)#1)->private_jpake = (mbedtls_ecjpake_context)#2"

pub inline fun unnamedunion5c/set-private_jpake(^s: unnamedunion5c, private_jpake: mbedtls-ecjpake-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion5-ptr/set-private_jpake(private_jpake))

pub inline fun unnamedunion5cb/set-private_jpake(^s: unnamedunion5cb<s::S>, private_jpake: mbedtls-ecjpake-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion5-ptr/set-private_jpake(private_jpake))

pub inline fun unnamedunion5c-wrapper/private_jpake(^s: unnamedunion5c): mbedtls-ecjpake-context
  s.with-ptr(unnamedunion5-ptr/private_jpake).to-koka

pub inline fun unnamedunion5cb-wrapper/private_jpake(^s: unnamedunion5cb<s::S>): mbedtls-ecjpake-context
  s.with-ptr(unnamedunion5-ptr/private_jpake).to-koka

pub inline fun unnamedunion5c-wrapper/set-private_jpake(^s: unnamedunion5c, private_jpake: mbedtls-ecjpake-context): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion5-ptr/set-private_jpake((struct mbedtls_ecjpake_context)(private_jpake)))

pub inline fun unnamedunion5cb-wrapper/set-private_jpake(^s: unnamedunion5cb<s::S>, private_jpake: mbedtls-ecjpake-context): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.unnamedunion5-ptr/set-private_jpake((struct mbedtls_ecjpake_context)(private_jpake)))

// EC J-PAKE context structure.
// 
// J-PAKE is a symmetric protocol, except for the identifiers used in
// Zero-Knowledge Proofs, and the serialization of the second message
// (KeyExchange) as defined by the Thread spec.
// 
// In order to benefit from this symmetry, we choose a different naming
// convention from the Thread v1.0 spec. Correspondence is indicated in the
// description as a pair C: client name, S: server name
pub struct mbedtls-ecjpake-context
  private-md-type: int32
  private-grp: mbedtls-ecp-group
  private-role: int32
  private-point-format: int
  private-xm1: mbedtls-ecp-point
  private-xm2: mbedtls-ecp-point
  private-xp1: mbedtls-ecp-point
  private-xp2: mbedtls-ecp-point
  private-xp: mbedtls-ecp-point
  private-xm11: mbedtls-mpi
  private-xm21: mbedtls-mpi
  private-s: mbedtls-mpi

pub type mbedtls-ecjpake-context-c
pub alias mbedtls-ecjpake-contextc = owned-c<mbedtls-ecjpake-context-c>
pub alias mbedtls-ecjpake-contextcb<s::S> = borrowed-c<s,mbedtls-ecjpake-context-c>
pub alias mbedtls-ecjpake-contextca = owned-c<c-array<mbedtls-ecjpake-context>>

extern mbedtls-ecjpake-context/size-of(c: c-null<mbedtls-ecjpake-context-c>): int32
  c inline "sizeof(struct mbedtls_ecjpake_context)"

pub fun mbedtls-ecjpake-contextc(): mbedtls-ecjpake-contextc
  malloc(?size-of=mbedtls-ecjpake-context/size-of)

pub fun mbedtls-ecjpake-contextc-calloc(): mbedtls-ecjpake-contextc
  malloc-c(?size-of=mbedtls-ecjpake-context/size-of)

pub fun mbedtls-ecjpake-contextc-array(n: int): mbedtls-ecjpake-contextca
  malloc(n.int32, ?size-of=mbedtls-ecjpake-context/size-of)

pub fun mbedtls-ecjpake-contextc-array-calloc(n: int): mbedtls-ecjpake-contextca
  malloc-c(n.int32, ?size-of=mbedtls-ecjpake-context/size-of)

inline extern mbedtls-ecjpake-context-ptr/private-md-type(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_ecjpake_context*)#1)->private_md_type)"

pub inline fun mbedtls-ecjpake-contextc/private-md-type(^s: mbedtls-ecjpake-contextc): int32
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-md-type)

pub inline fun mbedtls-ecjpake-contextcb/private-md-type(^s: mbedtls-ecjpake-contextcb<s::S>): int32
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-md-type)

inline extern mbedtls-ecjpake-context-ptr/set-private-md-type(s: intptr_t, private-md-type: int32): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_md_type = (int32_t)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-md-type(^s: mbedtls-ecjpake-contextc, private-md-type: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-md-type(private-md-type))

pub inline fun mbedtls-ecjpake-contextcb/set-private-md-type(^s: mbedtls-ecjpake-contextcb<s::S>, private-md-type: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-md-type(private-md-type))

inline extern mbedtls-ecjpake-context-ptr/private-grp(s: intptr_t): mbedtls-ecp-group-c
  c inline "(mbedtls_ecp_group)(((struct mbedtls_ecjpake_context*)#1)->private_grp)"

pub inline fun mbedtls-ecjpake-contextc/private-grp(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-group-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-grp)

pub inline fun mbedtls-ecjpake-contextcb/private-grp(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-group-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-grp)

inline extern mbedtls-ecjpake-context-ptr/set-private-grp(s: intptr_t, private-grp: mbedtls-ecp-group-c): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_grp = (mbedtls_ecp_group)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-grp(^s: mbedtls-ecjpake-contextc, private-grp: mbedtls-ecp-group-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-grp(private-grp))

pub inline fun mbedtls-ecjpake-contextcb/set-private-grp(^s: mbedtls-ecjpake-contextcb<s::S>, private-grp: mbedtls-ecp-group-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-grp(private-grp))

pub inline fun mbedtls-ecjpake-contextc-wrapper/private-grp(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-group
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-grp).to-koka

pub inline fun mbedtls-ecjpake-contextcb-wrapper/private-grp(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-group
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-grp).to-koka

pub inline fun mbedtls-ecjpake-contextc-wrapper/set-private-grp(^s: mbedtls-ecjpake-contextc, private-grp: mbedtls-ecp-group): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-grp((struct mbedtls_ecp_group)(private-grp)))

pub inline fun mbedtls-ecjpake-contextcb-wrapper/set-private-grp(^s: mbedtls-ecjpake-contextcb<s::S>, private-grp: mbedtls-ecp-group): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-grp((struct mbedtls_ecp_group)(private-grp)))

inline extern mbedtls-ecjpake-context-ptr/private-role(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_ecjpake_context*)#1)->private_role)"

pub inline fun mbedtls-ecjpake-contextc/private-role(^s: mbedtls-ecjpake-contextc): int32
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-role)

pub inline fun mbedtls-ecjpake-contextcb/private-role(^s: mbedtls-ecjpake-contextcb<s::S>): int32
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-role)

inline extern mbedtls-ecjpake-context-ptr/set-private-role(s: intptr_t, private-role: int32): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_role = (int32_t)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-role(^s: mbedtls-ecjpake-contextc, private-role: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-role(private-role))

pub inline fun mbedtls-ecjpake-contextcb/set-private-role(^s: mbedtls-ecjpake-contextcb<s::S>, private-role: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-role(private-role))

inline extern mbedtls-ecjpake-context-ptr/private-point-format(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_ecjpake_context*)#1)->private_point_format)"

pub inline fun mbedtls-ecjpake-contextc/private-point-format(^s: mbedtls-ecjpake-contextc): int32
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-point-format)

pub inline fun mbedtls-ecjpake-contextcb/private-point-format(^s: mbedtls-ecjpake-contextcb<s::S>): int32
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-point-format)

inline extern mbedtls-ecjpake-context-ptr/set-private-point-format(s: intptr_t, private-point-format: int32): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_point_format = (int)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-point-format(^s: mbedtls-ecjpake-contextc, private-point-format: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-point-format(private-point-format))

pub inline fun mbedtls-ecjpake-contextcb/set-private-point-format(^s: mbedtls-ecjpake-contextcb<s::S>, private-point-format: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-point-format(private-point-format))

pub inline fun mbedtls-ecjpake-contextc-wrapper/private-point-format(^s: mbedtls-ecjpake-contextc): int
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-point-format).int

pub inline fun mbedtls-ecjpake-contextcb-wrapper/private-point-format(^s: mbedtls-ecjpake-contextcb<s::S>): int
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-point-format).int

pub inline fun mbedtls-ecjpake-contextc-wrapper/set-private-point-format(^s: mbedtls-ecjpake-contextc, private-point-format: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-point-format(private-point-format.int32))

pub inline fun mbedtls-ecjpake-contextcb-wrapper/set-private-point-format(^s: mbedtls-ecjpake-contextcb<s::S>, private-point-format: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-point-format(private-point-format.int32))

inline extern mbedtls-ecjpake-context-ptr/private-xm1(s: intptr_t): mbedtls-ecp-point-c
  c inline "(mbedtls_ecp_point)(((struct mbedtls_ecjpake_context*)#1)->private_Xm1)"

pub inline fun mbedtls-ecjpake-contextc/private-xm1(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm1)

pub inline fun mbedtls-ecjpake-contextcb/private-xm1(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm1)

inline extern mbedtls-ecjpake-context-ptr/set-private-xm1(s: intptr_t, private-xm1: mbedtls-ecp-point-c): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_Xm1 = (mbedtls_ecp_point)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-xm1(^s: mbedtls-ecjpake-contextc, private-xm1: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm1(private-xm1))

pub inline fun mbedtls-ecjpake-contextcb/set-private-xm1(^s: mbedtls-ecjpake-contextcb<s::S>, private-xm1: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm1(private-xm1))

pub inline fun mbedtls-ecjpake-contextc-wrapper/private-xm1(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm1).to-koka

pub inline fun mbedtls-ecjpake-contextcb-wrapper/private-xm1(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm1).to-koka

pub inline fun mbedtls-ecjpake-contextc-wrapper/set-private-xm1(^s: mbedtls-ecjpake-contextc, private-xm1: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm1((struct mbedtls_ecp_point)(private-xm1)))

pub inline fun mbedtls-ecjpake-contextcb-wrapper/set-private-xm1(^s: mbedtls-ecjpake-contextcb<s::S>, private-xm1: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm1((struct mbedtls_ecp_point)(private-xm1)))

inline extern mbedtls-ecjpake-context-ptr/private-xm2(s: intptr_t): mbedtls-ecp-point-c
  c inline "(mbedtls_ecp_point)(((struct mbedtls_ecjpake_context*)#1)->private_Xm2)"

pub inline fun mbedtls-ecjpake-contextc/private-xm2(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm2)

pub inline fun mbedtls-ecjpake-contextcb/private-xm2(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm2)

inline extern mbedtls-ecjpake-context-ptr/set-private-xm2(s: intptr_t, private-xm2: mbedtls-ecp-point-c): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_Xm2 = (mbedtls_ecp_point)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-xm2(^s: mbedtls-ecjpake-contextc, private-xm2: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm2(private-xm2))

pub inline fun mbedtls-ecjpake-contextcb/set-private-xm2(^s: mbedtls-ecjpake-contextcb<s::S>, private-xm2: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm2(private-xm2))

pub inline fun mbedtls-ecjpake-contextc-wrapper/private-xm2(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm2).to-koka

pub inline fun mbedtls-ecjpake-contextcb-wrapper/private-xm2(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm2).to-koka

pub inline fun mbedtls-ecjpake-contextc-wrapper/set-private-xm2(^s: mbedtls-ecjpake-contextc, private-xm2: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm2((struct mbedtls_ecp_point)(private-xm2)))

pub inline fun mbedtls-ecjpake-contextcb-wrapper/set-private-xm2(^s: mbedtls-ecjpake-contextcb<s::S>, private-xm2: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm2((struct mbedtls_ecp_point)(private-xm2)))

inline extern mbedtls-ecjpake-context-ptr/private-xp1(s: intptr_t): mbedtls-ecp-point-c
  c inline "(mbedtls_ecp_point)(((struct mbedtls_ecjpake_context*)#1)->private_Xp1)"

pub inline fun mbedtls-ecjpake-contextc/private-xp1(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp1)

pub inline fun mbedtls-ecjpake-contextcb/private-xp1(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp1)

inline extern mbedtls-ecjpake-context-ptr/set-private-xp1(s: intptr_t, private-xp1: mbedtls-ecp-point-c): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_Xp1 = (mbedtls_ecp_point)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-xp1(^s: mbedtls-ecjpake-contextc, private-xp1: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp1(private-xp1))

pub inline fun mbedtls-ecjpake-contextcb/set-private-xp1(^s: mbedtls-ecjpake-contextcb<s::S>, private-xp1: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp1(private-xp1))

pub inline fun mbedtls-ecjpake-contextc-wrapper/private-xp1(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp1).to-koka

pub inline fun mbedtls-ecjpake-contextcb-wrapper/private-xp1(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp1).to-koka

pub inline fun mbedtls-ecjpake-contextc-wrapper/set-private-xp1(^s: mbedtls-ecjpake-contextc, private-xp1: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp1((struct mbedtls_ecp_point)(private-xp1)))

pub inline fun mbedtls-ecjpake-contextcb-wrapper/set-private-xp1(^s: mbedtls-ecjpake-contextcb<s::S>, private-xp1: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp1((struct mbedtls_ecp_point)(private-xp1)))

inline extern mbedtls-ecjpake-context-ptr/private-xp2(s: intptr_t): mbedtls-ecp-point-c
  c inline "(mbedtls_ecp_point)(((struct mbedtls_ecjpake_context*)#1)->private_Xp2)"

pub inline fun mbedtls-ecjpake-contextc/private-xp2(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp2)

pub inline fun mbedtls-ecjpake-contextcb/private-xp2(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp2)

inline extern mbedtls-ecjpake-context-ptr/set-private-xp2(s: intptr_t, private-xp2: mbedtls-ecp-point-c): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_Xp2 = (mbedtls_ecp_point)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-xp2(^s: mbedtls-ecjpake-contextc, private-xp2: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp2(private-xp2))

pub inline fun mbedtls-ecjpake-contextcb/set-private-xp2(^s: mbedtls-ecjpake-contextcb<s::S>, private-xp2: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp2(private-xp2))

pub inline fun mbedtls-ecjpake-contextc-wrapper/private-xp2(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp2).to-koka

pub inline fun mbedtls-ecjpake-contextcb-wrapper/private-xp2(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp2).to-koka

pub inline fun mbedtls-ecjpake-contextc-wrapper/set-private-xp2(^s: mbedtls-ecjpake-contextc, private-xp2: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp2((struct mbedtls_ecp_point)(private-xp2)))

pub inline fun mbedtls-ecjpake-contextcb-wrapper/set-private-xp2(^s: mbedtls-ecjpake-contextcb<s::S>, private-xp2: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp2((struct mbedtls_ecp_point)(private-xp2)))

inline extern mbedtls-ecjpake-context-ptr/private-xp(s: intptr_t): mbedtls-ecp-point-c
  c inline "(mbedtls_ecp_point)(((struct mbedtls_ecjpake_context*)#1)->private_Xp)"

pub inline fun mbedtls-ecjpake-contextc/private-xp(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp)

pub inline fun mbedtls-ecjpake-contextcb/private-xp(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp)

inline extern mbedtls-ecjpake-context-ptr/set-private-xp(s: intptr_t, private-xp: mbedtls-ecp-point-c): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_Xp = (mbedtls_ecp_point)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-xp(^s: mbedtls-ecjpake-contextc, private-xp: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp(private-xp))

pub inline fun mbedtls-ecjpake-contextcb/set-private-xp(^s: mbedtls-ecjpake-contextcb<s::S>, private-xp: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp(private-xp))

pub inline fun mbedtls-ecjpake-contextc-wrapper/private-xp(^s: mbedtls-ecjpake-contextc): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp).to-koka

pub inline fun mbedtls-ecjpake-contextcb-wrapper/private-xp(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xp).to-koka

pub inline fun mbedtls-ecjpake-contextc-wrapper/set-private-xp(^s: mbedtls-ecjpake-contextc, private-xp: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp((struct mbedtls_ecp_point)(private-xp)))

pub inline fun mbedtls-ecjpake-contextcb-wrapper/set-private-xp(^s: mbedtls-ecjpake-contextcb<s::S>, private-xp: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xp((struct mbedtls_ecp_point)(private-xp)))

inline extern mbedtls-ecjpake-context-ptr/private-xm11(s: intptr_t): mbedtls-mpi-c
  c inline "(mbedtls_mpi)(((struct mbedtls_ecjpake_context*)#1)->private_xm1)"

pub inline fun mbedtls-ecjpake-contextc/private-xm11(^s: mbedtls-ecjpake-contextc): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm11)

pub inline fun mbedtls-ecjpake-contextcb/private-xm11(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm11)

inline extern mbedtls-ecjpake-context-ptr/set-private-xm11(s: intptr_t, private-xm11: mbedtls-mpi-c): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_xm1 = (mbedtls_mpi)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-xm11(^s: mbedtls-ecjpake-contextc, private-xm11: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm11(private-xm11))

pub inline fun mbedtls-ecjpake-contextcb/set-private-xm11(^s: mbedtls-ecjpake-contextcb<s::S>, private-xm11: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm11(private-xm11))

pub inline fun mbedtls-ecjpake-contextc-wrapper/private-xm11(^s: mbedtls-ecjpake-contextc): mbedtls-mpi
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm11).to-koka

pub inline fun mbedtls-ecjpake-contextcb-wrapper/private-xm11(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-mpi
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm11).to-koka

pub inline fun mbedtls-ecjpake-contextc-wrapper/set-private-xm11(^s: mbedtls-ecjpake-contextc, private-xm11: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm11((struct mbedtls_mpi)(private-xm11)))

pub inline fun mbedtls-ecjpake-contextcb-wrapper/set-private-xm11(^s: mbedtls-ecjpake-contextcb<s::S>, private-xm11: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm11((struct mbedtls_mpi)(private-xm11)))

inline extern mbedtls-ecjpake-context-ptr/private-xm21(s: intptr_t): mbedtls-mpi-c
  c inline "(mbedtls_mpi)(((struct mbedtls_ecjpake_context*)#1)->private_xm2)"

pub inline fun mbedtls-ecjpake-contextc/private-xm21(^s: mbedtls-ecjpake-contextc): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm21)

pub inline fun mbedtls-ecjpake-contextcb/private-xm21(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm21)

inline extern mbedtls-ecjpake-context-ptr/set-private-xm21(s: intptr_t, private-xm21: mbedtls-mpi-c): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_xm2 = (mbedtls_mpi)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-xm21(^s: mbedtls-ecjpake-contextc, private-xm21: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm21(private-xm21))

pub inline fun mbedtls-ecjpake-contextcb/set-private-xm21(^s: mbedtls-ecjpake-contextcb<s::S>, private-xm21: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm21(private-xm21))

pub inline fun mbedtls-ecjpake-contextc-wrapper/private-xm21(^s: mbedtls-ecjpake-contextc): mbedtls-mpi
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm21).to-koka

pub inline fun mbedtls-ecjpake-contextcb-wrapper/private-xm21(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-mpi
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-xm21).to-koka

pub inline fun mbedtls-ecjpake-contextc-wrapper/set-private-xm21(^s: mbedtls-ecjpake-contextc, private-xm21: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm21((struct mbedtls_mpi)(private-xm21)))

pub inline fun mbedtls-ecjpake-contextcb-wrapper/set-private-xm21(^s: mbedtls-ecjpake-contextcb<s::S>, private-xm21: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-xm21((struct mbedtls_mpi)(private-xm21)))

inline extern mbedtls-ecjpake-context-ptr/private-s(s: intptr_t): mbedtls-mpi-c
  c inline "(mbedtls_mpi)(((struct mbedtls_ecjpake_context*)#1)->private_s)"

pub inline fun mbedtls-ecjpake-contextc/private-s(^s: mbedtls-ecjpake-contextc): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-s)

pub inline fun mbedtls-ecjpake-contextcb/private-s(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-s)

inline extern mbedtls-ecjpake-context-ptr/set-private-s(s: intptr_t, private-s: mbedtls-mpi-c): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_s = (mbedtls_mpi)#2"

pub inline fun mbedtls-ecjpake-contextc/set-private-s(^s: mbedtls-ecjpake-contextc, private-s: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-s(private-s))

pub inline fun mbedtls-ecjpake-contextcb/set-private-s(^s: mbedtls-ecjpake-contextcb<s::S>, private-s: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-s(private-s))

pub inline fun mbedtls-ecjpake-contextc-wrapper/private-s(^s: mbedtls-ecjpake-contextc): mbedtls-mpi
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-s).to-koka

pub inline fun mbedtls-ecjpake-contextcb-wrapper/private-s(^s: mbedtls-ecjpake-contextcb<s::S>): mbedtls-mpi
  s.with-ptr(mbedtls-ecjpake-context-ptr/private-s).to-koka

pub inline fun mbedtls-ecjpake-contextc-wrapper/set-private-s(^s: mbedtls-ecjpake-contextc, private-s: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-s((struct mbedtls_mpi)(private-s)))

pub inline fun mbedtls-ecjpake-contextcb-wrapper/set-private-s(^s: mbedtls-ecjpake-contextcb<s::S>, private-s: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-context-ptr/set-private-s((struct mbedtls_mpi)(private-s)))

pub fun mbedtls-ecjpake-context/to-koka(s: mbedtls-ecjpake-contextc): mbedtls-ecjpake-context
  Mbedtls-ecjpake-context(s.mbedtls-ecjpake-contextc/private-md-type, s.mbedtls-ecjpake-contextc/private-grp.to-koka.to-koka, s.mbedtls-ecjpake-contextc/private-role, s.mbedtls-ecjpake-contextc/private-point-format.int, s.mbedtls-ecjpake-contextc/private-xm1.to-koka.to-koka, s.mbedtls-ecjpake-contextc/private-xm2.to-koka.to-koka, s.mbedtls-ecjpake-contextc/private-xp1.to-koka.to-koka, s.mbedtls-ecjpake-contextc/private-xp2.to-koka.to-koka, s.mbedtls-ecjpake-contextc/private-xp.to-koka.to-koka, s.mbedtls-ecjpake-contextc/private-xm11.to-koka.to-koka, s.mbedtls-ecjpake-contextc/private-xm21.to-koka.to-koka, s.mbedtls-ecjpake-contextc/private-s.to-koka.to-koka)

// \brief           The ECP group structure.
// 
// We consider two types of curve equations:
// <ul><li>Short Weierstrass: <code>y^2 = x^3 + A x + B mod P</code>
// (SEC1 + RFC-4492)</li>
// <li>Montgomery: <code>y^2 = x^3 + A x^2 + x mod P</code> (Curve25519,
// Curve448)</li></ul>
// In both cases, the generator (\p G) for a prime-order subgroup is fixed.
// 
// For Short Weierstrass, this subgroup is the whole curve, and its
// cardinality is denoted by \p N. Our code requires that \p N is an
// odd prime as mbedtls_ecp_mul() requires an odd number, and
// mbedtls_ecdsa_sign() requires that it is prime for blinding purposes.
// 
// The default implementation only initializes \p A without setting it to the
// authentic value for curves with <code>A = -3</code>(SECP256R1, etc), in which
// case you need to load \p A by yourself when using domain parameters directly,
// for example:
// \code
// mbedtls_mpi_init(&A);
// mbedtls_ecp_group_init(&grp);
// CHECK_RETURN(mbedtls_ecp_group_load(&grp, grp_id));
// if (mbedtls_ecp_group_a_is_minus_3(&grp)) {
// CHECK_RETURN(mbedtls_mpi_sub_int(&A, &grp.P, 3));
// } else {
// CHECK_RETURN(mbedtls_mpi_copy(&A, &grp.A));
// }
// 
// do_something_with_a(&A);
// 
// cleanup:
// mbedtls_mpi_free(&A);
// mbedtls_ecp_group_free(&grp);
// \endcode
// 
// For Montgomery curves, we do not store \p A, but <code>(A + 2) / 4</code>,
// which is the quantity used in the formulas. Additionally, \p nbits is
// not the size of \p N but the required size for private keys.
// 
// If \p modp is NULL, reduction modulo \p P is done using a generic algorithm.
// Otherwise, \p modp must point to a function that takes an \p mbedtls_mpi in the
// range of <code>0..2^(2*pbits)-1</code>, and transforms it in-place to an integer
// which is congruent mod \p P to the given MPI, and is close enough to \p pbits
// in size, so that it may be efficiently brought in the 0..P-1 range by a few
// additions or subtractions. Therefore, it is only an approximative modular
// reduction. It must return 0 on success and non-zero on failure.
// 
// \note        Alternative implementations of the ECP module must obey the
// following constraints.
// * Group IDs must be distinct: if two group structures have
// the same ID, then they must be identical.
// * The fields \c id, \c P, \c A, \c B, \c G, \c N,
// \c pbits and \c nbits must have the same type and semantics
// as in the built-in implementation.
// They must be available for reading, but direct modification
// of these fields does not need to be supported.
// They do not need to be at the same offset in the structure.
pub struct mbedtls-ecp-group
  // !< An internal group identifier.
  id: int32
  // !< The prime modulus of the base field.
  p: mbedtls-mpi
  // !< For Short Weierstrass: \p A in the equation. Note that
  // \p A is not set to the authentic value in some cases.
  // Refer to detailed description of ::mbedtls_ecp_group if
  // using domain parameters in the structure.
  // For Montgomery curves: <code>(A + 2) / 4</code>.
  a: mbedtls-mpi
  // !< For Short Weierstrass: \p B in the equation.
  // For Montgomery curves: unused.
  b: mbedtls-mpi
  // !< The generator of the subgroup used.
  g: mbedtls-ecp-point
  // !< The order of \p G.
  n: mbedtls-mpi
  // !< The number of bits in \p P.
  pbits: ssize_t
  // !< For Short Weierstrass: The number of bits in \p P.
  // For Montgomery curves: the number of bits in the
  // private keys.
  nbits: ssize_t
  private-h: int
  private-modp: owned-c<((intptr_t) -> int32)>
  private-t-pre: owned-c<((intptr_t, intptr_t) -> int32)>
  private-t-post: owned-c<((intptr_t, intptr_t) -> int32)>
  private-t-data: owned-c<()>
  private-t: mbedtls-ecp-point
  private-t-size: ssize_t

pub type mbedtls-ecp-group-c
pub alias mbedtls-ecp-groupc = owned-c<mbedtls-ecp-group-c>
pub alias mbedtls-ecp-groupcb<s::S> = borrowed-c<s,mbedtls-ecp-group-c>
pub alias mbedtls-ecp-groupca = owned-c<c-array<mbedtls-ecp-group>>

extern mbedtls-ecp-group/size-of(c: c-null<mbedtls-ecp-group-c>): int32
  c inline "sizeof(struct mbedtls_ecp_group)"

pub fun mbedtls-ecp-groupc(): mbedtls-ecp-groupc
  malloc(?size-of=mbedtls-ecp-group/size-of)

pub fun mbedtls-ecp-groupc-calloc(): mbedtls-ecp-groupc
  malloc-c(?size-of=mbedtls-ecp-group/size-of)

pub fun mbedtls-ecp-groupc-array(n: int): mbedtls-ecp-groupca
  malloc(n.int32, ?size-of=mbedtls-ecp-group/size-of)

pub fun mbedtls-ecp-groupc-array-calloc(n: int): mbedtls-ecp-groupca
  malloc-c(n.int32, ?size-of=mbedtls-ecp-group/size-of)

inline extern mbedtls-ecp-group-ptr/id(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_ecp_group*)#1)->id)"

pub inline fun mbedtls-ecp-groupc/id(^s: mbedtls-ecp-groupc): int32
  s.with-ptr(mbedtls-ecp-group-ptr/id)

pub inline fun mbedtls-ecp-groupcb/id(^s: mbedtls-ecp-groupcb<s::S>): int32
  s.with-ptr(mbedtls-ecp-group-ptr/id)

inline extern mbedtls-ecp-group-ptr/set-id(s: intptr_t, id: int32): ()
  c inline "((struct mbedtls_ecp_group*)#1)->id = (int32_t)#2"

pub inline fun mbedtls-ecp-groupc/set-id(^s: mbedtls-ecp-groupc, id: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-id(id))

pub inline fun mbedtls-ecp-groupcb/set-id(^s: mbedtls-ecp-groupcb<s::S>, id: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-id(id))

inline extern mbedtls-ecp-group-ptr/p(s: intptr_t): mbedtls-mpi-c
  c inline "(mbedtls_mpi)(((struct mbedtls_ecp_group*)#1)->P)"

pub inline fun mbedtls-ecp-groupc/p(^s: mbedtls-ecp-groupc): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-group-ptr/p)

pub inline fun mbedtls-ecp-groupcb/p(^s: mbedtls-ecp-groupcb<s::S>): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-group-ptr/p)

inline extern mbedtls-ecp-group-ptr/set-p(s: intptr_t, p: mbedtls-mpi-c): ()
  c inline "((struct mbedtls_ecp_group*)#1)->P = (mbedtls_mpi)#2"

pub inline fun mbedtls-ecp-groupc/set-p(^s: mbedtls-ecp-groupc, p: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-p(p))

pub inline fun mbedtls-ecp-groupcb/set-p(^s: mbedtls-ecp-groupcb<s::S>, p: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-p(p))

pub inline fun mbedtls-ecp-groupc-wrapper/p(^s: mbedtls-ecp-groupc): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-group-ptr/p).to-koka

pub inline fun mbedtls-ecp-groupcb-wrapper/p(^s: mbedtls-ecp-groupcb<s::S>): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-group-ptr/p).to-koka

pub inline fun mbedtls-ecp-groupc-wrapper/set-p(^s: mbedtls-ecp-groupc, p: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-p((struct mbedtls_mpi)(p)))

pub inline fun mbedtls-ecp-groupcb-wrapper/set-p(^s: mbedtls-ecp-groupcb<s::S>, p: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-p((struct mbedtls_mpi)(p)))

inline extern mbedtls-ecp-group-ptr/a(s: intptr_t): mbedtls-mpi-c
  c inline "(mbedtls_mpi)(((struct mbedtls_ecp_group*)#1)->A)"

pub inline fun mbedtls-ecp-groupc/a(^s: mbedtls-ecp-groupc): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-group-ptr/a)

pub inline fun mbedtls-ecp-groupcb/a(^s: mbedtls-ecp-groupcb<s::S>): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-group-ptr/a)

inline extern mbedtls-ecp-group-ptr/set-a(s: intptr_t, a: mbedtls-mpi-c): ()
  c inline "((struct mbedtls_ecp_group*)#1)->A = (mbedtls_mpi)#2"

pub inline fun mbedtls-ecp-groupc/set-a(^s: mbedtls-ecp-groupc, a: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-a(a))

pub inline fun mbedtls-ecp-groupcb/set-a(^s: mbedtls-ecp-groupcb<s::S>, a: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-a(a))

pub inline fun mbedtls-ecp-groupc-wrapper/a(^s: mbedtls-ecp-groupc): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-group-ptr/a).to-koka

pub inline fun mbedtls-ecp-groupcb-wrapper/a(^s: mbedtls-ecp-groupcb<s::S>): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-group-ptr/a).to-koka

pub inline fun mbedtls-ecp-groupc-wrapper/set-a(^s: mbedtls-ecp-groupc, a: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-a((struct mbedtls_mpi)(a)))

pub inline fun mbedtls-ecp-groupcb-wrapper/set-a(^s: mbedtls-ecp-groupcb<s::S>, a: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-a((struct mbedtls_mpi)(a)))

inline extern mbedtls-ecp-group-ptr/b(s: intptr_t): mbedtls-mpi-c
  c inline "(mbedtls_mpi)(((struct mbedtls_ecp_group*)#1)->B)"

pub inline fun mbedtls-ecp-groupc/b(^s: mbedtls-ecp-groupc): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-group-ptr/b)

pub inline fun mbedtls-ecp-groupcb/b(^s: mbedtls-ecp-groupcb<s::S>): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-group-ptr/b)

inline extern mbedtls-ecp-group-ptr/set-b(s: intptr_t, b: mbedtls-mpi-c): ()
  c inline "((struct mbedtls_ecp_group*)#1)->B = (mbedtls_mpi)#2"

pub inline fun mbedtls-ecp-groupc/set-b(^s: mbedtls-ecp-groupc, b: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-b(b))

pub inline fun mbedtls-ecp-groupcb/set-b(^s: mbedtls-ecp-groupcb<s::S>, b: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-b(b))

pub inline fun mbedtls-ecp-groupc-wrapper/b(^s: mbedtls-ecp-groupc): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-group-ptr/b).to-koka

pub inline fun mbedtls-ecp-groupcb-wrapper/b(^s: mbedtls-ecp-groupcb<s::S>): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-group-ptr/b).to-koka

pub inline fun mbedtls-ecp-groupc-wrapper/set-b(^s: mbedtls-ecp-groupc, b: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-b((struct mbedtls_mpi)(b)))

pub inline fun mbedtls-ecp-groupcb-wrapper/set-b(^s: mbedtls-ecp-groupcb<s::S>, b: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-b((struct mbedtls_mpi)(b)))

inline extern mbedtls-ecp-group-ptr/g(s: intptr_t): mbedtls-ecp-point-c
  c inline "(mbedtls_ecp_point)(((struct mbedtls_ecp_group*)#1)->G)"

pub inline fun mbedtls-ecp-groupc/g(^s: mbedtls-ecp-groupc): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecp-group-ptr/g)

pub inline fun mbedtls-ecp-groupcb/g(^s: mbedtls-ecp-groupcb<s::S>): mbedtls-ecp-point-c
  s.with-ptr(mbedtls-ecp-group-ptr/g)

inline extern mbedtls-ecp-group-ptr/set-g(s: intptr_t, g: mbedtls-ecp-point-c): ()
  c inline "((struct mbedtls_ecp_group*)#1)->G = (mbedtls_ecp_point)#2"

pub inline fun mbedtls-ecp-groupc/set-g(^s: mbedtls-ecp-groupc, g: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-g(g))

pub inline fun mbedtls-ecp-groupcb/set-g(^s: mbedtls-ecp-groupcb<s::S>, g: mbedtls-ecp-point-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-g(g))

pub inline fun mbedtls-ecp-groupc-wrapper/g(^s: mbedtls-ecp-groupc): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecp-group-ptr/g).to-koka

pub inline fun mbedtls-ecp-groupcb-wrapper/g(^s: mbedtls-ecp-groupcb<s::S>): mbedtls-ecp-point
  s.with-ptr(mbedtls-ecp-group-ptr/g).to-koka

pub inline fun mbedtls-ecp-groupc-wrapper/set-g(^s: mbedtls-ecp-groupc, g: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-g((struct mbedtls_ecp_point)(g)))

pub inline fun mbedtls-ecp-groupcb-wrapper/set-g(^s: mbedtls-ecp-groupcb<s::S>, g: mbedtls-ecp-point): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-g((struct mbedtls_ecp_point)(g)))

inline extern mbedtls-ecp-group-ptr/n(s: intptr_t): mbedtls-mpi-c
  c inline "(mbedtls_mpi)(((struct mbedtls_ecp_group*)#1)->N)"

pub inline fun mbedtls-ecp-groupc/n(^s: mbedtls-ecp-groupc): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-group-ptr/n)

pub inline fun mbedtls-ecp-groupcb/n(^s: mbedtls-ecp-groupcb<s::S>): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-group-ptr/n)

inline extern mbedtls-ecp-group-ptr/set-n(s: intptr_t, n: mbedtls-mpi-c): ()
  c inline "((struct mbedtls_ecp_group*)#1)->N = (mbedtls_mpi)#2"

pub inline fun mbedtls-ecp-groupc/set-n(^s: mbedtls-ecp-groupc, n: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-n(n))

pub inline fun mbedtls-ecp-groupcb/set-n(^s: mbedtls-ecp-groupcb<s::S>, n: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-n(n))

pub inline fun mbedtls-ecp-groupc-wrapper/n(^s: mbedtls-ecp-groupc): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-group-ptr/n).to-koka

pub inline fun mbedtls-ecp-groupcb-wrapper/n(^s: mbedtls-ecp-groupcb<s::S>): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-group-ptr/n).to-koka

pub inline fun mbedtls-ecp-groupc-wrapper/set-n(^s: mbedtls-ecp-groupc, n: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-n((struct mbedtls_mpi)(n)))

pub inline fun mbedtls-ecp-groupcb-wrapper/set-n(^s: mbedtls-ecp-groupcb<s::S>, n: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-n((struct mbedtls_mpi)(n)))

inline extern mbedtls-ecp-group-ptr/pbits(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_ecp_group*)#1)->pbits)"

pub inline fun mbedtls-ecp-groupc/pbits(^s: mbedtls-ecp-groupc): ssize_t
  s.with-ptr(mbedtls-ecp-group-ptr/pbits)

pub inline fun mbedtls-ecp-groupcb/pbits(^s: mbedtls-ecp-groupcb<s::S>): ssize_t
  s.with-ptr(mbedtls-ecp-group-ptr/pbits)

inline extern mbedtls-ecp-group-ptr/set-pbits(s: intptr_t, pbits: ssize_t): ()
  c inline "((struct mbedtls_ecp_group*)#1)->pbits = (ssize_t)#2"

pub inline fun mbedtls-ecp-groupc/set-pbits(^s: mbedtls-ecp-groupc, pbits: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-pbits(pbits))

pub inline fun mbedtls-ecp-groupcb/set-pbits(^s: mbedtls-ecp-groupcb<s::S>, pbits: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-pbits(pbits))

inline extern mbedtls-ecp-group-ptr/nbits(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_ecp_group*)#1)->nbits)"

pub inline fun mbedtls-ecp-groupc/nbits(^s: mbedtls-ecp-groupc): ssize_t
  s.with-ptr(mbedtls-ecp-group-ptr/nbits)

pub inline fun mbedtls-ecp-groupcb/nbits(^s: mbedtls-ecp-groupcb<s::S>): ssize_t
  s.with-ptr(mbedtls-ecp-group-ptr/nbits)

inline extern mbedtls-ecp-group-ptr/set-nbits(s: intptr_t, nbits: ssize_t): ()
  c inline "((struct mbedtls_ecp_group*)#1)->nbits = (ssize_t)#2"

pub inline fun mbedtls-ecp-groupc/set-nbits(^s: mbedtls-ecp-groupc, nbits: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-nbits(nbits))

pub inline fun mbedtls-ecp-groupcb/set-nbits(^s: mbedtls-ecp-groupcb<s::S>, nbits: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-nbits(nbits))

inline extern mbedtls-ecp-group-ptr/private-h(s: intptr_t): int32
  c inline "(unsigned int)(((struct mbedtls_ecp_group*)#1)->private_h)"

pub inline fun mbedtls-ecp-groupc/private-h(^s: mbedtls-ecp-groupc): int32
  s.with-ptr(mbedtls-ecp-group-ptr/private-h)

pub inline fun mbedtls-ecp-groupcb/private-h(^s: mbedtls-ecp-groupcb<s::S>): int32
  s.with-ptr(mbedtls-ecp-group-ptr/private-h)

inline extern mbedtls-ecp-group-ptr/set-private-h(s: intptr_t, private-h: int32): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_h = (unsigned int)#2"

pub inline fun mbedtls-ecp-groupc/set-private-h(^s: mbedtls-ecp-groupc, private-h: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-h(private-h))

pub inline fun mbedtls-ecp-groupcb/set-private-h(^s: mbedtls-ecp-groupcb<s::S>, private-h: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-h(private-h))

pub inline fun mbedtls-ecp-groupc-wrapper/private-h(^s: mbedtls-ecp-groupc): int
  s.with-ptr(mbedtls-ecp-group-ptr/private-h).int

pub inline fun mbedtls-ecp-groupcb-wrapper/private-h(^s: mbedtls-ecp-groupcb<s::S>): int
  s.with-ptr(mbedtls-ecp-group-ptr/private-h).int

pub inline fun mbedtls-ecp-groupc-wrapper/set-private-h(^s: mbedtls-ecp-groupc, private-h: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-h(private-h.int32))

pub inline fun mbedtls-ecp-groupcb-wrapper/set-private-h(^s: mbedtls-ecp-groupcb<s::S>, private-h: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-h(private-h.int32))

inline extern mbedtls-ecp-group-ptr/private-modp(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_ecp_group*)#1)->private_modp)"

pub inline fun mbedtls-ecp-groupc/private-modp(^s: mbedtls-ecp-groupc): intptr_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-modp)

pub inline fun mbedtls-ecp-groupcb/private-modp(^s: mbedtls-ecp-groupcb<s::S>): intptr_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-modp)

inline extern mbedtls-ecp-group-ptr/set-private-modp(s: intptr_t, private-modp: intptr_t): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_modp = (((mbedtls_mpi*) -> int)*)#2"

pub inline fun mbedtls-ecp-groupc/set-private-modp(^s: mbedtls-ecp-groupc, private-modp: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-modp(private-modp))

pub inline fun mbedtls-ecp-groupcb/set-private-modp(^s: mbedtls-ecp-groupcb<s::S>, private-modp: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-modp(private-modp))

pub inline fun mbedtls-ecp-groupc-wrapper/private-modp(^s: mbedtls-ecp-groupc): owned-c<((intptr_t) -> int32)>
  s.with-ptr(mbedtls-ecp-group-ptr/private-modp).c-own

pub inline fun mbedtls-ecp-groupcb-wrapper/private-modp(^s: mbedtls-ecp-groupcb<s::S>): owned-c<((intptr_t) -> int32)>
  s.with-ptr(mbedtls-ecp-group-ptr/private-modp).c-own

pub inline fun mbedtls-ecp-groupc-wrapper/set-private-modp(^s: mbedtls-ecp-groupc, private-modp: owned-c<((intptr_t) -> int32)>): ()
  with koka-ptr <- private-modp.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-modp(koka-ptr))

pub inline fun mbedtls-ecp-groupcb-wrapper/set-private-modp(^s: mbedtls-ecp-groupcb<s::S>, private-modp: owned-c<((intptr_t) -> int32)>): ()
  with koka-ptr <- private-modp.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-modp(koka-ptr))

inline extern mbedtls-ecp-group-ptr/private-t-pre(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_ecp_group*)#1)->private_t_pre)"

pub inline fun mbedtls-ecp-groupc/private-t-pre(^s: mbedtls-ecp-groupc): intptr_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-pre)

pub inline fun mbedtls-ecp-groupcb/private-t-pre(^s: mbedtls-ecp-groupcb<s::S>): intptr_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-pre)

inline extern mbedtls-ecp-group-ptr/set-private-t-pre(s: intptr_t, private-t-pre: intptr_t): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_t_pre = (((mbedtls_ecp_point*, kk_unit_t*) -> int)*)#2"

pub inline fun mbedtls-ecp-groupc/set-private-t-pre(^s: mbedtls-ecp-groupc, private-t-pre: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-pre(private-t-pre))

pub inline fun mbedtls-ecp-groupcb/set-private-t-pre(^s: mbedtls-ecp-groupcb<s::S>, private-t-pre: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-pre(private-t-pre))

pub inline fun mbedtls-ecp-groupc-wrapper/private-t-pre(^s: mbedtls-ecp-groupc): owned-c<((intptr_t, intptr_t) -> int32)>
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-pre).c-own

pub inline fun mbedtls-ecp-groupcb-wrapper/private-t-pre(^s: mbedtls-ecp-groupcb<s::S>): owned-c<((intptr_t, intptr_t) -> int32)>
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-pre).c-own

pub inline fun mbedtls-ecp-groupc-wrapper/set-private-t-pre(^s: mbedtls-ecp-groupc, private-t-pre: owned-c<((intptr_t, intptr_t) -> int32)>): ()
  with koka-ptr <- private-t-pre.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-pre(koka-ptr))

pub inline fun mbedtls-ecp-groupcb-wrapper/set-private-t-pre(^s: mbedtls-ecp-groupcb<s::S>, private-t-pre: owned-c<((intptr_t, intptr_t) -> int32)>): ()
  with koka-ptr <- private-t-pre.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-pre(koka-ptr))

inline extern mbedtls-ecp-group-ptr/private-t-post(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_ecp_group*)#1)->private_t_post)"

pub inline fun mbedtls-ecp-groupc/private-t-post(^s: mbedtls-ecp-groupc): intptr_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-post)

pub inline fun mbedtls-ecp-groupcb/private-t-post(^s: mbedtls-ecp-groupcb<s::S>): intptr_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-post)

inline extern mbedtls-ecp-group-ptr/set-private-t-post(s: intptr_t, private-t-post: intptr_t): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_t_post = (((mbedtls_ecp_point*, kk_unit_t*) -> int)*)#2"

pub inline fun mbedtls-ecp-groupc/set-private-t-post(^s: mbedtls-ecp-groupc, private-t-post: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-post(private-t-post))

pub inline fun mbedtls-ecp-groupcb/set-private-t-post(^s: mbedtls-ecp-groupcb<s::S>, private-t-post: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-post(private-t-post))

pub inline fun mbedtls-ecp-groupc-wrapper/private-t-post(^s: mbedtls-ecp-groupc): owned-c<((intptr_t, intptr_t) -> int32)>
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-post).c-own

pub inline fun mbedtls-ecp-groupcb-wrapper/private-t-post(^s: mbedtls-ecp-groupcb<s::S>): owned-c<((intptr_t, intptr_t) -> int32)>
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-post).c-own

pub inline fun mbedtls-ecp-groupc-wrapper/set-private-t-post(^s: mbedtls-ecp-groupc, private-t-post: owned-c<((intptr_t, intptr_t) -> int32)>): ()
  with koka-ptr <- private-t-post.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-post(koka-ptr))

pub inline fun mbedtls-ecp-groupcb-wrapper/set-private-t-post(^s: mbedtls-ecp-groupcb<s::S>, private-t-post: owned-c<((intptr_t, intptr_t) -> int32)>): ()
  with koka-ptr <- private-t-post.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-post(koka-ptr))

inline extern mbedtls-ecp-group-ptr/private-t-data(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_ecp_group*)#1)->private_t_data)"

pub inline fun mbedtls-ecp-groupc/private-t-data(^s: mbedtls-ecp-groupc): intptr_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-data)

pub inline fun mbedtls-ecp-groupcb/private-t-data(^s: mbedtls-ecp-groupcb<s::S>): intptr_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-data)

inline extern mbedtls-ecp-group-ptr/set-private-t-data(s: intptr_t, private-t-data: intptr_t): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_t_data = (kk_unit_t*)#2"

pub inline fun mbedtls-ecp-groupc/set-private-t-data(^s: mbedtls-ecp-groupc, private-t-data: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-data(private-t-data))

pub inline fun mbedtls-ecp-groupcb/set-private-t-data(^s: mbedtls-ecp-groupcb<s::S>, private-t-data: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-data(private-t-data))

pub inline fun mbedtls-ecp-groupc-wrapper/private-t-data(^s: mbedtls-ecp-groupc): owned-c<()>
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-data).c-own

pub inline fun mbedtls-ecp-groupcb-wrapper/private-t-data(^s: mbedtls-ecp-groupcb<s::S>): owned-c<()>
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-data).c-own

pub inline fun mbedtls-ecp-groupc-wrapper/set-private-t-data(^s: mbedtls-ecp-groupc, private-t-data: owned-c<()>): ()
  with koka-ptr <- private-t-data.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-data(koka-ptr))

pub inline fun mbedtls-ecp-groupcb-wrapper/set-private-t-data(^s: mbedtls-ecp-groupcb<s::S>, private-t-data: owned-c<()>): ()
  with koka-ptr <- private-t-data.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-data(koka-ptr))

inline extern mbedtls-ecp-group-ptr/private-t(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_ecp_group*)#1)->private_T)"

pub inline fun mbedtls-ecp-groupc/private-t(^s: mbedtls-ecp-groupc): intptr_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-t)

pub inline fun mbedtls-ecp-groupcb/private-t(^s: mbedtls-ecp-groupcb<s::S>): intptr_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-t)

inline extern mbedtls-ecp-group-ptr/set-private-t(s: intptr_t, private-t: intptr_t): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_T = (struct mbedtls_ecp_point*)#2"

pub inline fun mbedtls-ecp-groupc/set-private-t(^s: mbedtls-ecp-groupc, private-t: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t(private-t))

pub inline fun mbedtls-ecp-groupcb/set-private-t(^s: mbedtls-ecp-groupcb<s::S>, private-t: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t(private-t))

pub inline fun mbedtls-ecp-groupc-wrapper/private-t(^s: mbedtls-ecp-groupc): owned-c<mbedtls-ecp-point-c>
  s.with-ptr(mbedtls-ecp-group-ptr/private-t).c-own

pub inline fun mbedtls-ecp-groupcb-wrapper/private-t(^s: mbedtls-ecp-groupcb<s::S>): owned-c<mbedtls-ecp-point-c>
  s.with-ptr(mbedtls-ecp-group-ptr/private-t).c-own

pub inline fun mbedtls-ecp-groupc-wrapper/set-private-t(^s: mbedtls-ecp-groupc, private-t: owned-c<mbedtls-ecp-point-c>): ()
  with koka-ptr <- private-t.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t(koka-ptr))

pub inline fun mbedtls-ecp-groupcb-wrapper/set-private-t(^s: mbedtls-ecp-groupcb<s::S>, private-t: owned-c<mbedtls-ecp-point-c>): ()
  with koka-ptr <- private-t.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t(koka-ptr))

inline extern mbedtls-ecp-group-ptr/private-t-size(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_ecp_group*)#1)->private_T_size)"

pub inline fun mbedtls-ecp-groupc/private-t-size(^s: mbedtls-ecp-groupc): ssize_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-size)

pub inline fun mbedtls-ecp-groupcb/private-t-size(^s: mbedtls-ecp-groupcb<s::S>): ssize_t
  s.with-ptr(mbedtls-ecp-group-ptr/private-t-size)

inline extern mbedtls-ecp-group-ptr/set-private-t-size(s: intptr_t, private-t-size: ssize_t): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_T_size = (ssize_t)#2"

pub inline fun mbedtls-ecp-groupc/set-private-t-size(^s: mbedtls-ecp-groupc, private-t-size: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-size(private-t-size))

pub inline fun mbedtls-ecp-groupcb/set-private-t-size(^s: mbedtls-ecp-groupcb<s::S>, private-t-size: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-group-ptr/set-private-t-size(private-t-size))

pub fun mbedtls-ecp-group/to-koka(s: mbedtls-ecp-groupc): mbedtls-ecp-group
  Mbedtls-ecp-group(s.mbedtls-ecp-groupc/id, s.mbedtls-ecp-groupc/p.to-koka.to-koka, s.mbedtls-ecp-groupc/a.to-koka.to-koka, s.mbedtls-ecp-groupc/b.to-koka.to-koka, s.mbedtls-ecp-groupc/g.to-koka.to-koka, s.mbedtls-ecp-groupc/n.to-koka.to-koka, s.mbedtls-ecp-groupc/pbits, s.mbedtls-ecp-groupc/nbits, s.mbedtls-ecp-groupc/private-h.int, s.mbedtls-ecp-groupc/private-modp.c-own, s.mbedtls-ecp-groupc/private-t-pre.c-own, s.mbedtls-ecp-groupc/private-t-post.c-own, s.mbedtls-ecp-groupc/private-t-data.c-own, s.mbedtls-ecp-groupc/private-t.c-own.to-koka, s.mbedtls-ecp-groupc/private-t-size)

// \brief          MPI structure
pub value struct mbedtls-mpi
  private-p: owned-c<int64>
  private-s: int
  private-n: int

pub type mbedtls-mpi-c
pub alias mbedtls-mpic = owned-c<mbedtls-mpi-c>
pub alias mbedtls-mpicb<s::S> = borrowed-c<s,mbedtls-mpi-c>
pub alias mbedtls-mpica = owned-c<c-array<mbedtls-mpi>>

extern mbedtls-mpi/size-of(c: c-null<mbedtls-mpi-c>): int32
  c inline "sizeof(struct mbedtls_mpi)"

pub fun mbedtls-mpic(): mbedtls-mpic
  malloc(?size-of=mbedtls-mpi/size-of)

pub fun mbedtls-mpic-calloc(): mbedtls-mpic
  malloc-c(?size-of=mbedtls-mpi/size-of)

pub fun mbedtls-mpic-array(n: int): mbedtls-mpica
  malloc(n.int32, ?size-of=mbedtls-mpi/size-of)

pub fun mbedtls-mpic-array-calloc(n: int): mbedtls-mpica
  malloc-c(n.int32, ?size-of=mbedtls-mpi/size-of)

inline extern mbedtls-mpi-ptr/private-p(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct mbedtls_mpi*)#1)->private_p)"

pub inline fun mbedtls-mpic/private-p(^s: mbedtls-mpic): intptr_t
  s.with-ptr(mbedtls-mpi-ptr/private-p)

pub inline fun mbedtls-mpicb/private-p(^s: mbedtls-mpicb<s::S>): intptr_t
  s.with-ptr(mbedtls-mpi-ptr/private-p)

inline extern mbedtls-mpi-ptr/set-private-p(s: intptr_t, private-p: intptr_t): ()
  c inline "((struct mbedtls_mpi*)#1)->private_p = (mbedtls_mpi_uint*)#2"

pub inline fun mbedtls-mpic/set-private-p(^s: mbedtls-mpic, private-p: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-p(private-p))

pub inline fun mbedtls-mpicb/set-private-p(^s: mbedtls-mpicb<s::S>, private-p: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-p(private-p))

pub inline fun mbedtls-mpic-wrapper/private-p(^s: mbedtls-mpic): owned-c<int64>
  s.with-ptr(mbedtls-mpi-ptr/private-p).c-own

pub inline fun mbedtls-mpicb-wrapper/private-p(^s: mbedtls-mpicb<s::S>): owned-c<int64>
  s.with-ptr(mbedtls-mpi-ptr/private-p).c-own

pub inline fun mbedtls-mpic-wrapper/set-private-p(^s: mbedtls-mpic, private-p: owned-c<int64>): ()
  with koka-ptr <- private-p.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-p(koka-ptr))

pub inline fun mbedtls-mpicb-wrapper/set-private-p(^s: mbedtls-mpicb<s::S>, private-p: owned-c<int64>): ()
  with koka-ptr <- private-p.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-p(koka-ptr))

inline extern mbedtls-mpi-ptr/private-s(s: intptr_t): int16
  c inline "(short)(((struct mbedtls_mpi*)#1)->private_s)"

pub inline fun mbedtls-mpic/private-s(^s: mbedtls-mpic): int16
  s.with-ptr(mbedtls-mpi-ptr/private-s)

pub inline fun mbedtls-mpicb/private-s(^s: mbedtls-mpicb<s::S>): int16
  s.with-ptr(mbedtls-mpi-ptr/private-s)

inline extern mbedtls-mpi-ptr/set-private-s(s: intptr_t, private-s: int16): ()
  c inline "((struct mbedtls_mpi*)#1)->private_s = (short)#2"

pub inline fun mbedtls-mpic/set-private-s(^s: mbedtls-mpic, private-s: int16): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-s(private-s))

pub inline fun mbedtls-mpicb/set-private-s(^s: mbedtls-mpicb<s::S>, private-s: int16): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-s(private-s))

pub inline fun mbedtls-mpic-wrapper/private-s(^s: mbedtls-mpic): int
  s.with-ptr(mbedtls-mpi-ptr/private-s).int

pub inline fun mbedtls-mpicb-wrapper/private-s(^s: mbedtls-mpicb<s::S>): int
  s.with-ptr(mbedtls-mpi-ptr/private-s).int

pub inline fun mbedtls-mpic-wrapper/set-private-s(^s: mbedtls-mpic, private-s: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-s(private-s.int16))

pub inline fun mbedtls-mpicb-wrapper/set-private-s(^s: mbedtls-mpicb<s::S>, private-s: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-s(private-s.int16))

inline extern mbedtls-mpi-ptr/private-n(s: intptr_t): int16
  c inline "(unsigned short)(((struct mbedtls_mpi*)#1)->private_n)"

pub inline fun mbedtls-mpic/private-n(^s: mbedtls-mpic): int16
  s.with-ptr(mbedtls-mpi-ptr/private-n)

pub inline fun mbedtls-mpicb/private-n(^s: mbedtls-mpicb<s::S>): int16
  s.with-ptr(mbedtls-mpi-ptr/private-n)

inline extern mbedtls-mpi-ptr/set-private-n(s: intptr_t, private-n: int16): ()
  c inline "((struct mbedtls_mpi*)#1)->private_n = (unsigned short)#2"

pub inline fun mbedtls-mpic/set-private-n(^s: mbedtls-mpic, private-n: int16): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-n(private-n))

pub inline fun mbedtls-mpicb/set-private-n(^s: mbedtls-mpicb<s::S>, private-n: int16): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-n(private-n))

pub inline fun mbedtls-mpic-wrapper/private-n(^s: mbedtls-mpic): int
  s.with-ptr(mbedtls-mpi-ptr/private-n).int

pub inline fun mbedtls-mpicb-wrapper/private-n(^s: mbedtls-mpicb<s::S>): int
  s.with-ptr(mbedtls-mpi-ptr/private-n).int

pub inline fun mbedtls-mpic-wrapper/set-private-n(^s: mbedtls-mpic, private-n: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-n(private-n.int16))

pub inline fun mbedtls-mpicb-wrapper/set-private-n(^s: mbedtls-mpicb<s::S>, private-n: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpi-ptr/set-private-n(private-n.int16))

pub fun mbedtls-mpi/to-koka(s: mbedtls-mpic): mbedtls-mpi
  Mbedtls-mpi(s.mbedtls-mpic/private-p.c-own, s.mbedtls-mpic/private-s.int, s.mbedtls-mpic/private-n.int)

alias mbedtls-mpi-uint = int64
alias koka-mbedtls_mpi_uint = int
// \brief           The ECP point structure, in Jacobian coordinates.
// 
// \note            All functions expect and return points satisfying
// the following condition: <code>Z == 0</code> or
// <code>Z == 1</code>. Other values of \p Z are
// used only by internal functions.
// The point is zero, or "at infinity", if <code>Z == 0</code>.
// Otherwise, \p X and \p Y are its standard (affine)
// coordinates.
pub value struct mbedtls-ecp-point
  private-x: mbedtls-mpi
  private-y: mbedtls-mpi
  private-z: mbedtls-mpi

pub type mbedtls-ecp-point-c
pub alias mbedtls-ecp-pointc = owned-c<mbedtls-ecp-point-c>
pub alias mbedtls-ecp-pointcb<s::S> = borrowed-c<s,mbedtls-ecp-point-c>
pub alias mbedtls-ecp-pointca = owned-c<c-array<mbedtls-ecp-point>>

extern mbedtls-ecp-point/size-of(c: c-null<mbedtls-ecp-point-c>): int32
  c inline "sizeof(struct mbedtls_ecp_point)"

pub fun mbedtls-ecp-pointc(): mbedtls-ecp-pointc
  malloc(?size-of=mbedtls-ecp-point/size-of)

pub fun mbedtls-ecp-pointc-calloc(): mbedtls-ecp-pointc
  malloc-c(?size-of=mbedtls-ecp-point/size-of)

pub fun mbedtls-ecp-pointc-array(n: int): mbedtls-ecp-pointca
  malloc(n.int32, ?size-of=mbedtls-ecp-point/size-of)

pub fun mbedtls-ecp-pointc-array-calloc(n: int): mbedtls-ecp-pointca
  malloc-c(n.int32, ?size-of=mbedtls-ecp-point/size-of)

inline extern mbedtls-ecp-point-ptr/private-x(s: intptr_t): mbedtls-mpi-c
  c inline "(mbedtls_mpi)(((struct mbedtls_ecp_point*)#1)->private_X)"

pub inline fun mbedtls-ecp-pointc/private-x(^s: mbedtls-ecp-pointc): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-point-ptr/private-x)

pub inline fun mbedtls-ecp-pointcb/private-x(^s: mbedtls-ecp-pointcb<s::S>): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-point-ptr/private-x)

inline extern mbedtls-ecp-point-ptr/set-private-x(s: intptr_t, private-x: mbedtls-mpi-c): ()
  c inline "((struct mbedtls_ecp_point*)#1)->private_X = (mbedtls_mpi)#2"

pub inline fun mbedtls-ecp-pointc/set-private-x(^s: mbedtls-ecp-pointc, private-x: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-x(private-x))

pub inline fun mbedtls-ecp-pointcb/set-private-x(^s: mbedtls-ecp-pointcb<s::S>, private-x: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-x(private-x))

pub inline fun mbedtls-ecp-pointc-wrapper/private-x(^s: mbedtls-ecp-pointc): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-point-ptr/private-x).to-koka

pub inline fun mbedtls-ecp-pointcb-wrapper/private-x(^s: mbedtls-ecp-pointcb<s::S>): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-point-ptr/private-x).to-koka

pub inline fun mbedtls-ecp-pointc-wrapper/set-private-x(^s: mbedtls-ecp-pointc, private-x: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-x((struct mbedtls_mpi)(private-x)))

pub inline fun mbedtls-ecp-pointcb-wrapper/set-private-x(^s: mbedtls-ecp-pointcb<s::S>, private-x: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-x((struct mbedtls_mpi)(private-x)))

inline extern mbedtls-ecp-point-ptr/private-y(s: intptr_t): mbedtls-mpi-c
  c inline "(mbedtls_mpi)(((struct mbedtls_ecp_point*)#1)->private_Y)"

pub inline fun mbedtls-ecp-pointc/private-y(^s: mbedtls-ecp-pointc): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-point-ptr/private-y)

pub inline fun mbedtls-ecp-pointcb/private-y(^s: mbedtls-ecp-pointcb<s::S>): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-point-ptr/private-y)

inline extern mbedtls-ecp-point-ptr/set-private-y(s: intptr_t, private-y: mbedtls-mpi-c): ()
  c inline "((struct mbedtls_ecp_point*)#1)->private_Y = (mbedtls_mpi)#2"

pub inline fun mbedtls-ecp-pointc/set-private-y(^s: mbedtls-ecp-pointc, private-y: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-y(private-y))

pub inline fun mbedtls-ecp-pointcb/set-private-y(^s: mbedtls-ecp-pointcb<s::S>, private-y: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-y(private-y))

pub inline fun mbedtls-ecp-pointc-wrapper/private-y(^s: mbedtls-ecp-pointc): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-point-ptr/private-y).to-koka

pub inline fun mbedtls-ecp-pointcb-wrapper/private-y(^s: mbedtls-ecp-pointcb<s::S>): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-point-ptr/private-y).to-koka

pub inline fun mbedtls-ecp-pointc-wrapper/set-private-y(^s: mbedtls-ecp-pointc, private-y: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-y((struct mbedtls_mpi)(private-y)))

pub inline fun mbedtls-ecp-pointcb-wrapper/set-private-y(^s: mbedtls-ecp-pointcb<s::S>, private-y: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-y((struct mbedtls_mpi)(private-y)))

inline extern mbedtls-ecp-point-ptr/private-z(s: intptr_t): mbedtls-mpi-c
  c inline "(mbedtls_mpi)(((struct mbedtls_ecp_point*)#1)->private_Z)"

pub inline fun mbedtls-ecp-pointc/private-z(^s: mbedtls-ecp-pointc): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-point-ptr/private-z)

pub inline fun mbedtls-ecp-pointcb/private-z(^s: mbedtls-ecp-pointcb<s::S>): mbedtls-mpi-c
  s.with-ptr(mbedtls-ecp-point-ptr/private-z)

inline extern mbedtls-ecp-point-ptr/set-private-z(s: intptr_t, private-z: mbedtls-mpi-c): ()
  c inline "((struct mbedtls_ecp_point*)#1)->private_Z = (mbedtls_mpi)#2"

pub inline fun mbedtls-ecp-pointc/set-private-z(^s: mbedtls-ecp-pointc, private-z: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-z(private-z))

pub inline fun mbedtls-ecp-pointcb/set-private-z(^s: mbedtls-ecp-pointcb<s::S>, private-z: mbedtls-mpi-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-z(private-z))

pub inline fun mbedtls-ecp-pointc-wrapper/private-z(^s: mbedtls-ecp-pointc): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-point-ptr/private-z).to-koka

pub inline fun mbedtls-ecp-pointcb-wrapper/private-z(^s: mbedtls-ecp-pointcb<s::S>): mbedtls-mpi
  s.with-ptr(mbedtls-ecp-point-ptr/private-z).to-koka

pub inline fun mbedtls-ecp-pointc-wrapper/set-private-z(^s: mbedtls-ecp-pointc, private-z: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-z((struct mbedtls_mpi)(private-z)))

pub inline fun mbedtls-ecp-pointcb-wrapper/set-private-z(^s: mbedtls-ecp-pointcb<s::S>, private-z: mbedtls-mpi): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-point-ptr/set-private-z((struct mbedtls_mpi)(private-z)))

pub fun mbedtls-ecp-point/to-koka(s: mbedtls-ecp-pointc): mbedtls-ecp-point
  Mbedtls-ecp-point(s.mbedtls-ecp-pointc/private-x.to-koka.to-koka, s.mbedtls-ecp-pointc/private-y.to-koka.to-koka, s.mbedtls-ecp-pointc/private-z.to-koka.to-koka)

type psa_tls12_prf_key_derivation_state_t
  PSA_TLS12_PRF_STATE_INIT
  PSA_TLS12_PRF_STATE_SEED_SET
  PSA_TLS12_PRF_STATE_OTHER_KEY_SET
  PSA_TLS12_PRF_STATE_KEY_SET
  PSA_TLS12_PRF_STATE_LABEL_SET
  PSA_TLS12_PRF_STATE_OUTPUT

pub fun psa_tls12_prf_key_derivation_state_t/int(i: psa_tls12_prf_key_derivation_state_t): int
  match i
    PSA_TLS12_PRF_STATE_INIT -> 0
    PSA_TLS12_PRF_STATE_SEED_SET -> 1
    PSA_TLS12_PRF_STATE_OTHER_KEY_SET -> 2
    PSA_TLS12_PRF_STATE_KEY_SET -> 3
    PSA_TLS12_PRF_STATE_LABEL_SET -> 4
    PSA_TLS12_PRF_STATE_OUTPUT -> 5

pub fun int/psa_tls12_prf_key_derivation_state_t(i: int): exn psa_tls12_prf_key_derivation_state_t
  match i
    0 -> PSA_TLS12_PRF_STATE_INIT
    1 -> PSA_TLS12_PRF_STATE_SEED_SET
    2 -> PSA_TLS12_PRF_STATE_OTHER_KEY_SET
    3 -> PSA_TLS12_PRF_STATE_KEY_SET
    4 -> PSA_TLS12_PRF_STATE_LABEL_SET
    5 -> PSA_TLS12_PRF_STATE_OUTPUT

pub struct psa-driver-key-derivation-context-t
pub type psa-driver-key-derivation-context-t-c
pub alias psa-driver-key-derivation-context-tc = owned-c<psa-driver-key-derivation-context-t-c>
pub alias psa-driver-key-derivation-context-tcb<s::S> = borrowed-c<s,psa-driver-key-derivation-context-t-c>
pub alias psa-driver-key-derivation-context-tca = owned-c<c-array<psa-driver-key-derivation-context-t>>

pub fun psa-driver-key-derivation-context-t/to-koka(s: psa-driver-key-derivation-context-tc): psa-driver-key-derivation-context-t
  Psa-driver-key-derivation-context-t()

type psa_crypto_driver_pake_step
  PSA_JPAKE_STEP_INVALID
  PSA_JPAKE_X1_STEP_KEY_SHARE
  PSA_JPAKE_X1_STEP_ZK_PUBLIC
  PSA_JPAKE_X1_STEP_ZK_PROOF
  PSA_JPAKE_X2_STEP_KEY_SHARE
  PSA_JPAKE_X2_STEP_ZK_PUBLIC
  PSA_JPAKE_X2_STEP_ZK_PROOF
  PSA_JPAKE_X2S_STEP_KEY_SHARE
  PSA_JPAKE_X2S_STEP_ZK_PUBLIC
  PSA_JPAKE_X2S_STEP_ZK_PROOF
  PSA_JPAKE_X4S_STEP_KEY_SHARE
  PSA_JPAKE_X4S_STEP_ZK_PUBLIC
  PSA_JPAKE_X4S_STEP_ZK_PROOF

pub fun psa_crypto_driver_pake_step/int(i: psa_crypto_driver_pake_step): int
  match i
    PSA_JPAKE_STEP_INVALID -> 0
    PSA_JPAKE_X1_STEP_KEY_SHARE -> 1
    PSA_JPAKE_X1_STEP_ZK_PUBLIC -> 2
    PSA_JPAKE_X1_STEP_ZK_PROOF -> 3
    PSA_JPAKE_X2_STEP_KEY_SHARE -> 4
    PSA_JPAKE_X2_STEP_ZK_PUBLIC -> 5
    PSA_JPAKE_X2_STEP_ZK_PROOF -> 6
    PSA_JPAKE_X2S_STEP_KEY_SHARE -> 7
    PSA_JPAKE_X2S_STEP_ZK_PUBLIC -> 8
    PSA_JPAKE_X2S_STEP_ZK_PROOF -> 9
    PSA_JPAKE_X4S_STEP_KEY_SHARE -> 10
    PSA_JPAKE_X4S_STEP_ZK_PUBLIC -> 11
    PSA_JPAKE_X4S_STEP_ZK_PROOF -> 12

pub fun int/psa_crypto_driver_pake_step(i: int): exn psa_crypto_driver_pake_step
  match i
    0 -> PSA_JPAKE_STEP_INVALID
    1 -> PSA_JPAKE_X1_STEP_KEY_SHARE
    2 -> PSA_JPAKE_X1_STEP_ZK_PUBLIC
    3 -> PSA_JPAKE_X1_STEP_ZK_PROOF
    4 -> PSA_JPAKE_X2_STEP_KEY_SHARE
    5 -> PSA_JPAKE_X2_STEP_ZK_PUBLIC
    6 -> PSA_JPAKE_X2_STEP_ZK_PROOF
    7 -> PSA_JPAKE_X2S_STEP_KEY_SHARE
    8 -> PSA_JPAKE_X2S_STEP_ZK_PUBLIC
    9 -> PSA_JPAKE_X2S_STEP_ZK_PROOF
    10 -> PSA_JPAKE_X4S_STEP_KEY_SHARE
    11 -> PSA_JPAKE_X4S_STEP_ZK_PUBLIC
    12 -> PSA_JPAKE_X4S_STEP_ZK_PROOF

type psa_jpake_round
  PSA_JPAKE_FIRST
  PSA_JPAKE_SECOND
  PSA_JPAKE_FINISHED

pub fun psa_jpake_round/int(i: psa_jpake_round): int
  match i
    PSA_JPAKE_FIRST -> 0
    PSA_JPAKE_SECOND -> 1
    PSA_JPAKE_FINISHED -> 2

pub fun int/psa_jpake_round(i: int): exn psa_jpake_round
  match i
    0 -> PSA_JPAKE_FIRST
    1 -> PSA_JPAKE_SECOND
    2 -> PSA_JPAKE_FINISHED

type psa_jpake_io_mode
  PSA_JPAKE_INPUT
  PSA_JPAKE_OUTPUT

pub fun psa_jpake_io_mode/int(i: psa_jpake_io_mode): int
  match i
    PSA_JPAKE_INPUT -> 0
    PSA_JPAKE_OUTPUT -> 1

pub fun int/psa_jpake_io_mode(i: int): exn psa_jpake_io_mode
  match i
    0 -> PSA_JPAKE_INPUT
    1 -> PSA_JPAKE_OUTPUT

// \brief          Public key types
type mbedtls_pk_type_t
  MBEDTLS_PK_NONE
  MBEDTLS_PK_RSA
  MBEDTLS_PK_ECKEY
  MBEDTLS_PK_ECKEY_DH
  MBEDTLS_PK_ECDSA
  MBEDTLS_PK_RSA_ALT
  MBEDTLS_PK_RSASSA_PSS
  MBEDTLS_PK_OPAQUE

pub fun mbedtls_pk_type_t/int(i: mbedtls_pk_type_t): int
  match i
    MBEDTLS_PK_NONE -> 0
    MBEDTLS_PK_RSA -> 1
    MBEDTLS_PK_ECKEY -> 2
    MBEDTLS_PK_ECKEY_DH -> 3
    MBEDTLS_PK_ECDSA -> 4
    MBEDTLS_PK_RSA_ALT -> 5
    MBEDTLS_PK_RSASSA_PSS -> 6
    MBEDTLS_PK_OPAQUE -> 7

pub fun int/mbedtls_pk_type_t(i: int): exn mbedtls_pk_type_t
  match i
    0 -> MBEDTLS_PK_NONE
    1 -> MBEDTLS_PK_RSA
    2 -> MBEDTLS_PK_ECKEY
    3 -> MBEDTLS_PK_ECKEY_DH
    4 -> MBEDTLS_PK_ECDSA
    5 -> MBEDTLS_PK_RSA_ALT
    6 -> MBEDTLS_PK_RSASSA_PSS
    7 -> MBEDTLS_PK_OPAQUE

// \brief           Types for interfacing with the debug module
type mbedtls_pk_debug_type
  MBEDTLS_PK_DEBUG_NONE
  MBEDTLS_PK_DEBUG_MPI
  MBEDTLS_PK_DEBUG_ECP
  MBEDTLS_PK_DEBUG_PSA_EC

pub fun mbedtls_pk_debug_type/int(i: mbedtls_pk_debug_type): int
  match i
    MBEDTLS_PK_DEBUG_NONE -> 0
    MBEDTLS_PK_DEBUG_MPI -> 1
    MBEDTLS_PK_DEBUG_ECP -> 2
    MBEDTLS_PK_DEBUG_PSA_EC -> 3

pub fun int/mbedtls_pk_debug_type(i: int): exn mbedtls_pk_debug_type
  match i
    0 -> MBEDTLS_PK_DEBUG_NONE
    1 -> MBEDTLS_PK_DEBUG_MPI
    2 -> MBEDTLS_PK_DEBUG_ECP
    3 -> MBEDTLS_PK_DEBUG_PSA_EC

type mbedtls_key_exchange_type_t
  MBEDTLS_KEY_EXCHANGE_NONE
  MBEDTLS_KEY_EXCHANGE_RSA
  MBEDTLS_KEY_EXCHANGE_DHE_RSA
  MBEDTLS_KEY_EXCHANGE_ECDHE_RSA
  MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA
  MBEDTLS_KEY_EXCHANGE_PSK
  MBEDTLS_KEY_EXCHANGE_DHE_PSK
  MBEDTLS_KEY_EXCHANGE_RSA_PSK
  MBEDTLS_KEY_EXCHANGE_ECDHE_PSK
  MBEDTLS_KEY_EXCHANGE_ECDH_RSA
  MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA
  MBEDTLS_KEY_EXCHANGE_ECJPAKE

pub fun mbedtls_key_exchange_type_t/int(i: mbedtls_key_exchange_type_t): int
  match i
    MBEDTLS_KEY_EXCHANGE_NONE -> 0
    MBEDTLS_KEY_EXCHANGE_RSA -> 1
    MBEDTLS_KEY_EXCHANGE_DHE_RSA -> 2
    MBEDTLS_KEY_EXCHANGE_ECDHE_RSA -> 3
    MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA -> 4
    MBEDTLS_KEY_EXCHANGE_PSK -> 5
    MBEDTLS_KEY_EXCHANGE_DHE_PSK -> 6
    MBEDTLS_KEY_EXCHANGE_RSA_PSK -> 7
    MBEDTLS_KEY_EXCHANGE_ECDHE_PSK -> 8
    MBEDTLS_KEY_EXCHANGE_ECDH_RSA -> 9
    MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA -> 10
    MBEDTLS_KEY_EXCHANGE_ECJPAKE -> 11

pub fun int/mbedtls_key_exchange_type_t(i: int): exn mbedtls_key_exchange_type_t
  match i
    0 -> MBEDTLS_KEY_EXCHANGE_NONE
    1 -> MBEDTLS_KEY_EXCHANGE_RSA
    2 -> MBEDTLS_KEY_EXCHANGE_DHE_RSA
    3 -> MBEDTLS_KEY_EXCHANGE_ECDHE_RSA
    4 -> MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA
    5 -> MBEDTLS_KEY_EXCHANGE_PSK
    6 -> MBEDTLS_KEY_EXCHANGE_DHE_PSK
    7 -> MBEDTLS_KEY_EXCHANGE_RSA_PSK
    8 -> MBEDTLS_KEY_EXCHANGE_ECDHE_PSK
    9 -> MBEDTLS_KEY_EXCHANGE_ECDH_RSA
    10 -> MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA
    11 -> MBEDTLS_KEY_EXCHANGE_ECJPAKE

// Security profile for certificate verification.
// 
// All lists are bitfields, built by ORing flags from MBEDTLS_X509_ID_FLAG().
// 
// The fields of this structure are part of the public API and can be
// manipulated directly by applications. Future versions of the library may
// add extra fields or reorder existing fields.
// 
// You can create custom profiles by starting from a copy of
// an existing profile, such as mbedtls_x509_crt_profile_default or
// mbedtls_x509_ctr_profile_none and then tune it to your needs.
// 
// For example to allow SHA-224 in addition to the default:
// 
// mbedtls_x509_crt_profile my_profile = mbedtls_x509_crt_profile_default;
// my_profile.allowed_mds |= MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA224 );
// 
// Or to allow only RSA-3072+ with SHA-256:
// 
// mbedtls_x509_crt_profile my_profile = mbedtls_x509_crt_profile_none;
// my_profile.allowed_mds = MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA256 );
// my_profile.allowed_pks = MBEDTLS_X509_ID_FLAG( MBEDTLS_PK_RSA );
// my_profile.rsa_min_bitlen = 3072;
pub struct mbedtls-x509-crt-profile
  // < MDs for signatures
  allowed-mds: int
  // < PK algs for public keys;
  // this applies to all certificates
  // in the provided chain.
  allowed-pks: int
  // < Elliptic curves for ECDSA
  allowed-curves: int
  // < Minimum size for RSA keys
  rsa-min-bitlen: int

pub type mbedtls-x509-crt-profile-c
pub alias mbedtls-x509-crt-profilec = owned-c<mbedtls-x509-crt-profile-c>
pub alias mbedtls-x509-crt-profilecb<s::S> = borrowed-c<s,mbedtls-x509-crt-profile-c>
pub alias mbedtls-x509-crt-profileca = owned-c<c-array<mbedtls-x509-crt-profile>>

extern mbedtls-x509-crt-profile/size-of(c: c-null<mbedtls-x509-crt-profile-c>): int32
  c inline "sizeof(struct mbedtls_x509_crt_profile)"

pub fun mbedtls-x509-crt-profilec(): mbedtls-x509-crt-profilec
  malloc(?size-of=mbedtls-x509-crt-profile/size-of)

pub fun mbedtls-x509-crt-profilec-calloc(): mbedtls-x509-crt-profilec
  malloc-c(?size-of=mbedtls-x509-crt-profile/size-of)

pub fun mbedtls-x509-crt-profilec-array(n: int): mbedtls-x509-crt-profileca
  malloc(n.int32, ?size-of=mbedtls-x509-crt-profile/size-of)

pub fun mbedtls-x509-crt-profilec-array-calloc(n: int): mbedtls-x509-crt-profileca
  malloc-c(n.int32, ?size-of=mbedtls-x509-crt-profile/size-of)

inline extern mbedtls-x509-crt-profile-ptr/allowed-mds(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_x509_crt_profile*)#1)->allowed_mds)"

pub inline fun mbedtls-x509-crt-profilec/allowed-mds(^s: mbedtls-x509-crt-profilec): int32
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-mds)

pub inline fun mbedtls-x509-crt-profilecb/allowed-mds(^s: mbedtls-x509-crt-profilecb<s::S>): int32
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-mds)

inline extern mbedtls-x509-crt-profile-ptr/set-allowed-mds(s: intptr_t, allowed-mds: int32): ()
  c inline "((struct mbedtls_x509_crt_profile*)#1)->allowed_mds = (int32_t)#2"

pub inline fun mbedtls-x509-crt-profilec/set-allowed-mds(^s: mbedtls-x509-crt-profilec, allowed-mds: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-mds(allowed-mds))

pub inline fun mbedtls-x509-crt-profilecb/set-allowed-mds(^s: mbedtls-x509-crt-profilecb<s::S>, allowed-mds: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-mds(allowed-mds))

pub inline fun mbedtls-x509-crt-profilec-wrapper/allowed-mds(^s: mbedtls-x509-crt-profilec): int
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-mds).int

pub inline fun mbedtls-x509-crt-profilecb-wrapper/allowed-mds(^s: mbedtls-x509-crt-profilecb<s::S>): int
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-mds).int

pub inline fun mbedtls-x509-crt-profilec-wrapper/set-allowed-mds(^s: mbedtls-x509-crt-profilec, allowed-mds: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-mds(allowed-mds.int32))

pub inline fun mbedtls-x509-crt-profilecb-wrapper/set-allowed-mds(^s: mbedtls-x509-crt-profilecb<s::S>, allowed-mds: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-mds(allowed-mds.int32))

inline extern mbedtls-x509-crt-profile-ptr/allowed-pks(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_x509_crt_profile*)#1)->allowed_pks)"

pub inline fun mbedtls-x509-crt-profilec/allowed-pks(^s: mbedtls-x509-crt-profilec): int32
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-pks)

pub inline fun mbedtls-x509-crt-profilecb/allowed-pks(^s: mbedtls-x509-crt-profilecb<s::S>): int32
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-pks)

inline extern mbedtls-x509-crt-profile-ptr/set-allowed-pks(s: intptr_t, allowed-pks: int32): ()
  c inline "((struct mbedtls_x509_crt_profile*)#1)->allowed_pks = (int32_t)#2"

pub inline fun mbedtls-x509-crt-profilec/set-allowed-pks(^s: mbedtls-x509-crt-profilec, allowed-pks: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-pks(allowed-pks))

pub inline fun mbedtls-x509-crt-profilecb/set-allowed-pks(^s: mbedtls-x509-crt-profilecb<s::S>, allowed-pks: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-pks(allowed-pks))

pub inline fun mbedtls-x509-crt-profilec-wrapper/allowed-pks(^s: mbedtls-x509-crt-profilec): int
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-pks).int

pub inline fun mbedtls-x509-crt-profilecb-wrapper/allowed-pks(^s: mbedtls-x509-crt-profilecb<s::S>): int
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-pks).int

pub inline fun mbedtls-x509-crt-profilec-wrapper/set-allowed-pks(^s: mbedtls-x509-crt-profilec, allowed-pks: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-pks(allowed-pks.int32))

pub inline fun mbedtls-x509-crt-profilecb-wrapper/set-allowed-pks(^s: mbedtls-x509-crt-profilecb<s::S>, allowed-pks: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-pks(allowed-pks.int32))

inline extern mbedtls-x509-crt-profile-ptr/allowed-curves(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_x509_crt_profile*)#1)->allowed_curves)"

pub inline fun mbedtls-x509-crt-profilec/allowed-curves(^s: mbedtls-x509-crt-profilec): int32
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-curves)

pub inline fun mbedtls-x509-crt-profilecb/allowed-curves(^s: mbedtls-x509-crt-profilecb<s::S>): int32
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-curves)

inline extern mbedtls-x509-crt-profile-ptr/set-allowed-curves(s: intptr_t, allowed-curves: int32): ()
  c inline "((struct mbedtls_x509_crt_profile*)#1)->allowed_curves = (int32_t)#2"

pub inline fun mbedtls-x509-crt-profilec/set-allowed-curves(^s: mbedtls-x509-crt-profilec, allowed-curves: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-curves(allowed-curves))

pub inline fun mbedtls-x509-crt-profilecb/set-allowed-curves(^s: mbedtls-x509-crt-profilecb<s::S>, allowed-curves: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-curves(allowed-curves))

pub inline fun mbedtls-x509-crt-profilec-wrapper/allowed-curves(^s: mbedtls-x509-crt-profilec): int
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-curves).int

pub inline fun mbedtls-x509-crt-profilecb-wrapper/allowed-curves(^s: mbedtls-x509-crt-profilecb<s::S>): int
  s.with-ptr(mbedtls-x509-crt-profile-ptr/allowed-curves).int

pub inline fun mbedtls-x509-crt-profilec-wrapper/set-allowed-curves(^s: mbedtls-x509-crt-profilec, allowed-curves: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-curves(allowed-curves.int32))

pub inline fun mbedtls-x509-crt-profilecb-wrapper/set-allowed-curves(^s: mbedtls-x509-crt-profilecb<s::S>, allowed-curves: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-allowed-curves(allowed-curves.int32))

inline extern mbedtls-x509-crt-profile-ptr/rsa-min-bitlen(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_x509_crt_profile*)#1)->rsa_min_bitlen)"

pub inline fun mbedtls-x509-crt-profilec/rsa-min-bitlen(^s: mbedtls-x509-crt-profilec): int32
  s.with-ptr(mbedtls-x509-crt-profile-ptr/rsa-min-bitlen)

pub inline fun mbedtls-x509-crt-profilecb/rsa-min-bitlen(^s: mbedtls-x509-crt-profilecb<s::S>): int32
  s.with-ptr(mbedtls-x509-crt-profile-ptr/rsa-min-bitlen)

inline extern mbedtls-x509-crt-profile-ptr/set-rsa-min-bitlen(s: intptr_t, rsa-min-bitlen: int32): ()
  c inline "((struct mbedtls_x509_crt_profile*)#1)->rsa_min_bitlen = (int32_t)#2"

pub inline fun mbedtls-x509-crt-profilec/set-rsa-min-bitlen(^s: mbedtls-x509-crt-profilec, rsa-min-bitlen: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-rsa-min-bitlen(rsa-min-bitlen))

pub inline fun mbedtls-x509-crt-profilecb/set-rsa-min-bitlen(^s: mbedtls-x509-crt-profilecb<s::S>, rsa-min-bitlen: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-rsa-min-bitlen(rsa-min-bitlen))

pub inline fun mbedtls-x509-crt-profilec-wrapper/rsa-min-bitlen(^s: mbedtls-x509-crt-profilec): int
  s.with-ptr(mbedtls-x509-crt-profile-ptr/rsa-min-bitlen).int

pub inline fun mbedtls-x509-crt-profilecb-wrapper/rsa-min-bitlen(^s: mbedtls-x509-crt-profilecb<s::S>): int
  s.with-ptr(mbedtls-x509-crt-profile-ptr/rsa-min-bitlen).int

pub inline fun mbedtls-x509-crt-profilec-wrapper/set-rsa-min-bitlen(^s: mbedtls-x509-crt-profilec, rsa-min-bitlen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-rsa-min-bitlen(rsa-min-bitlen.int32))

pub inline fun mbedtls-x509-crt-profilecb-wrapper/set-rsa-min-bitlen(^s: mbedtls-x509-crt-profilecb<s::S>, rsa-min-bitlen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profile-ptr/set-rsa-min-bitlen(rsa-min-bitlen.int32))

pub fun mbedtls-x509-crt-profile/to-koka(s: mbedtls-x509-crt-profilec): mbedtls-x509-crt-profile
  Mbedtls-x509-crt-profile(s.mbedtls-x509-crt-profilec/allowed-mds.int, s.mbedtls-x509-crt-profilec/allowed-pks.int, s.mbedtls-x509-crt-profilec/allowed-curves.int, s.mbedtls-x509-crt-profilec/rsa-min-bitlen.int)

// Which parameter to access in mbedtls_dhm_get_value().
type mbedtls_dhm_parameter
  // !<  The prime modulus.
  MBEDTLS_DHM_PARAM_P
  // !<  The generator.
  MBEDTLS_DHM_PARAM_G
  // !<  Our secret value.
  MBEDTLS_DHM_PARAM_X
  // !<  Our public key = \c G^X mod \c P.
  MBEDTLS_DHM_PARAM_GX
  // !<  The public key of the peer = \c G^Y mod \c P.
  MBEDTLS_DHM_PARAM_GY
  // !<  The shared secret = \c G^(XY) mod \c P.
  MBEDTLS_DHM_PARAM_K

pub fun mbedtls_dhm_parameter/int(i: mbedtls_dhm_parameter): int
  match i
    MBEDTLS_DHM_PARAM_P -> 0
    MBEDTLS_DHM_PARAM_G -> 1
    MBEDTLS_DHM_PARAM_X -> 2
    MBEDTLS_DHM_PARAM_GX -> 3
    MBEDTLS_DHM_PARAM_GY -> 4
    MBEDTLS_DHM_PARAM_K -> 5

pub fun int/mbedtls_dhm_parameter(i: int): exn mbedtls_dhm_parameter
  match i
    0 -> MBEDTLS_DHM_PARAM_P
    1 -> MBEDTLS_DHM_PARAM_G
    2 -> MBEDTLS_DHM_PARAM_X
    3 -> MBEDTLS_DHM_PARAM_GX
    4 -> MBEDTLS_DHM_PARAM_GY
    5 -> MBEDTLS_DHM_PARAM_K

// Defines the source of the imported EC key.
type mbedtls_ecdh_side
  // < Our key.
  MBEDTLS_ECDH_OURS
  // < The key of the peer.
  MBEDTLS_ECDH_THEIRS

pub fun mbedtls_ecdh_side/int(i: mbedtls_ecdh_side): int
  match i
    MBEDTLS_ECDH_OURS -> 0
    MBEDTLS_ECDH_THEIRS -> 1

pub fun int/mbedtls_ecdh_side(i: int): exn mbedtls_ecdh_side
  match i
    0 -> MBEDTLS_ECDH_OURS
    1 -> MBEDTLS_ECDH_THEIRS

// Defines the ECDH implementation used.
// 
// Later versions of the library may add new variants, therefore users should
// not make any assumptions about them.
type mbedtls_ecdh_variant
  // !< Implementation not defined.
  MBEDTLS_ECDH_VARIANT_NONE
  // !< The default Mbed TLS implementation
  MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0

pub fun mbedtls_ecdh_variant/int(i: mbedtls_ecdh_variant): int
  match i
    MBEDTLS_ECDH_VARIANT_NONE -> 0
    MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0 -> 1

pub fun int/mbedtls_ecdh_variant(i: int): exn mbedtls_ecdh_variant
  match i
    0 -> MBEDTLS_ECDH_VARIANT_NONE
    1 -> MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0

pub type mbedtls-ssl-premaster-secret-c
pub alias mbedtls-ssl-premaster-secretc<s::S> = owned-c<mbedtls-ssl-premaster-secret-c>
pub alias mbedtls-ssl-premaster-secretcb<s::S> = borrowed-c<s,mbedtls-ssl-premaster-secret-c>
pub alias mbedtls-ssl-premaster-secretca<s::S> = owned-c<c-array<mbedtls-ssl-premaster-secret>>

extern mbedtls-ssl-premaster-secret/size-of(c: c-null<mbedtls-ssl-premaster-secret-c>): int32
  c inline "sizeof(union mbedtls_ssl_premaster_secret)"

pub fun mbedtls-ssl-premaster-secretc(): mbedtls-ssl-premaster-secretc<s::S>
  malloc(?size-of=mbedtls-ssl-premaster-secret/size-of)

pub fun mbedtls-ssl-premaster-secretc-calloc(): mbedtls-ssl-premaster-secretc<s::S>
  malloc-c(?size-of=mbedtls-ssl-premaster-secret/size-of)

pub fun mbedtls-ssl-premaster-secretc-array(n: int): mbedtls-ssl-premaster-secretca<s::S>
  malloc(n.int32, ?size-of=mbedtls-ssl-premaster-secret/size-of)

pub fun mbedtls-ssl-premaster-secretc-array-calloc(n: int): mbedtls-ssl-premaster-secretca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-ssl-premaster-secret/size-of)

inline extern mbedtls-ssl-premaster-secret-ptr/dummy(s: intptr_t): int8
  c inline "(unsigned char)(((union mbedtls_ssl_premaster_secret*)#1)->dummy)"

pub inline fun mbedtls-ssl-premaster-secretc/dummy(^s: mbedtls-ssl-premaster-secretc<s::S>): int8
  s.with-ptr(mbedtls-ssl-premaster-secret-ptr/dummy)

pub inline fun mbedtls-ssl-premaster-secretcb/dummy(^s: mbedtls-ssl-premaster-secretcb<s::S>): int8
  s.with-ptr(mbedtls-ssl-premaster-secret-ptr/dummy)

inline extern mbedtls-ssl-premaster-secret-ptr/set-dummy(s: intptr_t, dummy: int8): ()
  c inline "((union mbedtls_ssl_premaster_secret*)#1)->dummy = (unsigned char)#2"

pub inline fun mbedtls-ssl-premaster-secretc/set-dummy(^s: mbedtls-ssl-premaster-secretc<s::S>, dummy: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ssl-premaster-secret-ptr/set-dummy(dummy))

pub inline fun mbedtls-ssl-premaster-secretcb/set-dummy(^s: mbedtls-ssl-premaster-secretcb<s::S>, dummy: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ssl-premaster-secret-ptr/set-dummy(dummy))

pub inline fun mbedtls-ssl-premaster-secretc-wrapper/dummy(^s: mbedtls-ssl-premaster-secretc<s::S>): int
  s.with-ptr(mbedtls-ssl-premaster-secret-ptr/dummy).int

pub inline fun mbedtls-ssl-premaster-secretcb-wrapper/dummy(^s: mbedtls-ssl-premaster-secretcb<s::S>): int
  s.with-ptr(mbedtls-ssl-premaster-secret-ptr/dummy).int

pub inline fun mbedtls-ssl-premaster-secretc-wrapper/set-dummy(^s: mbedtls-ssl-premaster-secretc<s::S>, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ssl-premaster-secret-ptr/set-dummy(dummy.int8))

pub inline fun mbedtls-ssl-premaster-secretcb-wrapper/set-dummy(^s: mbedtls-ssl-premaster-secretcb<s::S>, dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ssl-premaster-secret-ptr/set-dummy(dummy.int8))

type mbedtls_ssl_states
  MBEDTLS_SSL_HELLO_REQUEST
  MBEDTLS_SSL_CLIENT_HELLO
  MBEDTLS_SSL_SERVER_HELLO
  MBEDTLS_SSL_SERVER_CERTIFICATE
  MBEDTLS_SSL_SERVER_KEY_EXCHANGE
  MBEDTLS_SSL_CERTIFICATE_REQUEST
  MBEDTLS_SSL_SERVER_HELLO_DONE
  MBEDTLS_SSL_CLIENT_CERTIFICATE
  MBEDTLS_SSL_CLIENT_KEY_EXCHANGE
  MBEDTLS_SSL_CERTIFICATE_VERIFY
  MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC
  MBEDTLS_SSL_CLIENT_FINISHED
  MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC
  MBEDTLS_SSL_SERVER_FINISHED
  MBEDTLS_SSL_FLUSH_BUFFERS
  MBEDTLS_SSL_HANDSHAKE_WRAPUP
  MBEDTLS_SSL_NEW_SESSION_TICKET
  MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT
  MBEDTLS_SSL_HELLO_RETRY_REQUEST
  MBEDTLS_SSL_ENCRYPTED_EXTENSIONS
  MBEDTLS_SSL_END_OF_EARLY_DATA
  MBEDTLS_SSL_CLIENT_CERTIFICATE_VERIFY
  MBEDTLS_SSL_CLIENT_CCS_AFTER_SERVER_FINISHED
  MBEDTLS_SSL_CLIENT_CCS_BEFORE_2ND_CLIENT_HELLO
  MBEDTLS_SSL_SERVER_CCS_AFTER_SERVER_HELLO
  MBEDTLS_SSL_CLIENT_CCS_AFTER_CLIENT_HELLO
  MBEDTLS_SSL_SERVER_CCS_AFTER_HELLO_RETRY_REQUEST
  MBEDTLS_SSL_HANDSHAKE_OVER
  MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET
  MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET_FLUSH

pub fun mbedtls_ssl_states/int(i: mbedtls_ssl_states): int
  match i
    MBEDTLS_SSL_HELLO_REQUEST -> 0
    MBEDTLS_SSL_CLIENT_HELLO -> 1
    MBEDTLS_SSL_SERVER_HELLO -> 2
    MBEDTLS_SSL_SERVER_CERTIFICATE -> 3
    MBEDTLS_SSL_SERVER_KEY_EXCHANGE -> 4
    MBEDTLS_SSL_CERTIFICATE_REQUEST -> 5
    MBEDTLS_SSL_SERVER_HELLO_DONE -> 6
    MBEDTLS_SSL_CLIENT_CERTIFICATE -> 7
    MBEDTLS_SSL_CLIENT_KEY_EXCHANGE -> 8
    MBEDTLS_SSL_CERTIFICATE_VERIFY -> 9
    MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC -> 10
    MBEDTLS_SSL_CLIENT_FINISHED -> 11
    MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC -> 12
    MBEDTLS_SSL_SERVER_FINISHED -> 13
    MBEDTLS_SSL_FLUSH_BUFFERS -> 14
    MBEDTLS_SSL_HANDSHAKE_WRAPUP -> 15
    MBEDTLS_SSL_NEW_SESSION_TICKET -> 16
    MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT -> 17
    MBEDTLS_SSL_HELLO_RETRY_REQUEST -> 18
    MBEDTLS_SSL_ENCRYPTED_EXTENSIONS -> 19
    MBEDTLS_SSL_END_OF_EARLY_DATA -> 20
    MBEDTLS_SSL_CLIENT_CERTIFICATE_VERIFY -> 21
    MBEDTLS_SSL_CLIENT_CCS_AFTER_SERVER_FINISHED -> 22
    MBEDTLS_SSL_CLIENT_CCS_BEFORE_2ND_CLIENT_HELLO -> 23
    MBEDTLS_SSL_SERVER_CCS_AFTER_SERVER_HELLO -> 24
    MBEDTLS_SSL_CLIENT_CCS_AFTER_CLIENT_HELLO -> 25
    MBEDTLS_SSL_SERVER_CCS_AFTER_HELLO_RETRY_REQUEST -> 26
    MBEDTLS_SSL_HANDSHAKE_OVER -> 27
    MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET -> 28
    MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET_FLUSH -> 29

pub fun int/mbedtls_ssl_states(i: int): exn mbedtls_ssl_states
  match i
    0 -> MBEDTLS_SSL_HELLO_REQUEST
    1 -> MBEDTLS_SSL_CLIENT_HELLO
    2 -> MBEDTLS_SSL_SERVER_HELLO
    3 -> MBEDTLS_SSL_SERVER_CERTIFICATE
    4 -> MBEDTLS_SSL_SERVER_KEY_EXCHANGE
    5 -> MBEDTLS_SSL_CERTIFICATE_REQUEST
    6 -> MBEDTLS_SSL_SERVER_HELLO_DONE
    7 -> MBEDTLS_SSL_CLIENT_CERTIFICATE
    8 -> MBEDTLS_SSL_CLIENT_KEY_EXCHANGE
    9 -> MBEDTLS_SSL_CERTIFICATE_VERIFY
    10 -> MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC
    11 -> MBEDTLS_SSL_CLIENT_FINISHED
    12 -> MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC
    13 -> MBEDTLS_SSL_SERVER_FINISHED
    14 -> MBEDTLS_SSL_FLUSH_BUFFERS
    15 -> MBEDTLS_SSL_HANDSHAKE_WRAPUP
    16 -> MBEDTLS_SSL_NEW_SESSION_TICKET
    17 -> MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT
    18 -> MBEDTLS_SSL_HELLO_RETRY_REQUEST
    19 -> MBEDTLS_SSL_ENCRYPTED_EXTENSIONS
    20 -> MBEDTLS_SSL_END_OF_EARLY_DATA
    21 -> MBEDTLS_SSL_CLIENT_CERTIFICATE_VERIFY
    22 -> MBEDTLS_SSL_CLIENT_CCS_AFTER_SERVER_FINISHED
    23 -> MBEDTLS_SSL_CLIENT_CCS_BEFORE_2ND_CLIENT_HELLO
    24 -> MBEDTLS_SSL_SERVER_CCS_AFTER_SERVER_HELLO
    25 -> MBEDTLS_SSL_CLIENT_CCS_AFTER_CLIENT_HELLO
    26 -> MBEDTLS_SSL_SERVER_CCS_AFTER_HELLO_RETRY_REQUEST
    27 -> MBEDTLS_SSL_HANDSHAKE_OVER
    28 -> MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET
    29 -> MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET_FLUSH

// Human-friendly representation of the (D)TLS protocol version.
type mbedtls_ssl_protocol_version
  // !< Context not in use or version not yet negotiated.
  MBEDTLS_SSL_VERSION_UNKNOWN
  // !< (D)TLS 1.2
  MBEDTLS_SSL_VERSION_TLS1_2
  // !< (D)TLS 1.3
  MBEDTLS_SSL_VERSION_TLS1_3

pub fun mbedtls_ssl_protocol_version/int(i: mbedtls_ssl_protocol_version): int
  match i
    MBEDTLS_SSL_VERSION_UNKNOWN -> 0
    MBEDTLS_SSL_VERSION_TLS1_2 -> 771
    MBEDTLS_SSL_VERSION_TLS1_3 -> 772

pub fun int/mbedtls_ssl_protocol_version(i: int): exn mbedtls_ssl_protocol_version
  match i
    0 -> MBEDTLS_SSL_VERSION_UNKNOWN
    771 -> MBEDTLS_SSL_VERSION_TLS1_2
    772 -> MBEDTLS_SSL_VERSION_TLS1_3

type mbedtls_tls_prf_types
  MBEDTLS_SSL_TLS_PRF_NONE
  MBEDTLS_SSL_TLS_PRF_SHA384
  MBEDTLS_SSL_TLS_PRF_SHA256
  MBEDTLS_SSL_HKDF_EXPAND_SHA384
  MBEDTLS_SSL_HKDF_EXPAND_SHA256

pub fun mbedtls_tls_prf_types/int(i: mbedtls_tls_prf_types): int
  match i
    MBEDTLS_SSL_TLS_PRF_NONE -> 0
    MBEDTLS_SSL_TLS_PRF_SHA384 -> 1
    MBEDTLS_SSL_TLS_PRF_SHA256 -> 2
    MBEDTLS_SSL_HKDF_EXPAND_SHA384 -> 3
    MBEDTLS_SSL_HKDF_EXPAND_SHA256 -> 4

pub fun int/mbedtls_tls_prf_types(i: int): exn mbedtls_tls_prf_types
  match i
    0 -> MBEDTLS_SSL_TLS_PRF_NONE
    1 -> MBEDTLS_SSL_TLS_PRF_SHA384
    2 -> MBEDTLS_SSL_TLS_PRF_SHA256
    3 -> MBEDTLS_SSL_HKDF_EXPAND_SHA384
    4 -> MBEDTLS_SSL_HKDF_EXPAND_SHA256

type mbedtls_ssl_key_export_type
  MBEDTLS_SSL_KEY_EXPORT_TLS12_MASTER_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_EARLY_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_EARLY_EXPORTER_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_HANDSHAKE_TRAFFIC_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_HANDSHAKE_TRAFFIC_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_APPLICATION_TRAFFIC_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_APPLICATION_TRAFFIC_SECRET

pub fun mbedtls_ssl_key_export_type/int(i: mbedtls_ssl_key_export_type): int
  match i
    MBEDTLS_SSL_KEY_EXPORT_TLS12_MASTER_SECRET -> 0
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_EARLY_SECRET -> 1
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_EARLY_EXPORTER_SECRET -> 2
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_HANDSHAKE_TRAFFIC_SECRET -> 3
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_HANDSHAKE_TRAFFIC_SECRET -> 4
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_APPLICATION_TRAFFIC_SECRET -> 5
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_APPLICATION_TRAFFIC_SECRET -> 6

pub fun int/mbedtls_ssl_key_export_type(i: int): exn mbedtls_ssl_key_export_type
  match i
    0 -> MBEDTLS_SSL_KEY_EXPORT_TLS12_MASTER_SECRET
    1 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_EARLY_SECRET
    2 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_EARLY_EXPORTER_SECRET
    3 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_HANDSHAKE_TRAFFIC_SECRET
    4 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_HANDSHAKE_TRAFFIC_SECRET
    5 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_APPLICATION_TRAFFIC_SECRET
    6 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_APPLICATION_TRAFFIC_SECRET

pub type mbedtls-ssl-user-data-t-c
pub alias mbedtls-ssl-user-data-tc = owned-c<mbedtls-ssl-user-data-t-c>
pub alias mbedtls-ssl-user-data-tcb<s::S> = borrowed-c<s,mbedtls-ssl-user-data-t-c>
pub alias mbedtls-ssl-user-data-tca = owned-c<c-array<mbedtls-ssl-user-data-t>>

extern mbedtls-ssl-user-data-t/size-of(c: c-null<mbedtls-ssl-user-data-t-c>): int32
  c inline "sizeof(union mbedtls_ssl_user_data_t)"

pub fun mbedtls-ssl-user-data-tc(): mbedtls-ssl-user-data-tc
  malloc(?size-of=mbedtls-ssl-user-data-t/size-of)

pub fun mbedtls-ssl-user-data-tc-calloc(): mbedtls-ssl-user-data-tc
  malloc-c(?size-of=mbedtls-ssl-user-data-t/size-of)

pub fun mbedtls-ssl-user-data-tc-array(n: int): mbedtls-ssl-user-data-tca
  malloc(n.int32, ?size-of=mbedtls-ssl-user-data-t/size-of)

pub fun mbedtls-ssl-user-data-tc-array-calloc(n: int): mbedtls-ssl-user-data-tca
  malloc-c(n.int32, ?size-of=mbedtls-ssl-user-data-t/size-of)

inline extern mbedtls-ssl-user-data-t-ptr/n(s: intptr_t): intptr_t
  c inline "(intptr_t)(((union mbedtls_ssl_user_data_t*)#1)->n)"

pub inline fun mbedtls-ssl-user-data-tc/n(^s: mbedtls-ssl-user-data-tc): intptr_t
  s.with-ptr(mbedtls-ssl-user-data-t-ptr/n)

pub inline fun mbedtls-ssl-user-data-tcb/n(^s: mbedtls-ssl-user-data-tcb<s::S>): intptr_t
  s.with-ptr(mbedtls-ssl-user-data-t-ptr/n)

inline extern mbedtls-ssl-user-data-t-ptr/set-n(s: intptr_t, n: intptr_t): ()
  c inline "((union mbedtls_ssl_user_data_t*)#1)->n = (intptr_t)#2"

pub inline fun mbedtls-ssl-user-data-tc/set-n(^s: mbedtls-ssl-user-data-tc, n: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ssl-user-data-t-ptr/set-n(n))

pub inline fun mbedtls-ssl-user-data-tcb/set-n(^s: mbedtls-ssl-user-data-tcb<s::S>, n: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ssl-user-data-t-ptr/set-n(n))

inline extern mbedtls-ssl-user-data-t-ptr/p(s: intptr_t): intptr_t
  c inline "(intptr_t)(((union mbedtls_ssl_user_data_t*)#1)->p)"

pub inline fun mbedtls-ssl-user-data-tc/p(^s: mbedtls-ssl-user-data-tc): intptr_t
  s.with-ptr(mbedtls-ssl-user-data-t-ptr/p)

pub inline fun mbedtls-ssl-user-data-tcb/p(^s: mbedtls-ssl-user-data-tcb<s::S>): intptr_t
  s.with-ptr(mbedtls-ssl-user-data-t-ptr/p)

inline extern mbedtls-ssl-user-data-t-ptr/set-p(s: intptr_t, p: intptr_t): ()
  c inline "((union mbedtls_ssl_user_data_t*)#1)->p = (kk_unit_t*)#2"

pub inline fun mbedtls-ssl-user-data-tc/set-p(^s: mbedtls-ssl-user-data-tc, p: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ssl-user-data-t-ptr/set-p(p))

pub inline fun mbedtls-ssl-user-data-tcb/set-p(^s: mbedtls-ssl-user-data-tcb<s::S>, p: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ssl-user-data-t-ptr/set-p(p))

pub inline fun mbedtls-ssl-user-data-tc-wrapper/p(^s: mbedtls-ssl-user-data-tc): owned-c<()>
  s.with-ptr(mbedtls-ssl-user-data-t-ptr/p).c-own

pub inline fun mbedtls-ssl-user-data-tcb-wrapper/p(^s: mbedtls-ssl-user-data-tcb<s::S>): owned-c<()>
  s.with-ptr(mbedtls-ssl-user-data-t-ptr/p).c-own

pub inline fun mbedtls-ssl-user-data-tc-wrapper/set-p(^s: mbedtls-ssl-user-data-tc, p: owned-c<()>): ()
  with koka-ptr <- p.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ssl-user-data-t-ptr/set-p(koka-ptr))

pub inline fun mbedtls-ssl-user-data-tcb-wrapper/set-p(^s: mbedtls-ssl-user-data-tcb<s::S>, p: owned-c<()>): ()
  with koka-ptr <- p.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ssl-user-data-t-ptr/set-p(koka-ptr))

pub struct psa-mac-operation-s
pub type psa-mac-operation-s-c
pub alias psa-mac-operation-sc = owned-c<psa-mac-operation-s-c>
pub alias psa-mac-operation-scb<s::S> = borrowed-c<s,psa-mac-operation-s-c>
pub alias psa-mac-operation-sca = owned-c<c-array<psa-mac-operation-s>>

pub fun psa-mac-operation-s/to-koka(s: psa-mac-operation-sc): psa-mac-operation-s
  Psa-mac-operation-s()

// \brief          The GCM context structure.
pub type mbedtls-gcm-context-c
pub alias mbedtls-gcm-contextc<s::S> = owned-c<mbedtls-gcm-context-c>
pub alias mbedtls-gcm-contextcb<s::S> = borrowed-c<s,mbedtls-gcm-context-c>
pub alias mbedtls-gcm-contextca<s::S> = owned-c<c-array<mbedtls-gcm-context>>

extern mbedtls-gcm-context/size-of(c: c-null<mbedtls-gcm-context-c>): int32
  c inline "sizeof(struct mbedtls_gcm_context)"

pub fun mbedtls-gcm-contextc(): mbedtls-gcm-contextc<s::S>
  malloc(?size-of=mbedtls-gcm-context/size-of)

pub fun mbedtls-gcm-contextc-calloc(): mbedtls-gcm-contextc<s::S>
  malloc-c(?size-of=mbedtls-gcm-context/size-of)

pub fun mbedtls-gcm-contextc-array(n: int): mbedtls-gcm-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-gcm-context/size-of)

pub fun mbedtls-gcm-contextc-array-calloc(n: int): mbedtls-gcm-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-gcm-context/size-of)

inline extern mbedtls-gcm-context-ptr/private_cipher_ctx(s: intptr_t): mbedtls-cipher-context-t-c
  c inline "(mbedtls_cipher_context_t)(((struct mbedtls_gcm_context*)#1)->private_cipher_ctx)"

pub inline fun mbedtls-gcm-contextc/private_cipher_ctx(^s: mbedtls-gcm-contextc<s::S>): mbedtls-cipher-context-t-c
  s.with-ptr(mbedtls-gcm-context-ptr/private_cipher_ctx)

pub inline fun mbedtls-gcm-contextcb/private_cipher_ctx(^s: mbedtls-gcm-contextcb<s::S>): mbedtls-cipher-context-t-c
  s.with-ptr(mbedtls-gcm-context-ptr/private_cipher_ctx)

inline extern mbedtls-gcm-context-ptr/set-private_cipher_ctx(s: intptr_t, private_cipher_ctx: mbedtls-cipher-context-t-c): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_cipher_ctx = (mbedtls_cipher_context_t)#2"

pub inline fun mbedtls-gcm-contextc/set-private_cipher_ctx(^s: mbedtls-gcm-contextc<s::S>, private_cipher_ctx: mbedtls-cipher-context-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_cipher_ctx(private_cipher_ctx))

pub inline fun mbedtls-gcm-contextcb/set-private_cipher_ctx(^s: mbedtls-gcm-contextcb<s::S>, private_cipher_ctx: mbedtls-cipher-context-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_cipher_ctx(private_cipher_ctx))

inline extern mbedtls-gcm-context-ptr/private_len(s: intptr_t): int64
  c inline "(int64_t)(((struct mbedtls_gcm_context*)#1)->private_len)"

pub inline fun mbedtls-gcm-contextc/private_len(^s: mbedtls-gcm-contextc<s::S>): int64
  s.with-ptr(mbedtls-gcm-context-ptr/private_len)

pub inline fun mbedtls-gcm-contextcb/private_len(^s: mbedtls-gcm-contextcb<s::S>): int64
  s.with-ptr(mbedtls-gcm-context-ptr/private_len)

inline extern mbedtls-gcm-context-ptr/set-private_len(s: intptr_t, private_len: int64): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_len = (int64_t)#2"

pub inline fun mbedtls-gcm-contextc/set-private_len(^s: mbedtls-gcm-contextc<s::S>, private_len: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_len(private_len))

pub inline fun mbedtls-gcm-contextcb/set-private_len(^s: mbedtls-gcm-contextcb<s::S>, private_len: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_len(private_len))

pub inline fun mbedtls-gcm-contextc-wrapper/private_len(^s: mbedtls-gcm-contextc<s::S>): int
  s.with-ptr(mbedtls-gcm-context-ptr/private_len).int

pub inline fun mbedtls-gcm-contextcb-wrapper/private_len(^s: mbedtls-gcm-contextcb<s::S>): int
  s.with-ptr(mbedtls-gcm-context-ptr/private_len).int

pub inline fun mbedtls-gcm-contextc-wrapper/set-private_len(^s: mbedtls-gcm-contextc<s::S>, private_len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_len(private_len.int64))

pub inline fun mbedtls-gcm-contextcb-wrapper/set-private_len(^s: mbedtls-gcm-contextcb<s::S>, private_len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_len(private_len.int64))

inline extern mbedtls-gcm-context-ptr/private_add_len(s: intptr_t): int64
  c inline "(int64_t)(((struct mbedtls_gcm_context*)#1)->private_add_len)"

pub inline fun mbedtls-gcm-contextc/private_add_len(^s: mbedtls-gcm-contextc<s::S>): int64
  s.with-ptr(mbedtls-gcm-context-ptr/private_add_len)

pub inline fun mbedtls-gcm-contextcb/private_add_len(^s: mbedtls-gcm-contextcb<s::S>): int64
  s.with-ptr(mbedtls-gcm-context-ptr/private_add_len)

inline extern mbedtls-gcm-context-ptr/set-private_add_len(s: intptr_t, private_add_len: int64): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_add_len = (int64_t)#2"

pub inline fun mbedtls-gcm-contextc/set-private_add_len(^s: mbedtls-gcm-contextc<s::S>, private_add_len: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_add_len(private_add_len))

pub inline fun mbedtls-gcm-contextcb/set-private_add_len(^s: mbedtls-gcm-contextcb<s::S>, private_add_len: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_add_len(private_add_len))

pub inline fun mbedtls-gcm-contextc-wrapper/private_add_len(^s: mbedtls-gcm-contextc<s::S>): int
  s.with-ptr(mbedtls-gcm-context-ptr/private_add_len).int

pub inline fun mbedtls-gcm-contextcb-wrapper/private_add_len(^s: mbedtls-gcm-contextcb<s::S>): int
  s.with-ptr(mbedtls-gcm-context-ptr/private_add_len).int

pub inline fun mbedtls-gcm-contextc-wrapper/set-private_add_len(^s: mbedtls-gcm-contextc<s::S>, private_add_len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_add_len(private_add_len.int64))

pub inline fun mbedtls-gcm-contextcb-wrapper/set-private_add_len(^s: mbedtls-gcm-contextcb<s::S>, private_add_len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_add_len(private_add_len.int64))

inline extern mbedtls-gcm-context-ptr/private_mode(s: intptr_t): int8
  c inline "(unsigned char)(((struct mbedtls_gcm_context*)#1)->private_mode)"

pub inline fun mbedtls-gcm-contextc/private_mode(^s: mbedtls-gcm-contextc<s::S>): int8
  s.with-ptr(mbedtls-gcm-context-ptr/private_mode)

pub inline fun mbedtls-gcm-contextcb/private_mode(^s: mbedtls-gcm-contextcb<s::S>): int8
  s.with-ptr(mbedtls-gcm-context-ptr/private_mode)

inline extern mbedtls-gcm-context-ptr/set-private_mode(s: intptr_t, private_mode: int8): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_mode = (unsigned char)#2"

pub inline fun mbedtls-gcm-contextc/set-private_mode(^s: mbedtls-gcm-contextc<s::S>, private_mode: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_mode(private_mode))

pub inline fun mbedtls-gcm-contextcb/set-private_mode(^s: mbedtls-gcm-contextcb<s::S>, private_mode: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_mode(private_mode))

pub inline fun mbedtls-gcm-contextc-wrapper/private_mode(^s: mbedtls-gcm-contextc<s::S>): int
  s.with-ptr(mbedtls-gcm-context-ptr/private_mode).int

pub inline fun mbedtls-gcm-contextcb-wrapper/private_mode(^s: mbedtls-gcm-contextcb<s::S>): int
  s.with-ptr(mbedtls-gcm-context-ptr/private_mode).int

pub inline fun mbedtls-gcm-contextc-wrapper/set-private_mode(^s: mbedtls-gcm-contextc<s::S>, private_mode: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_mode(private_mode.int8))

pub inline fun mbedtls-gcm-contextcb-wrapper/set-private_mode(^s: mbedtls-gcm-contextcb<s::S>, private_mode: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_mode(private_mode.int8))

inline extern mbedtls-gcm-context-ptr/private_acceleration(s: intptr_t): int8
  c inline "(unsigned char)(((struct mbedtls_gcm_context*)#1)->private_acceleration)"

pub inline fun mbedtls-gcm-contextc/private_acceleration(^s: mbedtls-gcm-contextc<s::S>): int8
  s.with-ptr(mbedtls-gcm-context-ptr/private_acceleration)

pub inline fun mbedtls-gcm-contextcb/private_acceleration(^s: mbedtls-gcm-contextcb<s::S>): int8
  s.with-ptr(mbedtls-gcm-context-ptr/private_acceleration)

inline extern mbedtls-gcm-context-ptr/set-private_acceleration(s: intptr_t, private_acceleration: int8): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_acceleration = (unsigned char)#2"

pub inline fun mbedtls-gcm-contextc/set-private_acceleration(^s: mbedtls-gcm-contextc<s::S>, private_acceleration: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_acceleration(private_acceleration))

pub inline fun mbedtls-gcm-contextcb/set-private_acceleration(^s: mbedtls-gcm-contextcb<s::S>, private_acceleration: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_acceleration(private_acceleration))

pub inline fun mbedtls-gcm-contextc-wrapper/private_acceleration(^s: mbedtls-gcm-contextc<s::S>): int
  s.with-ptr(mbedtls-gcm-context-ptr/private_acceleration).int

pub inline fun mbedtls-gcm-contextcb-wrapper/private_acceleration(^s: mbedtls-gcm-contextcb<s::S>): int
  s.with-ptr(mbedtls-gcm-context-ptr/private_acceleration).int

pub inline fun mbedtls-gcm-contextc-wrapper/set-private_acceleration(^s: mbedtls-gcm-contextc<s::S>, private_acceleration: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_acceleration(private_acceleration.int8))

pub inline fun mbedtls-gcm-contextcb-wrapper/set-private_acceleration(^s: mbedtls-gcm-contextcb<s::S>, private_acceleration: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-context-ptr/set-private_acceleration(private_acceleration.int8))

// \brief    The CCM context-type definition. The CCM context is passed
// to the APIs called.
pub type mbedtls-ccm-context-c
pub alias mbedtls-ccm-contextc<s::S> = owned-c<mbedtls-ccm-context-c>
pub alias mbedtls-ccm-contextcb<s::S> = borrowed-c<s,mbedtls-ccm-context-c>
pub alias mbedtls-ccm-contextca<s::S> = owned-c<c-array<mbedtls-ccm-context>>

extern mbedtls-ccm-context/size-of(c: c-null<mbedtls-ccm-context-c>): int32
  c inline "sizeof(struct mbedtls_ccm_context)"

pub fun mbedtls-ccm-contextc(): mbedtls-ccm-contextc<s::S>
  malloc(?size-of=mbedtls-ccm-context/size-of)

pub fun mbedtls-ccm-contextc-calloc(): mbedtls-ccm-contextc<s::S>
  malloc-c(?size-of=mbedtls-ccm-context/size-of)

pub fun mbedtls-ccm-contextc-array(n: int): mbedtls-ccm-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-ccm-context/size-of)

pub fun mbedtls-ccm-contextc-array-calloc(n: int): mbedtls-ccm-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-ccm-context/size-of)

inline extern mbedtls-ccm-context-ptr/private_plaintext_len(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_ccm_context*)#1)->private_plaintext_len)"

pub inline fun mbedtls-ccm-contextc/private_plaintext_len(^s: mbedtls-ccm-contextc<s::S>): ssize_t
  s.with-ptr(mbedtls-ccm-context-ptr/private_plaintext_len)

pub inline fun mbedtls-ccm-contextcb/private_plaintext_len(^s: mbedtls-ccm-contextcb<s::S>): ssize_t
  s.with-ptr(mbedtls-ccm-context-ptr/private_plaintext_len)

inline extern mbedtls-ccm-context-ptr/set-private_plaintext_len(s: intptr_t, private_plaintext_len: ssize_t): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_plaintext_len = (ssize_t)#2"

pub inline fun mbedtls-ccm-contextc/set-private_plaintext_len(^s: mbedtls-ccm-contextc<s::S>, private_plaintext_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_plaintext_len(private_plaintext_len))

pub inline fun mbedtls-ccm-contextcb/set-private_plaintext_len(^s: mbedtls-ccm-contextcb<s::S>, private_plaintext_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_plaintext_len(private_plaintext_len))

inline extern mbedtls-ccm-context-ptr/private_add_len(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_ccm_context*)#1)->private_add_len)"

pub inline fun mbedtls-ccm-contextc/private_add_len(^s: mbedtls-ccm-contextc<s::S>): ssize_t
  s.with-ptr(mbedtls-ccm-context-ptr/private_add_len)

pub inline fun mbedtls-ccm-contextcb/private_add_len(^s: mbedtls-ccm-contextcb<s::S>): ssize_t
  s.with-ptr(mbedtls-ccm-context-ptr/private_add_len)

inline extern mbedtls-ccm-context-ptr/set-private_add_len(s: intptr_t, private_add_len: ssize_t): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_add_len = (ssize_t)#2"

pub inline fun mbedtls-ccm-contextc/set-private_add_len(^s: mbedtls-ccm-contextc<s::S>, private_add_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_add_len(private_add_len))

pub inline fun mbedtls-ccm-contextcb/set-private_add_len(^s: mbedtls-ccm-contextcb<s::S>, private_add_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_add_len(private_add_len))

inline extern mbedtls-ccm-context-ptr/private_tag_len(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_ccm_context*)#1)->private_tag_len)"

pub inline fun mbedtls-ccm-contextc/private_tag_len(^s: mbedtls-ccm-contextc<s::S>): ssize_t
  s.with-ptr(mbedtls-ccm-context-ptr/private_tag_len)

pub inline fun mbedtls-ccm-contextcb/private_tag_len(^s: mbedtls-ccm-contextcb<s::S>): ssize_t
  s.with-ptr(mbedtls-ccm-context-ptr/private_tag_len)

inline extern mbedtls-ccm-context-ptr/set-private_tag_len(s: intptr_t, private_tag_len: ssize_t): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_tag_len = (ssize_t)#2"

pub inline fun mbedtls-ccm-contextc/set-private_tag_len(^s: mbedtls-ccm-contextc<s::S>, private_tag_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_tag_len(private_tag_len))

pub inline fun mbedtls-ccm-contextcb/set-private_tag_len(^s: mbedtls-ccm-contextcb<s::S>, private_tag_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_tag_len(private_tag_len))

inline extern mbedtls-ccm-context-ptr/private_processed(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_ccm_context*)#1)->private_processed)"

pub inline fun mbedtls-ccm-contextc/private_processed(^s: mbedtls-ccm-contextc<s::S>): ssize_t
  s.with-ptr(mbedtls-ccm-context-ptr/private_processed)

pub inline fun mbedtls-ccm-contextcb/private_processed(^s: mbedtls-ccm-contextcb<s::S>): ssize_t
  s.with-ptr(mbedtls-ccm-context-ptr/private_processed)

inline extern mbedtls-ccm-context-ptr/set-private_processed(s: intptr_t, private_processed: ssize_t): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_processed = (ssize_t)#2"

pub inline fun mbedtls-ccm-contextc/set-private_processed(^s: mbedtls-ccm-contextc<s::S>, private_processed: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_processed(private_processed))

pub inline fun mbedtls-ccm-contextcb/set-private_processed(^s: mbedtls-ccm-contextcb<s::S>, private_processed: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_processed(private_processed))

inline extern mbedtls-ccm-context-ptr/private_q(s: intptr_t): int32
  c inline "(unsigned int)(((struct mbedtls_ccm_context*)#1)->private_q)"

pub inline fun mbedtls-ccm-contextc/private_q(^s: mbedtls-ccm-contextc<s::S>): int32
  s.with-ptr(mbedtls-ccm-context-ptr/private_q)

pub inline fun mbedtls-ccm-contextcb/private_q(^s: mbedtls-ccm-contextcb<s::S>): int32
  s.with-ptr(mbedtls-ccm-context-ptr/private_q)

inline extern mbedtls-ccm-context-ptr/set-private_q(s: intptr_t, private_q: int32): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_q = (unsigned int)#2"

pub inline fun mbedtls-ccm-contextc/set-private_q(^s: mbedtls-ccm-contextc<s::S>, private_q: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_q(private_q))

pub inline fun mbedtls-ccm-contextcb/set-private_q(^s: mbedtls-ccm-contextcb<s::S>, private_q: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_q(private_q))

pub inline fun mbedtls-ccm-contextc-wrapper/private_q(^s: mbedtls-ccm-contextc<s::S>): int
  s.with-ptr(mbedtls-ccm-context-ptr/private_q).int

pub inline fun mbedtls-ccm-contextcb-wrapper/private_q(^s: mbedtls-ccm-contextcb<s::S>): int
  s.with-ptr(mbedtls-ccm-context-ptr/private_q).int

pub inline fun mbedtls-ccm-contextc-wrapper/set-private_q(^s: mbedtls-ccm-contextc<s::S>, private_q: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_q(private_q.int32))

pub inline fun mbedtls-ccm-contextcb-wrapper/set-private_q(^s: mbedtls-ccm-contextcb<s::S>, private_q: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_q(private_q.int32))

inline extern mbedtls-ccm-context-ptr/private_mode(s: intptr_t): int32
  c inline "(unsigned int)(((struct mbedtls_ccm_context*)#1)->private_mode)"

pub inline fun mbedtls-ccm-contextc/private_mode(^s: mbedtls-ccm-contextc<s::S>): int32
  s.with-ptr(mbedtls-ccm-context-ptr/private_mode)

pub inline fun mbedtls-ccm-contextcb/private_mode(^s: mbedtls-ccm-contextcb<s::S>): int32
  s.with-ptr(mbedtls-ccm-context-ptr/private_mode)

inline extern mbedtls-ccm-context-ptr/set-private_mode(s: intptr_t, private_mode: int32): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_mode = (unsigned int)#2"

pub inline fun mbedtls-ccm-contextc/set-private_mode(^s: mbedtls-ccm-contextc<s::S>, private_mode: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_mode(private_mode))

pub inline fun mbedtls-ccm-contextcb/set-private_mode(^s: mbedtls-ccm-contextcb<s::S>, private_mode: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_mode(private_mode))

pub inline fun mbedtls-ccm-contextc-wrapper/private_mode(^s: mbedtls-ccm-contextc<s::S>): int
  s.with-ptr(mbedtls-ccm-context-ptr/private_mode).int

pub inline fun mbedtls-ccm-contextcb-wrapper/private_mode(^s: mbedtls-ccm-contextcb<s::S>): int
  s.with-ptr(mbedtls-ccm-context-ptr/private_mode).int

pub inline fun mbedtls-ccm-contextc-wrapper/set-private_mode(^s: mbedtls-ccm-contextc<s::S>, private_mode: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_mode(private_mode.int32))

pub inline fun mbedtls-ccm-contextcb-wrapper/set-private_mode(^s: mbedtls-ccm-contextcb<s::S>, private_mode: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_mode(private_mode.int32))

inline extern mbedtls-ccm-context-ptr/private_cipher_ctx(s: intptr_t): mbedtls-cipher-context-t-c
  c inline "(mbedtls_cipher_context_t)(((struct mbedtls_ccm_context*)#1)->private_cipher_ctx)"

pub inline fun mbedtls-ccm-contextc/private_cipher_ctx(^s: mbedtls-ccm-contextc<s::S>): mbedtls-cipher-context-t-c
  s.with-ptr(mbedtls-ccm-context-ptr/private_cipher_ctx)

pub inline fun mbedtls-ccm-contextcb/private_cipher_ctx(^s: mbedtls-ccm-contextcb<s::S>): mbedtls-cipher-context-t-c
  s.with-ptr(mbedtls-ccm-context-ptr/private_cipher_ctx)

inline extern mbedtls-ccm-context-ptr/set-private_cipher_ctx(s: intptr_t, private_cipher_ctx: mbedtls-cipher-context-t-c): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_cipher_ctx = (mbedtls_cipher_context_t)#2"

pub inline fun mbedtls-ccm-contextc/set-private_cipher_ctx(^s: mbedtls-ccm-contextc<s::S>, private_cipher_ctx: mbedtls-cipher-context-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_cipher_ctx(private_cipher_ctx))

pub inline fun mbedtls-ccm-contextcb/set-private_cipher_ctx(^s: mbedtls-ccm-contextcb<s::S>, private_cipher_ctx: mbedtls-cipher-context-t-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_cipher_ctx(private_cipher_ctx))

inline extern mbedtls-ccm-context-ptr/private_state(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_ccm_context*)#1)->private_state)"

pub inline fun mbedtls-ccm-contextc/private_state(^s: mbedtls-ccm-contextc<s::S>): int32
  s.with-ptr(mbedtls-ccm-context-ptr/private_state)

pub inline fun mbedtls-ccm-contextcb/private_state(^s: mbedtls-ccm-contextcb<s::S>): int32
  s.with-ptr(mbedtls-ccm-context-ptr/private_state)

inline extern mbedtls-ccm-context-ptr/set-private_state(s: intptr_t, private_state: int32): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_state = (int)#2"

pub inline fun mbedtls-ccm-contextc/set-private_state(^s: mbedtls-ccm-contextc<s::S>, private_state: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_state(private_state))

pub inline fun mbedtls-ccm-contextcb/set-private_state(^s: mbedtls-ccm-contextcb<s::S>, private_state: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_state(private_state))

pub inline fun mbedtls-ccm-contextc-wrapper/private_state(^s: mbedtls-ccm-contextc<s::S>): int
  s.with-ptr(mbedtls-ccm-context-ptr/private_state).int

pub inline fun mbedtls-ccm-contextcb-wrapper/private_state(^s: mbedtls-ccm-contextcb<s::S>): int
  s.with-ptr(mbedtls-ccm-context-ptr/private_state).int

pub inline fun mbedtls-ccm-contextc-wrapper/set-private_state(^s: mbedtls-ccm-contextc<s::S>, private_state: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_state(private_state.int32))

pub inline fun mbedtls-ccm-contextcb-wrapper/set-private_state(^s: mbedtls-ccm-contextcb<s::S>, private_state: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-context-ptr/set-private_state(private_state.int32))

pub type mbedtls-poly1305-context-c
pub alias mbedtls-poly1305-contextc<s::S> = owned-c<mbedtls-poly1305-context-c>
pub alias mbedtls-poly1305-contextcb<s::S> = borrowed-c<s,mbedtls-poly1305-context-c>
pub alias mbedtls-poly1305-contextca<s::S> = owned-c<c-array<mbedtls-poly1305-context>>

extern mbedtls-poly1305-context/size-of(c: c-null<mbedtls-poly1305-context-c>): int32
  c inline "sizeof(struct mbedtls_poly1305_context)"

pub fun mbedtls-poly1305-contextc(): mbedtls-poly1305-contextc<s::S>
  malloc(?size-of=mbedtls-poly1305-context/size-of)

pub fun mbedtls-poly1305-contextc-calloc(): mbedtls-poly1305-contextc<s::S>
  malloc-c(?size-of=mbedtls-poly1305-context/size-of)

pub fun mbedtls-poly1305-contextc-array(n: int): mbedtls-poly1305-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-poly1305-context/size-of)

pub fun mbedtls-poly1305-contextc-array-calloc(n: int): mbedtls-poly1305-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-poly1305-context/size-of)

inline extern mbedtls-poly1305-context-ptr/private_queue_len(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_poly1305_context*)#1)->private_queue_len)"

pub inline fun mbedtls-poly1305-contextc/private_queue_len(^s: mbedtls-poly1305-contextc<s::S>): ssize_t
  s.with-ptr(mbedtls-poly1305-context-ptr/private_queue_len)

pub inline fun mbedtls-poly1305-contextcb/private_queue_len(^s: mbedtls-poly1305-contextcb<s::S>): ssize_t
  s.with-ptr(mbedtls-poly1305-context-ptr/private_queue_len)

inline extern mbedtls-poly1305-context-ptr/set-private_queue_len(s: intptr_t, private_queue_len: ssize_t): ()
  c inline "((struct mbedtls_poly1305_context*)#1)->private_queue_len = (ssize_t)#2"

pub inline fun mbedtls-poly1305-contextc/set-private_queue_len(^s: mbedtls-poly1305-contextc<s::S>, private_queue_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-context-ptr/set-private_queue_len(private_queue_len))

pub inline fun mbedtls-poly1305-contextcb/set-private_queue_len(^s: mbedtls-poly1305-contextcb<s::S>, private_queue_len: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-context-ptr/set-private_queue_len(private_queue_len))

pub type mbedtls-chacha20-context-c
pub alias mbedtls-chacha20-contextc<s::S> = owned-c<mbedtls-chacha20-context-c>
pub alias mbedtls-chacha20-contextcb<s::S> = borrowed-c<s,mbedtls-chacha20-context-c>
pub alias mbedtls-chacha20-contextca<s::S> = owned-c<c-array<mbedtls-chacha20-context>>

extern mbedtls-chacha20-context/size-of(c: c-null<mbedtls-chacha20-context-c>): int32
  c inline "sizeof(struct mbedtls_chacha20_context)"

pub fun mbedtls-chacha20-contextc(): mbedtls-chacha20-contextc<s::S>
  malloc(?size-of=mbedtls-chacha20-context/size-of)

pub fun mbedtls-chacha20-contextc-calloc(): mbedtls-chacha20-contextc<s::S>
  malloc-c(?size-of=mbedtls-chacha20-context/size-of)

pub fun mbedtls-chacha20-contextc-array(n: int): mbedtls-chacha20-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-chacha20-context/size-of)

pub fun mbedtls-chacha20-contextc-array-calloc(n: int): mbedtls-chacha20-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-chacha20-context/size-of)

inline extern mbedtls-chacha20-context-ptr/private_keystream_bytes_used(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct mbedtls_chacha20_context*)#1)->private_keystream_bytes_used)"

pub inline fun mbedtls-chacha20-contextc/private_keystream_bytes_used(^s: mbedtls-chacha20-contextc<s::S>): ssize_t
  s.with-ptr(mbedtls-chacha20-context-ptr/private_keystream_bytes_used)

pub inline fun mbedtls-chacha20-contextcb/private_keystream_bytes_used(^s: mbedtls-chacha20-contextcb<s::S>): ssize_t
  s.with-ptr(mbedtls-chacha20-context-ptr/private_keystream_bytes_used)

inline extern mbedtls-chacha20-context-ptr/set-private_keystream_bytes_used(s: intptr_t, private_keystream_bytes_used: ssize_t): ()
  c inline "((struct mbedtls_chacha20_context*)#1)->private_keystream_bytes_used = (ssize_t)#2"

pub inline fun mbedtls-chacha20-contextc/set-private_keystream_bytes_used(^s: mbedtls-chacha20-contextc<s::S>, private_keystream_bytes_used: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chacha20-context-ptr/set-private_keystream_bytes_used(private_keystream_bytes_used))

pub inline fun mbedtls-chacha20-contextcb/set-private_keystream_bytes_used(^s: mbedtls-chacha20-contextcb<s::S>, private_keystream_bytes_used: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chacha20-context-ptr/set-private_keystream_bytes_used(private_keystream_bytes_used))

pub struct mbedtls-chachapoly-context
  private-chacha20-ctx: mbedtls-chacha20-context
  private-poly1305-ctx: mbedtls-poly1305-context
  private-aad-len: int
  private-ciphertext-len: int
  private-state: int
  private-mode: int32

pub type mbedtls-chachapoly-context-c
pub alias mbedtls-chachapoly-contextc = owned-c<mbedtls-chachapoly-context-c>
pub alias mbedtls-chachapoly-contextcb<s::S> = borrowed-c<s,mbedtls-chachapoly-context-c>
pub alias mbedtls-chachapoly-contextca = owned-c<c-array<mbedtls-chachapoly-context>>

extern mbedtls-chachapoly-context/size-of(c: c-null<mbedtls-chachapoly-context-c>): int32
  c inline "sizeof(struct mbedtls_chachapoly_context)"

pub fun mbedtls-chachapoly-contextc(): mbedtls-chachapoly-contextc
  malloc(?size-of=mbedtls-chachapoly-context/size-of)

pub fun mbedtls-chachapoly-contextc-calloc(): mbedtls-chachapoly-contextc
  malloc-c(?size-of=mbedtls-chachapoly-context/size-of)

pub fun mbedtls-chachapoly-contextc-array(n: int): mbedtls-chachapoly-contextca
  malloc(n.int32, ?size-of=mbedtls-chachapoly-context/size-of)

pub fun mbedtls-chachapoly-contextc-array-calloc(n: int): mbedtls-chachapoly-contextca
  malloc-c(n.int32, ?size-of=mbedtls-chachapoly-context/size-of)

inline extern mbedtls-chachapoly-context-ptr/private-chacha20-ctx(s: intptr_t): mbedtls-chacha20-context-c
  c inline "(mbedtls_chacha20_context)(((struct mbedtls_chachapoly_context*)#1)->private_chacha20_ctx)"

pub inline fun mbedtls-chachapoly-contextc/private-chacha20-ctx(^s: mbedtls-chachapoly-contextc): mbedtls-chacha20-context-c
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-chacha20-ctx)

pub inline fun mbedtls-chachapoly-contextcb/private-chacha20-ctx(^s: mbedtls-chachapoly-contextcb<s::S>): mbedtls-chacha20-context-c
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-chacha20-ctx)

inline extern mbedtls-chachapoly-context-ptr/set-private-chacha20-ctx(s: intptr_t, private-chacha20-ctx: mbedtls-chacha20-context-c): ()
  c inline "((struct mbedtls_chachapoly_context*)#1)->private_chacha20_ctx = (mbedtls_chacha20_context)#2"

pub inline fun mbedtls-chachapoly-contextc/set-private-chacha20-ctx(^s: mbedtls-chachapoly-contextc, private-chacha20-ctx: mbedtls-chacha20-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-chacha20-ctx(private-chacha20-ctx))

pub inline fun mbedtls-chachapoly-contextcb/set-private-chacha20-ctx(^s: mbedtls-chachapoly-contextcb<s::S>, private-chacha20-ctx: mbedtls-chacha20-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-chacha20-ctx(private-chacha20-ctx))

inline extern mbedtls-chachapoly-context-ptr/private-poly1305-ctx(s: intptr_t): mbedtls-poly1305-context-c
  c inline "(mbedtls_poly1305_context)(((struct mbedtls_chachapoly_context*)#1)->private_poly1305_ctx)"

pub inline fun mbedtls-chachapoly-contextc/private-poly1305-ctx(^s: mbedtls-chachapoly-contextc): mbedtls-poly1305-context-c
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-poly1305-ctx)

pub inline fun mbedtls-chachapoly-contextcb/private-poly1305-ctx(^s: mbedtls-chachapoly-contextcb<s::S>): mbedtls-poly1305-context-c
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-poly1305-ctx)

inline extern mbedtls-chachapoly-context-ptr/set-private-poly1305-ctx(s: intptr_t, private-poly1305-ctx: mbedtls-poly1305-context-c): ()
  c inline "((struct mbedtls_chachapoly_context*)#1)->private_poly1305_ctx = (mbedtls_poly1305_context)#2"

pub inline fun mbedtls-chachapoly-contextc/set-private-poly1305-ctx(^s: mbedtls-chachapoly-contextc, private-poly1305-ctx: mbedtls-poly1305-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-poly1305-ctx(private-poly1305-ctx))

pub inline fun mbedtls-chachapoly-contextcb/set-private-poly1305-ctx(^s: mbedtls-chachapoly-contextcb<s::S>, private-poly1305-ctx: mbedtls-poly1305-context-c): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-poly1305-ctx(private-poly1305-ctx))

inline extern mbedtls-chachapoly-context-ptr/private-aad-len(s: intptr_t): int64
  c inline "(int64_t)(((struct mbedtls_chachapoly_context*)#1)->private_aad_len)"

pub inline fun mbedtls-chachapoly-contextc/private-aad-len(^s: mbedtls-chachapoly-contextc): int64
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-aad-len)

pub inline fun mbedtls-chachapoly-contextcb/private-aad-len(^s: mbedtls-chachapoly-contextcb<s::S>): int64
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-aad-len)

inline extern mbedtls-chachapoly-context-ptr/set-private-aad-len(s: intptr_t, private-aad-len: int64): ()
  c inline "((struct mbedtls_chachapoly_context*)#1)->private_aad_len = (int64_t)#2"

pub inline fun mbedtls-chachapoly-contextc/set-private-aad-len(^s: mbedtls-chachapoly-contextc, private-aad-len: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-aad-len(private-aad-len))

pub inline fun mbedtls-chachapoly-contextcb/set-private-aad-len(^s: mbedtls-chachapoly-contextcb<s::S>, private-aad-len: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-aad-len(private-aad-len))

pub inline fun mbedtls-chachapoly-contextc-wrapper/private-aad-len(^s: mbedtls-chachapoly-contextc): int
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-aad-len).int

pub inline fun mbedtls-chachapoly-contextcb-wrapper/private-aad-len(^s: mbedtls-chachapoly-contextcb<s::S>): int
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-aad-len).int

pub inline fun mbedtls-chachapoly-contextc-wrapper/set-private-aad-len(^s: mbedtls-chachapoly-contextc, private-aad-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-aad-len(private-aad-len.int64))

pub inline fun mbedtls-chachapoly-contextcb-wrapper/set-private-aad-len(^s: mbedtls-chachapoly-contextcb<s::S>, private-aad-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-aad-len(private-aad-len.int64))

inline extern mbedtls-chachapoly-context-ptr/private-ciphertext-len(s: intptr_t): int64
  c inline "(int64_t)(((struct mbedtls_chachapoly_context*)#1)->private_ciphertext_len)"

pub inline fun mbedtls-chachapoly-contextc/private-ciphertext-len(^s: mbedtls-chachapoly-contextc): int64
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-ciphertext-len)

pub inline fun mbedtls-chachapoly-contextcb/private-ciphertext-len(^s: mbedtls-chachapoly-contextcb<s::S>): int64
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-ciphertext-len)

inline extern mbedtls-chachapoly-context-ptr/set-private-ciphertext-len(s: intptr_t, private-ciphertext-len: int64): ()
  c inline "((struct mbedtls_chachapoly_context*)#1)->private_ciphertext_len = (int64_t)#2"

pub inline fun mbedtls-chachapoly-contextc/set-private-ciphertext-len(^s: mbedtls-chachapoly-contextc, private-ciphertext-len: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-ciphertext-len(private-ciphertext-len))

pub inline fun mbedtls-chachapoly-contextcb/set-private-ciphertext-len(^s: mbedtls-chachapoly-contextcb<s::S>, private-ciphertext-len: int64): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-ciphertext-len(private-ciphertext-len))

pub inline fun mbedtls-chachapoly-contextc-wrapper/private-ciphertext-len(^s: mbedtls-chachapoly-contextc): int
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-ciphertext-len).int

pub inline fun mbedtls-chachapoly-contextcb-wrapper/private-ciphertext-len(^s: mbedtls-chachapoly-contextcb<s::S>): int
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-ciphertext-len).int

pub inline fun mbedtls-chachapoly-contextc-wrapper/set-private-ciphertext-len(^s: mbedtls-chachapoly-contextc, private-ciphertext-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-ciphertext-len(private-ciphertext-len.int64))

pub inline fun mbedtls-chachapoly-contextcb-wrapper/set-private-ciphertext-len(^s: mbedtls-chachapoly-contextcb<s::S>, private-ciphertext-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-ciphertext-len(private-ciphertext-len.int64))

inline extern mbedtls-chachapoly-context-ptr/private-state(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_chachapoly_context*)#1)->private_state)"

pub inline fun mbedtls-chachapoly-contextc/private-state(^s: mbedtls-chachapoly-contextc): int32
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-state)

pub inline fun mbedtls-chachapoly-contextcb/private-state(^s: mbedtls-chachapoly-contextcb<s::S>): int32
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-state)

inline extern mbedtls-chachapoly-context-ptr/set-private-state(s: intptr_t, private-state: int32): ()
  c inline "((struct mbedtls_chachapoly_context*)#1)->private_state = (int)#2"

pub inline fun mbedtls-chachapoly-contextc/set-private-state(^s: mbedtls-chachapoly-contextc, private-state: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-state(private-state))

pub inline fun mbedtls-chachapoly-contextcb/set-private-state(^s: mbedtls-chachapoly-contextcb<s::S>, private-state: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-state(private-state))

pub inline fun mbedtls-chachapoly-contextc-wrapper/private-state(^s: mbedtls-chachapoly-contextc): int
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-state).int

pub inline fun mbedtls-chachapoly-contextcb-wrapper/private-state(^s: mbedtls-chachapoly-contextcb<s::S>): int
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-state).int

pub inline fun mbedtls-chachapoly-contextc-wrapper/set-private-state(^s: mbedtls-chachapoly-contextc, private-state: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-state(private-state.int32))

pub inline fun mbedtls-chachapoly-contextcb-wrapper/set-private-state(^s: mbedtls-chachapoly-contextcb<s::S>, private-state: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-state(private-state.int32))

inline extern mbedtls-chachapoly-context-ptr/private-mode(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_chachapoly_context*)#1)->private_mode)"

pub inline fun mbedtls-chachapoly-contextc/private-mode(^s: mbedtls-chachapoly-contextc): int32
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-mode)

pub inline fun mbedtls-chachapoly-contextcb/private-mode(^s: mbedtls-chachapoly-contextcb<s::S>): int32
  s.with-ptr(mbedtls-chachapoly-context-ptr/private-mode)

inline extern mbedtls-chachapoly-context-ptr/set-private-mode(s: intptr_t, private-mode: int32): ()
  c inline "((struct mbedtls_chachapoly_context*)#1)->private_mode = (int32_t)#2"

pub inline fun mbedtls-chachapoly-contextc/set-private-mode(^s: mbedtls-chachapoly-contextc, private-mode: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-mode(private-mode))

pub inline fun mbedtls-chachapoly-contextcb/set-private-mode(^s: mbedtls-chachapoly-contextcb<s::S>, private-mode: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-context-ptr/set-private-mode(private-mode))

pub fun mbedtls-chachapoly-context/to-koka(s: mbedtls-chachapoly-contextc): mbedtls-chachapoly-context
  Mbedtls-chachapoly-context(s.mbedtls-chachapoly-contextc/private-chacha20-ctx, s.mbedtls-chachapoly-contextc/private-poly1305-ctx, s.mbedtls-chachapoly-contextc/private-aad-len.int, s.mbedtls-chachapoly-contextc/private-ciphertext-len.int, s.mbedtls-chachapoly-contextc/private-state.int, s.mbedtls-chachapoly-contextc/private-mode)

pub struct mbedtls-psa-aead-operation-t
pub type mbedtls-psa-aead-operation-t-c
pub alias mbedtls-psa-aead-operation-tc = owned-c<mbedtls-psa-aead-operation-t-c>
pub alias mbedtls-psa-aead-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-aead-operation-t-c>
pub alias mbedtls-psa-aead-operation-tca = owned-c<c-array<mbedtls-psa-aead-operation-t>>

pub fun mbedtls-psa-aead-operation-t/to-koka(s: mbedtls-psa-aead-operation-tc): mbedtls-psa-aead-operation-t
  Mbedtls-psa-aead-operation-t()

pub struct psa-hkdf-key-derivation-t
pub type psa-hkdf-key-derivation-t-c
pub alias psa-hkdf-key-derivation-tc = owned-c<psa-hkdf-key-derivation-t-c>
pub alias psa-hkdf-key-derivation-tcb<s::S> = borrowed-c<s,psa-hkdf-key-derivation-t-c>
pub alias psa-hkdf-key-derivation-tca = owned-c<c-array<psa-hkdf-key-derivation-t>>

pub fun psa-hkdf-key-derivation-t/to-koka(s: psa-hkdf-key-derivation-tc): psa-hkdf-key-derivation-t
  Psa-hkdf-key-derivation-t()

pub type psa-tls12-ecjpake-to-pms-t-c
pub alias psa-tls12-ecjpake-to-pms-tc<s::S> = owned-c<psa-tls12-ecjpake-to-pms-t-c>
pub alias psa-tls12-ecjpake-to-pms-tcb<s::S> = borrowed-c<s,psa-tls12-ecjpake-to-pms-t-c>
pub alias psa-tls12-ecjpake-to-pms-tca<s::S> = owned-c<c-array<psa-tls12-ecjpake-to-pms-t>>

extern psa-tls12-ecjpake-to-pms-t/size-of(c: c-null<psa-tls12-ecjpake-to-pms-t-c>): int32
  c inline "sizeof(struct psa_tls12_ecjpake_to_pms_t)"

pub fun psa-tls12-ecjpake-to-pms-tc(): psa-tls12-ecjpake-to-pms-tc<s::S>
  malloc(?size-of=psa-tls12-ecjpake-to-pms-t/size-of)

pub fun psa-tls12-ecjpake-to-pms-tc-calloc(): psa-tls12-ecjpake-to-pms-tc<s::S>
  malloc-c(?size-of=psa-tls12-ecjpake-to-pms-t/size-of)

pub fun psa-tls12-ecjpake-to-pms-tc-array(n: int): psa-tls12-ecjpake-to-pms-tca<s::S>
  malloc(n.int32, ?size-of=psa-tls12-ecjpake-to-pms-t/size-of)

pub fun psa-tls12-ecjpake-to-pms-tc-array-calloc(n: int): psa-tls12-ecjpake-to-pms-tca<s::S>
  malloc-c(n.int32, ?size-of=psa-tls12-ecjpake-to-pms-t/size-of)

pub type psa-tls12-prf-key-derivation-s-c
pub alias psa-tls12-prf-key-derivation-sc<s::S> = owned-c<psa-tls12-prf-key-derivation-s-c>
pub alias psa-tls12-prf-key-derivation-scb<s::S> = borrowed-c<s,psa-tls12-prf-key-derivation-s-c>
pub alias psa-tls12-prf-key-derivation-sca<s::S> = owned-c<c-array<psa-tls12-prf-key-derivation-s>>

extern psa-tls12-prf-key-derivation-s/size-of(c: c-null<psa-tls12-prf-key-derivation-s-c>): int32
  c inline "sizeof(struct psa_tls12_prf_key_derivation_s)"

pub fun psa-tls12-prf-key-derivation-sc(): psa-tls12-prf-key-derivation-sc<s::S>
  malloc(?size-of=psa-tls12-prf-key-derivation-s/size-of)

pub fun psa-tls12-prf-key-derivation-sc-calloc(): psa-tls12-prf-key-derivation-sc<s::S>
  malloc-c(?size-of=psa-tls12-prf-key-derivation-s/size-of)

pub fun psa-tls12-prf-key-derivation-sc-array(n: int): psa-tls12-prf-key-derivation-sca<s::S>
  malloc(n.int32, ?size-of=psa-tls12-prf-key-derivation-s/size-of)

pub fun psa-tls12-prf-key-derivation-sc-array-calloc(n: int): psa-tls12-prf-key-derivation-sca<s::S>
  malloc-c(n.int32, ?size-of=psa-tls12-prf-key-derivation-s/size-of)

inline extern psa-tls12-prf-key-derivation-s-ptr/private_left_in_block(s: intptr_t): int8
  c inline "(uint8_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_left_in_block)"

pub inline fun psa-tls12-prf-key-derivation-sc/private_left_in_block(^s: psa-tls12-prf-key-derivation-sc<s::S>): int8
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_left_in_block)

pub inline fun psa-tls12-prf-key-derivation-scb/private_left_in_block(^s: psa-tls12-prf-key-derivation-scb<s::S>): int8
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_left_in_block)

inline extern psa-tls12-prf-key-derivation-s-ptr/set-private_left_in_block(s: intptr_t, private_left_in_block: int8): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_left_in_block = (uint8_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sc/set-private_left_in_block(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_left_in_block: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_left_in_block(private_left_in_block))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private_left_in_block(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_left_in_block: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_left_in_block(private_left_in_block))

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/private_left_in_block(^s: psa-tls12-prf-key-derivation-sc<s::S>): int
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_left_in_block).int

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/private_left_in_block(^s: psa-tls12-prf-key-derivation-scb<s::S>): int
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_left_in_block).int

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/set-private_left_in_block(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_left_in_block: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_left_in_block(private_left_in_block.int8))

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/set-private_left_in_block(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_left_in_block: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_left_in_block(private_left_in_block.int8))

inline extern psa-tls12-prf-key-derivation-s-ptr/private_block_number(s: intptr_t): int8
  c inline "(uint8_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_block_number)"

pub inline fun psa-tls12-prf-key-derivation-sc/private_block_number(^s: psa-tls12-prf-key-derivation-sc<s::S>): int8
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_block_number)

pub inline fun psa-tls12-prf-key-derivation-scb/private_block_number(^s: psa-tls12-prf-key-derivation-scb<s::S>): int8
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_block_number)

inline extern psa-tls12-prf-key-derivation-s-ptr/set-private_block_number(s: intptr_t, private_block_number: int8): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_block_number = (uint8_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sc/set-private_block_number(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_block_number: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_block_number(private_block_number))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private_block_number(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_block_number: int8): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_block_number(private_block_number))

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/private_block_number(^s: psa-tls12-prf-key-derivation-sc<s::S>): int
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_block_number).int

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/private_block_number(^s: psa-tls12-prf-key-derivation-scb<s::S>): int
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_block_number).int

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/set-private_block_number(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_block_number: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_block_number(private_block_number.int8))

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/set-private_block_number(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_block_number: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_block_number(private_block_number.int8))

inline extern psa-tls12-prf-key-derivation-s-ptr/private_state(s: intptr_t): int32
  c inline "(int32_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_state)"

pub inline fun psa-tls12-prf-key-derivation-sc/private_state(^s: psa-tls12-prf-key-derivation-sc<s::S>): int32
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_state)

pub inline fun psa-tls12-prf-key-derivation-scb/private_state(^s: psa-tls12-prf-key-derivation-scb<s::S>): int32
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_state)

inline extern psa-tls12-prf-key-derivation-s-ptr/set-private_state(s: intptr_t, private_state: int32): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_state = (int32_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sc/set-private_state(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_state: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_state(private_state))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private_state(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_state: int32): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_state(private_state))

inline extern psa-tls12-prf-key-derivation-s-ptr/private_secret(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_secret)"

pub inline fun psa-tls12-prf-key-derivation-sc/private_secret(^s: psa-tls12-prf-key-derivation-sc<s::S>): intptr_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_secret)

pub inline fun psa-tls12-prf-key-derivation-scb/private_secret(^s: psa-tls12-prf-key-derivation-scb<s::S>): intptr_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_secret)

inline extern psa-tls12-prf-key-derivation-s-ptr/set-private_secret(s: intptr_t, private_secret: intptr_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_secret = (uint8_t*)#2"

pub inline fun psa-tls12-prf-key-derivation-sc/set-private_secret(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_secret: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_secret(private_secret))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private_secret(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_secret: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_secret(private_secret))

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/private_secret(^s: psa-tls12-prf-key-derivation-sc<s::S>): owned-c<int8>
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_secret).c-own

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/private_secret(^s: psa-tls12-prf-key-derivation-scb<s::S>): owned-c<int8>
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_secret).c-own

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/set-private_secret(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_secret: owned-c<int8>): ()
  with koka-ptr <- private_secret.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_secret(koka-ptr))

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/set-private_secret(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_secret: owned-c<int8>): ()
  with koka-ptr <- private_secret.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_secret(koka-ptr))

inline extern psa-tls12-prf-key-derivation-s-ptr/private_secret_length(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_secret_length)"

pub inline fun psa-tls12-prf-key-derivation-sc/private_secret_length(^s: psa-tls12-prf-key-derivation-sc<s::S>): ssize_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_secret_length)

pub inline fun psa-tls12-prf-key-derivation-scb/private_secret_length(^s: psa-tls12-prf-key-derivation-scb<s::S>): ssize_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_secret_length)

inline extern psa-tls12-prf-key-derivation-s-ptr/set-private_secret_length(s: intptr_t, private_secret_length: ssize_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_secret_length = (ssize_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sc/set-private_secret_length(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_secret_length: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_secret_length(private_secret_length))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private_secret_length(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_secret_length: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_secret_length(private_secret_length))

inline extern psa-tls12-prf-key-derivation-s-ptr/private_seed(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_seed)"

pub inline fun psa-tls12-prf-key-derivation-sc/private_seed(^s: psa-tls12-prf-key-derivation-sc<s::S>): intptr_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_seed)

pub inline fun psa-tls12-prf-key-derivation-scb/private_seed(^s: psa-tls12-prf-key-derivation-scb<s::S>): intptr_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_seed)

inline extern psa-tls12-prf-key-derivation-s-ptr/set-private_seed(s: intptr_t, private_seed: intptr_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_seed = (uint8_t*)#2"

pub inline fun psa-tls12-prf-key-derivation-sc/set-private_seed(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_seed: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_seed(private_seed))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private_seed(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_seed: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_seed(private_seed))

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/private_seed(^s: psa-tls12-prf-key-derivation-sc<s::S>): owned-c<int8>
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_seed).c-own

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/private_seed(^s: psa-tls12-prf-key-derivation-scb<s::S>): owned-c<int8>
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_seed).c-own

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/set-private_seed(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_seed: owned-c<int8>): ()
  with koka-ptr <- private_seed.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_seed(koka-ptr))

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/set-private_seed(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_seed: owned-c<int8>): ()
  with koka-ptr <- private_seed.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_seed(koka-ptr))

inline extern psa-tls12-prf-key-derivation-s-ptr/private_seed_length(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_seed_length)"

pub inline fun psa-tls12-prf-key-derivation-sc/private_seed_length(^s: psa-tls12-prf-key-derivation-sc<s::S>): ssize_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_seed_length)

pub inline fun psa-tls12-prf-key-derivation-scb/private_seed_length(^s: psa-tls12-prf-key-derivation-scb<s::S>): ssize_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_seed_length)

inline extern psa-tls12-prf-key-derivation-s-ptr/set-private_seed_length(s: intptr_t, private_seed_length: ssize_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_seed_length = (ssize_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sc/set-private_seed_length(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_seed_length: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_seed_length(private_seed_length))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private_seed_length(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_seed_length: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_seed_length(private_seed_length))

inline extern psa-tls12-prf-key-derivation-s-ptr/private_label(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_label)"

pub inline fun psa-tls12-prf-key-derivation-sc/private_label(^s: psa-tls12-prf-key-derivation-sc<s::S>): intptr_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_label)

pub inline fun psa-tls12-prf-key-derivation-scb/private_label(^s: psa-tls12-prf-key-derivation-scb<s::S>): intptr_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_label)

inline extern psa-tls12-prf-key-derivation-s-ptr/set-private_label(s: intptr_t, private_label: intptr_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_label = (uint8_t*)#2"

pub inline fun psa-tls12-prf-key-derivation-sc/set-private_label(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_label: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_label(private_label))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private_label(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_label: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_label(private_label))

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/private_label(^s: psa-tls12-prf-key-derivation-sc<s::S>): owned-c<int8>
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_label).c-own

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/private_label(^s: psa-tls12-prf-key-derivation-scb<s::S>): owned-c<int8>
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_label).c-own

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/set-private_label(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_label: owned-c<int8>): ()
  with koka-ptr <- private_label.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_label(koka-ptr))

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/set-private_label(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_label: owned-c<int8>): ()
  with koka-ptr <- private_label.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_label(koka-ptr))

inline extern psa-tls12-prf-key-derivation-s-ptr/private_label_length(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_label_length)"

pub inline fun psa-tls12-prf-key-derivation-sc/private_label_length(^s: psa-tls12-prf-key-derivation-sc<s::S>): ssize_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_label_length)

pub inline fun psa-tls12-prf-key-derivation-scb/private_label_length(^s: psa-tls12-prf-key-derivation-scb<s::S>): ssize_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_label_length)

inline extern psa-tls12-prf-key-derivation-s-ptr/set-private_label_length(s: intptr_t, private_label_length: ssize_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_label_length = (ssize_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sc/set-private_label_length(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_label_length: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_label_length(private_label_length))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private_label_length(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_label_length: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_label_length(private_label_length))

inline extern psa-tls12-prf-key-derivation-s-ptr/private_other_secret(s: intptr_t): intptr_t
  c inline "(intptr_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_other_secret)"

pub inline fun psa-tls12-prf-key-derivation-sc/private_other_secret(^s: psa-tls12-prf-key-derivation-sc<s::S>): intptr_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_other_secret)

pub inline fun psa-tls12-prf-key-derivation-scb/private_other_secret(^s: psa-tls12-prf-key-derivation-scb<s::S>): intptr_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_other_secret)

inline extern psa-tls12-prf-key-derivation-s-ptr/set-private_other_secret(s: intptr_t, private_other_secret: intptr_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_other_secret = (uint8_t*)#2"

pub inline fun psa-tls12-prf-key-derivation-sc/set-private_other_secret(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_other_secret: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_other_secret(private_other_secret))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private_other_secret(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_other_secret: intptr_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_other_secret(private_other_secret))

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/private_other_secret(^s: psa-tls12-prf-key-derivation-sc<s::S>): owned-c<int8>
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_other_secret).c-own

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/private_other_secret(^s: psa-tls12-prf-key-derivation-scb<s::S>): owned-c<int8>
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_other_secret).c-own

pub inline fun psa-tls12-prf-key-derivation-sc-wrapper/set-private_other_secret(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_other_secret: owned-c<int8>): ()
  with koka-ptr <- private_other_secret.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_other_secret(koka-ptr))

pub inline fun psa-tls12-prf-key-derivation-scb-wrapper/set-private_other_secret(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_other_secret: owned-c<int8>): ()
  with koka-ptr <- private_other_secret.with-ptr
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_other_secret(koka-ptr))

inline extern psa-tls12-prf-key-derivation-s-ptr/private_other_secret_length(s: intptr_t): ssize_t
  c inline "(ssize_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_other_secret_length)"

pub inline fun psa-tls12-prf-key-derivation-sc/private_other_secret_length(^s: psa-tls12-prf-key-derivation-sc<s::S>): ssize_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_other_secret_length)

pub inline fun psa-tls12-prf-key-derivation-scb/private_other_secret_length(^s: psa-tls12-prf-key-derivation-scb<s::S>): ssize_t
  s.with-ptr(psa-tls12-prf-key-derivation-s-ptr/private_other_secret_length)

inline extern psa-tls12-prf-key-derivation-s-ptr/set-private_other_secret_length(s: intptr_t, private_other_secret_length: ssize_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_other_secret_length = (ssize_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sc/set-private_other_secret_length(^s: psa-tls12-prf-key-derivation-sc<s::S>, private_other_secret_length: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_other_secret_length(private_other_secret_length))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private_other_secret_length(^s: psa-tls12-prf-key-derivation-scb<s::S>, private_other_secret_length: ssize_t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-s-ptr/set-private_other_secret_length(private_other_secret_length))

type mbedtls_block_cipher_id_t
  // < Unset.
  MBEDTLS_BLOCK_CIPHER_ID_NONE
  // < The AES cipher.
  MBEDTLS_BLOCK_CIPHER_ID_AES
  // < The Camellia cipher.
  MBEDTLS_BLOCK_CIPHER_ID_CAMELLIA
  // < The Aria cipher.
  MBEDTLS_BLOCK_CIPHER_ID_ARIA

pub fun mbedtls_block_cipher_id_t/int(i: mbedtls_block_cipher_id_t): int
  match i
    MBEDTLS_BLOCK_CIPHER_ID_NONE -> 0
    MBEDTLS_BLOCK_CIPHER_ID_AES -> 1
    MBEDTLS_BLOCK_CIPHER_ID_CAMELLIA -> 2
    MBEDTLS_BLOCK_CIPHER_ID_ARIA -> 3

pub fun int/mbedtls_block_cipher_id_t(i: int): exn mbedtls_block_cipher_id_t
  match i
    0 -> MBEDTLS_BLOCK_CIPHER_ID_NONE
    1 -> MBEDTLS_BLOCK_CIPHER_ID_AES
    2 -> MBEDTLS_BLOCK_CIPHER_ID_CAMELLIA
    3 -> MBEDTLS_BLOCK_CIPHER_ID_ARIA

// Used internally to indicate whether a context uses legacy or PSA.
// 
// Internal use only.
type mbedtls_block_cipher_engine_t
  MBEDTLS_BLOCK_CIPHER_ENGINE_LEGACY
  MBEDTLS_BLOCK_CIPHER_ENGINE_PSA

pub fun mbedtls_block_cipher_engine_t/int(i: mbedtls_block_cipher_engine_t): int
  match i
    MBEDTLS_BLOCK_CIPHER_ENGINE_LEGACY -> 0
    MBEDTLS_BLOCK_CIPHER_ENGINE_PSA -> 1

pub fun int/mbedtls_block_cipher_engine_t(i: int): exn mbedtls_block_cipher_engine_t
  match i
    0 -> MBEDTLS_BLOCK_CIPHER_ENGINE_LEGACY
    1 -> MBEDTLS_BLOCK_CIPHER_ENGINE_PSA

// The Identifier of the LMS parameter set, as per
// https://www.iana.org/assignments/leighton-micali-signatures/leighton-micali-signatures.xhtml
// We are only implementing a subset of the types, particularly H10, for the sake of simplicity.
type mbedtls_lms_algorithm_type_t
  MBEDTLS_LMS_SHA256_M32_H10

pub fun mbedtls_lms_algorithm_type_t/int(i: mbedtls_lms_algorithm_type_t): int
  match i
    MBEDTLS_LMS_SHA256_M32_H10 -> 6

pub fun int/mbedtls_lms_algorithm_type_t(i: int): exn mbedtls_lms_algorithm_type_t
  match i
    6 -> MBEDTLS_LMS_SHA256_M32_H10

// The Identifier of the LMOTS parameter set, as per
// https://www.iana.org/assignments/leighton-micali-signatures/leighton-micali-signatures.xhtml.
// We are only implementing a subset of the types, particularly N32_W8, for the sake of simplicity.
type mbedtls_lmots_algorithm_type_t
  MBEDTLS_LMOTS_SHA256_N32_W8

pub fun mbedtls_lmots_algorithm_type_t/int(i: mbedtls_lmots_algorithm_type_t): int
  match i
    MBEDTLS_LMOTS_SHA256_N32_W8 -> 4

pub fun int/mbedtls_lmots_algorithm_type_t(i: int): exn mbedtls_lmots_algorithm_type_t
  match i
    4 -> MBEDTLS_LMOTS_SHA256_N32_W8

// PKCS #7 types
type mbedtls_pkcs7_type
  MBEDTLS_PKCS7_NONE
  MBEDTLS_PKCS7_DATA
  MBEDTLS_PKCS7_SIGNED_DATA
  MBEDTLS_PKCS7_ENVELOPED_DATA
  MBEDTLS_PKCS7_SIGNED_AND_ENVELOPED_DATA
  MBEDTLS_PKCS7_DIGESTED_DATA
  MBEDTLS_PKCS7_ENCRYPTED_DATA

pub fun mbedtls_pkcs7_type/int(i: mbedtls_pkcs7_type): int
  match i
    MBEDTLS_PKCS7_NONE -> 0
    MBEDTLS_PKCS7_DATA -> 1
    MBEDTLS_PKCS7_SIGNED_DATA -> 2
    MBEDTLS_PKCS7_ENVELOPED_DATA -> 3
    MBEDTLS_PKCS7_SIGNED_AND_ENVELOPED_DATA -> 4
    MBEDTLS_PKCS7_DIGESTED_DATA -> 5
    MBEDTLS_PKCS7_ENCRYPTED_DATA -> 6

pub fun int/mbedtls_pkcs7_type(i: int): exn mbedtls_pkcs7_type
  match i
    0 -> MBEDTLS_PKCS7_NONE
    1 -> MBEDTLS_PKCS7_DATA
    2 -> MBEDTLS_PKCS7_SIGNED_DATA
    3 -> MBEDTLS_PKCS7_ENVELOPED_DATA
    4 -> MBEDTLS_PKCS7_SIGNED_AND_ENVELOPED_DATA
    5 -> MBEDTLS_PKCS7_DIGESTED_DATA
    6 -> MBEDTLS_PKCS7_ENCRYPTED_DATA

type mbedtls_nist_kw_mode_t
  MBEDTLS_KW_MODE_KW
  MBEDTLS_KW_MODE_KWP

pub fun mbedtls_nist_kw_mode_t/int(i: mbedtls_nist_kw_mode_t): int
  match i
    MBEDTLS_KW_MODE_KW -> 0
    MBEDTLS_KW_MODE_KWP -> 1

pub fun int/mbedtls_nist_kw_mode_t(i: int): exn mbedtls_nist_kw_mode_t
  match i
    0 -> MBEDTLS_KW_MODE_KW
    1 -> MBEDTLS_KW_MODE_KWP

pub val kmbedtls_key_length_none: int = 0

pub val kmbedtls_key_length_des: int = 64

pub val kmbedtls_key_length_des_ede: int = 128

pub val kmbedtls_key_length_des_ede3: int = 192

pub val kmbedtls_version_major: int = 3

pub val kmbedtls_version_minor: int = 6

pub val kmbedtls_version_patch: int = 0

pub val kmbedtls_version_number: int = 50724864

pub val kmbedtls_version_string: string = "3.6.0"

pub val kmbedtls_version_string_full: string = "Mbed TLS 3.6.0"

pub val kmbedtls_ssl_dtls_connection_id_compat: int = 0

pub val kpsa_want_alg_md5: int = 1

pub val kpsa_want_alg_ripemd160: int = 1

pub val kpsa_want_alg_sha_1: int = 1

pub val kpsa_want_alg_sha_224: int = 1

pub val kpsa_want_alg_sha_256: int = 1

pub val kpsa_want_alg_sha_384: int = 1

pub val kpsa_want_alg_sha_512: int = 1

pub val kpsa_want_alg_sha3_224: int = 1

pub val kpsa_want_alg_sha3_256: int = 1

pub val kpsa_want_alg_sha3_384: int = 1

pub val kpsa_want_alg_sha3_512: int = 1

pub val kpsa_want_ecc_brainpool_p_r1_256: int = 1

pub val kpsa_want_ecc_brainpool_p_r1_384: int = 1

pub val kpsa_want_ecc_brainpool_p_r1_512: int = 1

pub val kpsa_want_ecc_montgomery_255: int = 1

pub val kpsa_want_ecc_montgomery_448: int = 1

pub val kpsa_want_ecc_secp_r1_192: int = 1

pub val kpsa_want_ecc_secp_r1_224: int = 1

pub val kpsa_want_ecc_secp_r1_256: int = 1

pub val kpsa_want_ecc_secp_r1_384: int = 1

pub val kpsa_want_ecc_secp_r1_521: int = 1

pub val kpsa_want_ecc_secp_k1_192: int = 1

pub val kpsa_want_ecc_secp_k1_256: int = 1

pub val kmbedtls_psa_builtin_alg_ccm: int = 1

pub val kpsa_want_alg_ccm: int = 1

pub val kmbedtls_psa_builtin_alg_ccm_star_no_tag: int = 1

pub val kpsa_want_alg_ccm_star_no_tag: int = 1

pub val kmbedtls_psa_builtin_alg_cmac: int = 1

pub val kpsa_want_alg_cmac: int = 1

pub val kmbedtls_psa_builtin_alg_ecdh: int = 1

pub val kpsa_want_alg_ecdh: int = 1

pub val kmbedtls_psa_builtin_alg_ecdsa: int = 1

pub val kpsa_want_alg_ecdsa: int = 1

pub val kpsa_want_alg_ecdsa_any: int = 1

pub val kmbedtls_psa_builtin_alg_deterministic_ecdsa: int = 1

pub val kpsa_want_alg_deterministic_ecdsa: int = 1

pub val kpsa_want_key_type_ecc_key_pair_basic: int = 1

pub val kpsa_want_key_type_ecc_key_pair_import: int = 1

pub val kpsa_want_key_type_ecc_key_pair_export: int = 1

pub val kpsa_want_key_type_ecc_key_pair_generate: int = 1

pub val kpsa_want_key_type_ecc_key_pair_derive: int = 1

pub val kmbedtls_psa_builtin_key_type_ecc_key_pair_basic: int = 1

pub val kmbedtls_psa_builtin_key_type_ecc_key_pair_import: int = 1

pub val kmbedtls_psa_builtin_key_type_ecc_key_pair_export: int = 1

pub val kmbedtls_psa_builtin_key_type_ecc_key_pair_generate: int = 1

pub val kmbedtls_psa_builtin_key_type_ecc_key_pair_derive: int = 1

pub val kmbedtls_psa_builtin_key_type_ecc_public_key: int = 1

pub val kpsa_want_key_type_ecc_public_key: int = 1

pub val kpsa_want_key_type_dh_key_pair_basic: int = 1

pub val kpsa_want_key_type_dh_key_pair_import: int = 1

pub val kpsa_want_key_type_dh_key_pair_export: int = 1

pub val kpsa_want_key_type_dh_key_pair_generate: int = 1

pub val kpsa_want_key_type_dh_public_key: int = 1

pub val kpsa_want_alg_ffdh: int = 1

pub val kpsa_want_dh_rfc7919_2048: int = 1

pub val kpsa_want_dh_rfc7919_3072: int = 1

pub val kpsa_want_dh_rfc7919_4096: int = 1

pub val kpsa_want_dh_rfc7919_6144: int = 1

pub val kpsa_want_dh_rfc7919_8192: int = 1

pub val kmbedtls_psa_builtin_alg_ffdh: int = 1

pub val kmbedtls_psa_builtin_key_type_dh_key_pair_basic: int = 1

pub val kmbedtls_psa_builtin_key_type_dh_key_pair_import: int = 1

pub val kmbedtls_psa_builtin_key_type_dh_key_pair_export: int = 1

pub val kmbedtls_psa_builtin_key_type_dh_key_pair_generate: int = 1

pub val kmbedtls_psa_builtin_key_type_dh_public_key: int = 1

pub val kmbedtls_psa_builtin_dh_rfc7919_2048: int = 1

pub val kmbedtls_psa_builtin_dh_rfc7919_3072: int = 1

pub val kmbedtls_psa_builtin_dh_rfc7919_4096: int = 1

pub val kmbedtls_psa_builtin_dh_rfc7919_6144: int = 1

pub val kmbedtls_psa_builtin_dh_rfc7919_8192: int = 1

pub val kmbedtls_psa_builtin_alg_gcm: int = 1

pub val kpsa_want_alg_gcm: int = 1

pub val kmbedtls_psa_builtin_alg_hmac: int = 1

pub val kpsa_want_alg_hmac: int = 1

pub val kmbedtls_psa_builtin_alg_hkdf: int = 1

pub val kpsa_want_alg_hkdf: int = 1

pub val kmbedtls_psa_builtin_alg_hkdf_extract: int = 1

pub val kpsa_want_alg_hkdf_extract: int = 1

pub val kmbedtls_psa_builtin_alg_hkdf_expand: int = 1

pub val kpsa_want_alg_hkdf_expand: int = 1

pub val kpsa_want_key_type_hmac: int = 1

pub val kmbedtls_psa_builtin_alg_tls12_prf: int = 1

pub val kpsa_want_alg_tls12_prf: int = 1

pub val kmbedtls_psa_builtin_alg_tls12_psk_to_ms: int = 1

pub val kpsa_want_alg_tls12_psk_to_ms: int = 1

pub val kmbedtls_psa_builtin_alg_md5: int = 1

pub val kmbedtls_psa_builtin_pake: int = 1

pub val kmbedtls_psa_builtin_alg_jpake: int = 1

pub val kpsa_want_alg_jpake: int = 1

pub val kmbedtls_psa_builtin_alg_ripemd160: int = 1

pub val kmbedtls_psa_builtin_alg_rsa_pkcs1v15_crypt: int = 1

pub val kpsa_want_alg_rsa_pkcs1v15_crypt: int = 1

pub val kmbedtls_psa_builtin_alg_rsa_pkcs1v15_sign: int = 1

pub val kpsa_want_alg_rsa_pkcs1v15_sign: int = 1

pub val kpsa_want_alg_rsa_pkcs1v15_sign_raw: int = 1

pub val kmbedtls_psa_builtin_alg_rsa_oaep: int = 1

pub val kpsa_want_alg_rsa_oaep: int = 1

pub val kmbedtls_psa_builtin_alg_rsa_pss: int = 1

pub val kpsa_want_alg_rsa_pss: int = 1

pub val kmbedtls_psa_builtin_key_type_rsa_key_pair_generate: int = 1

pub val kpsa_want_key_type_rsa_key_pair_generate: int = 1

pub val kmbedtls_psa_builtin_key_type_rsa_key_pair_basic: int = 1

pub val kmbedtls_psa_builtin_key_type_rsa_key_pair_import: int = 1

pub val kmbedtls_psa_builtin_key_type_rsa_key_pair_export: int = 1

pub val kpsa_want_key_type_rsa_key_pair_basic: int = 1

pub val kpsa_want_key_type_rsa_key_pair_import: int = 1

pub val kpsa_want_key_type_rsa_key_pair_export: int = 1

pub val kmbedtls_psa_builtin_key_type_rsa_public_key: int = 1

pub val kpsa_want_key_type_rsa_public_key: int = 1

pub val kmbedtls_psa_builtin_alg_sha_1: int = 1

pub val kmbedtls_psa_builtin_alg_sha_224: int = 1

pub val kmbedtls_psa_builtin_alg_sha_256: int = 1

pub val kmbedtls_psa_builtin_alg_sha_384: int = 1

pub val kmbedtls_psa_builtin_alg_sha_512: int = 1

pub val kmbedtls_psa_builtin_alg_sha3_224: int = 1

pub val kmbedtls_psa_builtin_alg_sha3_256: int = 1

pub val kmbedtls_psa_builtin_alg_sha3_384: int = 1

pub val kmbedtls_psa_builtin_alg_sha3_512: int = 1

pub val kpsa_want_key_type_aes: int = 1

pub val kmbedtls_psa_builtin_key_type_aes: int = 1

pub val kpsa_want_key_type_aria: int = 1

pub val kmbedtls_psa_builtin_key_type_aria: int = 1

pub val kpsa_want_key_type_camellia: int = 1

pub val kmbedtls_psa_builtin_key_type_camellia: int = 1

pub val kpsa_want_key_type_des: int = 1

pub val kmbedtls_psa_builtin_key_type_des: int = 1

pub val kmbedtls_psa_builtin_alg_tls12_ecjpake_to_pms: int = 1

pub val kpsa_want_alg_tls12_ecjpake_to_pms: int = 1

pub val kpsa_want_key_type_chacha20: int = 1

pub val kmbedtls_psa_builtin_key_type_chacha20: int = 1

pub val kpsa_want_alg_stream_cipher: int = 1

pub val kmbedtls_psa_builtin_alg_stream_cipher: int = 1

pub val kpsa_want_alg_chacha20_poly1305: int = 1

pub val kmbedtls_psa_builtin_alg_chacha20_poly1305: int = 1

pub val kmbedtls_psa_builtin_alg_cbc_no_padding: int = 1

pub val kpsa_want_alg_cbc_no_padding: int = 1

pub val kmbedtls_psa_builtin_alg_cbc_pkcs7: int = 1

pub val kpsa_want_alg_cbc_pkcs7: int = 1

pub val kmbedtls_psa_builtin_alg_ecb_no_padding: int = 1

pub val kpsa_want_alg_ecb_no_padding: int = 1

pub val kmbedtls_psa_builtin_alg_cfb: int = 1

pub val kpsa_want_alg_cfb: int = 1

pub val kmbedtls_psa_builtin_alg_ctr: int = 1

pub val kpsa_want_alg_ctr: int = 1

pub val kmbedtls_psa_builtin_alg_ofb: int = 1

pub val kpsa_want_alg_ofb: int = 1

pub val kmbedtls_psa_builtin_ecc_brainpool_p_r1_256: int = 1

pub val kmbedtls_psa_builtin_ecc_brainpool_p_r1_384: int = 1

pub val kmbedtls_psa_builtin_ecc_brainpool_p_r1_512: int = 1

pub val kmbedtls_psa_builtin_ecc_montgomery_255: int = 1

pub val kmbedtls_psa_builtin_ecc_montgomery_448: int = 1

pub val kmbedtls_psa_builtin_ecc_secp_r1_192: int = 1

pub val kmbedtls_psa_builtin_ecc_secp_r1_224: int = 1

pub val kmbedtls_psa_builtin_ecc_secp_r1_256: int = 1

pub val kmbedtls_psa_builtin_ecc_secp_r1_384: int = 1

pub val kmbedtls_psa_builtin_ecc_secp_r1_521: int = 1

pub val kmbedtls_psa_builtin_ecc_secp_k1_192: int = 1

pub val kmbedtls_psa_builtin_ecc_secp_k1_256: int = 1

pub val kpsa_want_alg_some_pake: int = 1

pub val kpsa_want_key_type_derive: int = 1

pub val kpsa_want_key_type_password: int = 1

pub val kpsa_want_key_type_password_hash: int = 1

pub val kpsa_want_key_type_raw_data: int = 1

pub val kmbedtls_err_chacha20_bad_input_data: int = -81

pub val kmbedtls_err_mpi_file_io_error: int = -2

pub val kmbedtls_err_mpi_bad_input_data: int = -4

pub val kmbedtls_err_mpi_invalid_character: int = -6

pub val kmbedtls_err_mpi_buffer_too_small: int = -8

pub val kmbedtls_err_mpi_negative_value: int = -10

pub val kmbedtls_err_mpi_division_by_zero: int = -12

pub val kmbedtls_err_mpi_not_acceptable: int = -14

pub val kmbedtls_err_mpi_alloc_failed: int = -16

pub val kmbedtls_mpi_max_limbs: int = 10000

pub val kmbedtls_mpi_window_size: int = 3

pub val kmbedtls_mpi_max_size: int = 1024

pub val kmbedtls_mpi_max_bits: int = 8192

pub val kmbedtls_mpi_max_bits_scale100: int = 819200

pub val kmbedtls_ln_2_div_ln_10_scale100: int = 332

pub val kmbedtls_mpi_rw_buffer_size: int = 2484

pub val kmbedtls_mpi_uint_max: int = -1

pub val kmbedtls_err_md_feature_unavailable: int = -20608

pub val kmbedtls_err_md_bad_input_data: int = -20736

pub val kmbedtls_err_md_alloc_failed: int = -20864

pub val kmbedtls_err_md_file_io_error: int = -20992

pub val kmbedtls_md_max_size: int = 64

pub val kmbedtls_md_max_block_size: int = 144

pub val kmbedtls_err_rsa_bad_input_data: int = -16512

pub val kmbedtls_err_rsa_invalid_padding: int = -16640

pub val kmbedtls_err_rsa_key_gen_failed: int = -16768

pub val kmbedtls_err_rsa_key_check_failed: int = -16896

pub val kmbedtls_err_rsa_public_failed: int = -17024

pub val kmbedtls_err_rsa_private_failed: int = -17152

pub val kmbedtls_err_rsa_verify_failed: int = -17280

pub val kmbedtls_err_rsa_output_too_large: int = -17408

pub val kmbedtls_err_rsa_rng_failed: int = -17536

pub val kmbedtls_rsa_pkcs_v15: int = 0

pub val kmbedtls_rsa_pkcs_v21: int = 1

pub val kmbedtls_rsa_sign: int = 1

pub val kmbedtls_rsa_crypt: int = 2

pub val kmbedtls_rsa_salt_len_any: int = -1

pub val kmbedtls_rsa_gen_key_min_bits: int = 1024

pub val kmbedtls_err_asn1_out_of_data: int = -96

pub val kmbedtls_err_asn1_unexpected_tag: int = -98

pub val kmbedtls_err_asn1_invalid_length: int = -100

pub val kmbedtls_err_asn1_length_mismatch: int = -102

pub val kmbedtls_err_asn1_invalid_data: int = -104

pub val kmbedtls_err_asn1_alloc_failed: int = -106

pub val kmbedtls_err_asn1_buf_too_small: int = -108

pub val kmbedtls_asn1_boolean: int = 1

pub val kmbedtls_asn1_integer: int = 2

pub val kmbedtls_asn1_bit_string: int = 3

pub val kmbedtls_asn1_octet_string: int = 4

pub val kmbedtls_asn1_null: int = 5

pub val kmbedtls_asn1_oid: int = 6

pub val kmbedtls_asn1_enumerated: int = 10

pub val kmbedtls_asn1_utf8_string: int = 12

pub val kmbedtls_asn1_sequence: int = 16

pub val kmbedtls_asn1_set: int = 17

pub val kmbedtls_asn1_printable_string: int = 19

pub val kmbedtls_asn1_t61_string: int = 20

pub val kmbedtls_asn1_ia5_string: int = 22

pub val kmbedtls_asn1_utc_time: int = 23

pub val kmbedtls_asn1_generalized_time: int = 24

pub val kmbedtls_asn1_universal_string: int = 28

pub val kmbedtls_asn1_bmp_string: int = 30

pub val kmbedtls_asn1_primitive: int = 0

pub val kmbedtls_asn1_constructed: int = 32

pub val kmbedtls_asn1_context_specific: int = 128

pub val kmbedtls_asn1_tag_class_mask: int = 192

pub val kmbedtls_asn1_tag_pc_mask: int = 32

pub val kmbedtls_asn1_tag_value_mask: int = 31

pub val kmbedtls_err_ecp_bad_input_data: int = -20352

pub val kmbedtls_err_ecp_buffer_too_small: int = -20224

pub val kmbedtls_err_ecp_feature_unavailable: int = -20096

pub val kmbedtls_err_ecp_verify_failed: int = -19968

pub val kmbedtls_err_ecp_alloc_failed: int = -19840

pub val kmbedtls_err_ecp_random_failed: int = -19712

pub val kmbedtls_err_ecp_invalid_key: int = -19584

pub val kmbedtls_err_ecp_sig_len_mismatch: int = -19456

pub val kmbedtls_err_ecp_in_progress: int = -19200

pub val kmbedtls_ecp_dp_max: int = 14

pub val kmbedtls_ecp_window_size: int = 4

pub val kmbedtls_ecp_fixed_point_optim: int = 1

pub val kmbedtls_ecp_max_bits: int = 521

pub val kmbedtls_ecp_max_bytes: int = 66

pub val kmbedtls_ecp_max_pt_len: int = 133

pub val kmbedtls_ecp_pf_uncompressed: int = 0

pub val kmbedtls_ecp_pf_compressed: int = 1

pub val kmbedtls_ecp_tls_named_curve: int = 3

pub val kmbedtls_ecdsa_max_len: int = 139

pub val kpsa_crypto_api_version_major: int = 1

pub val kpsa_crypto_api_version_minor: int = 0

pub val kpsa_success: int = 0

pub val kpsa_error_generic_error: int = -132

pub val kpsa_error_not_supported: int = -134

pub val kpsa_error_not_permitted: int = -133

pub val kpsa_error_buffer_too_small: int = -138

pub val kpsa_error_already_exists: int = -139

pub val kpsa_error_does_not_exist: int = -140

pub val kpsa_error_bad_state: int = -137

pub val kpsa_error_invalid_argument: int = -135

pub val kpsa_error_insufficient_memory: int = -141

pub val kpsa_error_insufficient_storage: int = -142

pub val kpsa_error_communication_failure: int = -145

pub val kpsa_error_storage_failure: int = -146

pub val kpsa_error_hardware_failure: int = -147

pub val kpsa_error_corruption_detected: int = -151

pub val kpsa_error_insufficient_entropy: int = -148

pub val kpsa_error_invalid_signature: int = -149

pub val kpsa_error_invalid_padding: int = -150

pub val kpsa_error_insufficient_data: int = -143

pub val kpsa_error_service_failure: int = -144

pub val kpsa_error_invalid_handle: int = -136

pub val kpsa_error_data_corrupt: int = -152

pub val kpsa_error_data_invalid: int = -153

pub val kpsa_operation_incomplete: int = -248

pub val kpsa_key_type_none: int = 0

pub val kpsa_key_type_vendor_flag: int = 32768

pub val kpsa_key_type_category_mask: int = 28672

pub val kpsa_key_type_category_raw: int = 4096

pub val kpsa_key_type_category_symmetric: int = 8192

pub val kpsa_key_type_category_public_key: int = 16384

pub val kpsa_key_type_category_key_pair: int = 28672

pub val kpsa_key_type_category_flag_pair: int = 12288

pub val kpsa_key_type_raw_data: int = 4097

pub val kpsa_key_type_hmac: int = 4352

pub val kpsa_key_type_derive: int = 4608

pub val kpsa_key_type_password: int = 4611

pub val kpsa_key_type_password_hash: int = 4613

pub val kpsa_key_type_pepper: int = 4614

pub val kpsa_key_type_aes: int = 9216

pub val kpsa_key_type_aria: int = 9222

pub val kpsa_key_type_des: int = 8961

pub val kpsa_key_type_camellia: int = 9219

pub val kpsa_key_type_chacha20: int = 8196

pub val kpsa_key_type_rsa_public_key: int = 16385

pub val kpsa_key_type_rsa_key_pair: int = 28673

pub val kpsa_key_type_ecc_public_key_base: int = 16640

pub val kpsa_key_type_ecc_key_pair_base: int = 28928

pub val kpsa_key_type_ecc_curve_mask: int = 255

pub val kpsa_ecc_family_secp_k1: int = 23

pub val kpsa_ecc_family_secp_r1: int = 18

pub val kpsa_ecc_family_secp_r2: int = 27

pub val kpsa_ecc_family_sect_k1: int = 39

pub val kpsa_ecc_family_sect_r1: int = 34

pub val kpsa_ecc_family_sect_r2: int = 43

pub val kpsa_ecc_family_brainpool_p_r1: int = 48

pub val kpsa_ecc_family_montgomery: int = 65

pub val kpsa_ecc_family_twisted_edwards: int = 66

pub val kpsa_key_type_dh_public_key_base: int = 16896

pub val kpsa_key_type_dh_key_pair_base: int = 29184

pub val kpsa_key_type_dh_group_mask: int = 255

pub val kpsa_dh_family_rfc7919: int = 3

pub val kpsa_alg_vendor_flag: int = 2147483648

pub val kpsa_alg_category_mask: int = 2130706432

pub val kpsa_alg_category_hash: int = 33554432

pub val kpsa_alg_category_mac: int = 50331648

pub val kpsa_alg_category_cipher: int = 67108864

pub val kpsa_alg_category_aead: int = 83886080

pub val kpsa_alg_category_sign: int = 100663296

pub val kpsa_alg_category_asymmetric_encryption: int = 117440512

pub val kpsa_alg_category_key_derivation: int = 134217728

pub val kpsa_alg_category_key_agreement: int = 150994944

pub val kpsa_alg_none: int = 0

pub val kpsa_alg_hash_mask: int = 255

pub val kpsa_alg_md5: int = 33554435

pub val kpsa_alg_ripemd160: int = 33554436

pub val kpsa_alg_sha_1: int = 33554437

pub val kpsa_alg_sha_224: int = 33554440

pub val kpsa_alg_sha_256: int = 33554441

pub val kpsa_alg_sha_384: int = 33554442

pub val kpsa_alg_sha_512: int = 33554443

pub val kpsa_alg_sha_512_224: int = 33554444

pub val kpsa_alg_sha_512_256: int = 33554445

pub val kpsa_alg_sha3_224: int = 33554448

pub val kpsa_alg_sha3_256: int = 33554449

pub val kpsa_alg_sha3_384: int = 33554450

pub val kpsa_alg_sha3_512: int = 33554451

pub val kpsa_alg_shake256_512: int = 33554453

pub val kpsa_alg_any_hash: int = 33554687

pub val kpsa_alg_mac_subcategory_mask: int = 12582912

pub val kpsa_alg_hmac_base: int = 58720256

pub val kpsa_alg_mac_truncation_mask: int = 4128768

pub val kpsa_mac_truncation_offset: int = 16

pub val kpsa_alg_mac_at_least_this_length_flag: int = 32768

pub val kpsa_alg_cipher_mac_base: int = 62914560

pub val kpsa_alg_cbc_mac: int = 62914816

pub val kpsa_alg_cmac: int = 62915072

pub val kpsa_alg_cipher_stream_flag: int = 8388608

pub val kpsa_alg_cipher_from_block_flag: int = 4194304

pub val kpsa_alg_stream_cipher: int = 75497728

pub val kpsa_alg_ctr: int = 79695872

pub val kpsa_alg_cfb: int = 79696128

pub val kpsa_alg_ofb: int = 79696384

pub val kpsa_alg_xts: int = 71368448

pub val kpsa_alg_ecb_no_padding: int = 71320576

pub val kpsa_alg_cbc_no_padding: int = 71319552

pub val kpsa_alg_cbc_pkcs7: int = 71319808

pub val kpsa_alg_aead_from_block_flag: int = 4194304

pub val kpsa_alg_ccm: int = 89129216

pub val kpsa_alg_ccm_star_no_tag: int = 79696640

pub val kpsa_alg_gcm: int = 89129472

pub val kpsa_alg_chacha20_poly1305: int = 84935936

pub val kpsa_alg_aead_tag_length_mask: int = 4128768

pub val kpsa_aead_tag_length_offset: int = 16

pub val kpsa_alg_aead_at_least_this_length_flag: int = 32768

pub val kpsa_alg_rsa_pkcs1v15_sign_base: int = 100663808

pub val kpsa_alg_rsa_pkcs1v15_sign_raw: int = 100663808

pub val kpsa_alg_rsa_pss_base: int = 100664064

pub val kpsa_alg_rsa_pss_any_salt_base: int = 100668160

pub val kpsa_alg_ecdsa_base: int = 100664832

pub val kpsa_alg_ecdsa_any: int = 100664832

pub val kpsa_alg_deterministic_ecdsa_base: int = 100665088

pub val kpsa_alg_ecdsa_deterministic_flag: int = 256

pub val kpsa_alg_pure_eddsa: int = 100665344

pub val kpsa_alg_hash_eddsa_base: int = 100665600

pub val kpsa_alg_ed25519ph: int = 100665611

pub val kpsa_alg_ed448ph: int = 100665621

pub val kpsa_alg_rsa_pkcs1v15_crypt: int = 117441024

pub val kpsa_alg_rsa_oaep_base: int = 117441280

pub val kpsa_alg_hkdf_base: int = 134217984

pub val kpsa_alg_hkdf_extract_base: int = 134218752

pub val kpsa_alg_hkdf_expand_base: int = 134219008

pub val kpsa_alg_tls12_prf_base: int = 134218240

pub val kpsa_alg_tls12_psk_to_ms_base: int = 134218496

pub val kpsa_alg_tls12_ecjpake_to_pms: int = 134219273

pub val kpsa_alg_key_derivation_stretching_flag: int = 8388608

pub val kpsa_alg_pbkdf2_hmac_base: int = 142606592

pub val kpsa_alg_pbkdf2_aes_cmac_prf_128: int = 142606848

pub val kpsa_alg_key_derivation_mask: int = 4261478399

pub val kpsa_alg_key_agreement_mask: int = 4294901760

pub val kpsa_alg_ffdh: int = 151060480

pub val kpsa_alg_ecdh: int = 151126016

pub val kpsa_key_lifetime_volatile: int = 0

pub val kpsa_key_lifetime_persistent: int = 1

pub val kpsa_key_persistence_volatile: int = 0

pub val kpsa_key_persistence_default: int = 1

pub val kpsa_key_persistence_read_only: int = 255

pub val kpsa_key_location_local_storage: int = 0

pub val kpsa_key_location_vendor_flag: int = 8388608

pub val kpsa_key_id_null: int = 0

pub val kpsa_key_id_user_min: int = 1

pub val kpsa_key_id_user_max: int = 1073741823

pub val kpsa_key_id_vendor_min: int = 1073741824

pub val kpsa_key_id_vendor_max: int = 2147483647

pub val kmbedtls_svc_key_id_init: int = 0

pub val kpsa_key_usage_export: int = 1

pub val kpsa_key_usage_copy: int = 2

pub val kpsa_key_usage_encrypt: int = 256

pub val kpsa_key_usage_decrypt: int = 512

pub val kpsa_key_usage_sign_message: int = 1024

pub val kpsa_key_usage_verify_message: int = 2048

pub val kpsa_key_usage_sign_hash: int = 4096

pub val kpsa_key_usage_verify_hash: int = 8192

pub val kpsa_key_usage_derive: int = 16384

pub val kpsa_key_usage_verify_derivation: int = 32768

pub val kpsa_key_derivation_input_secret: int = 257

pub val kpsa_key_derivation_input_password: int = 258

pub val kpsa_key_derivation_input_other_secret: int = 259

pub val kpsa_key_derivation_input_label: int = 513

pub val kpsa_key_derivation_input_salt: int = 514

pub val kpsa_key_derivation_input_info: int = 515

pub val kpsa_key_derivation_input_seed: int = 516

pub val kpsa_key_derivation_input_cost: int = 517

pub val kpsa_interruptible_max_ops_unlimited: int = 4294967295

pub val kpsa_key_derivation_unlimited_capacity: int = -1

pub val kpsa_hmac_max_hash_block_size: int = 144

pub val kpsa_hash_max_size: int = 64

pub val kpsa_mac_max_size: int = 64

pub val kpsa_aead_tag_max_size: int = 16

pub val kpsa_vendor_rsa_max_key_bits: int = 4096

pub val kpsa_vendor_rsa_generate_min_key_bits: int = 1024

pub val kpsa_vendor_ffdh_max_key_bits: int = 8192

pub val kpsa_vendor_ecc_max_curve_bits: int = 521

pub val kpsa_tls12_psk_to_ms_psk_max_size: int = 128

pub val kpsa_tls12_ecjpake_to_pms_input_size: int = 65

pub val kpsa_tls12_ecjpake_to_pms_data_size: int = 32

pub val kpsa_vendor_pbkdf2_max_iterations: int = 4294967295

pub val kpsa_block_cipher_block_max_size: int = 16

pub val kpsa_aead_nonce_max_size: int = 13

pub val kpsa_aead_finish_output_max_size: int = 16

pub val kpsa_aead_verify_output_max_size: int = 16

pub val kpsa_vendor_ecdsa_signature_max_size: int = 132

pub val kpsa_signature_max_size: int = 512

pub val kpsa_asymmetric_encrypt_output_max_size: int = 512

pub val kpsa_asymmetric_decrypt_output_max_size: int = 512

pub val kpsa_export_key_pair_max_size: int = 2363

pub val kpsa_export_public_key_max_size: int = 1024

pub val kpsa_raw_key_agreement_output_max_size: int = 1024

pub val kpsa_cipher_iv_max_size: int = 16

pub val kpsa_cipher_finish_output_max_size: int = 16

pub val kmbedtls_err_sha1_bad_input_data: int = -115

pub val kmbedtls_err_sha256_bad_input_data: int = -116

pub val kmbedtls_err_sha512_bad_input_data: int = -117

pub val kmbedtls_err_sha3_bad_input_data: int = -118

pub val kmbedtls_err_cipher_feature_unavailable: int = -24704

pub val kmbedtls_err_cipher_bad_input_data: int = -24832

pub val kmbedtls_err_cipher_alloc_failed: int = -24960

pub val kmbedtls_err_cipher_invalid_padding: int = -25088

pub val kmbedtls_err_cipher_full_block_expected: int = -25216

pub val kmbedtls_err_cipher_auth_failed: int = -25344

pub val kmbedtls_err_cipher_invalid_context: int = -25472

pub val kmbedtls_cipher_variable_iv_len: int = 1

pub val kmbedtls_cipher_variable_key_len: int = 2

pub val kmbedtls_max_iv_length: int = 16

pub val kmbedtls_max_block_length: int = 16

pub val kmbedtls_max_key_length: int = 64

pub val kmbedtls_key_bitlen_shift: int = 6

pub val kmbedtls_iv_size_shift: int = 2

pub val kmbedtls_psa_builtin_cipher: int = 1

pub val kmbedtls_aes_block_size: int = 16

pub val kmbedtls_des3_block_size: int = 8

pub val kmbedtls_cmac_max_block_size: int = 16

pub val kmbedtls_cipher_blksize_max: int = 16

pub val kmbedtls_gcm_encrypt: int = 1

pub val kmbedtls_gcm_decrypt: int = 0

pub val kmbedtls_err_gcm_auth_failed: int = -18

pub val kmbedtls_err_gcm_bad_input: int = -20

pub val kmbedtls_err_gcm_buffer_too_small: int = -22

pub val kmbedtls_gcm_htable_size: int = 16

pub val kmbedtls_ccm_decrypt: int = 0

pub val kmbedtls_ccm_encrypt: int = 1

pub val kmbedtls_ccm_star_decrypt: int = 2

pub val kmbedtls_ccm_star_encrypt: int = 3

pub val kmbedtls_err_ccm_bad_input: int = -13

pub val kmbedtls_err_ccm_auth_failed: int = -15

pub val kmbedtls_err_poly1305_bad_input_data: int = -87

pub val kmbedtls_err_chachapoly_bad_state: int = -84

pub val kmbedtls_err_chachapoly_auth_failed: int = -86

pub val kmbedtls_psa_builtin_aead: int = 1

pub val kmbedtls_psa_jpake_buffer_size: int = 336

pub val kpsa_key_bits_too_large: int = 65535

pub val kpsa_max_key_bits: int = 65528

pub val kpsa_key_handle_init: int = 0

pub val kpsa_dh_family_custom: int = 126

pub val kpsa_crypto_its_random_seed_uid: int = 4294967122

pub val kmbedtls_psa_key_slot_count: int = 32

pub val kpsa_key_type_dsa_public_key: int = 16386

pub val kpsa_key_type_dsa_key_pair: int = 28674

pub val kpsa_alg_dsa_base: int = 100664320

pub val kpsa_alg_deterministic_dsa_base: int = 100664576

pub val kpsa_alg_dsa_deterministic_flag: int = 256

pub val kpsa_pake_operation_stage_setup: int = 0

pub val kpsa_pake_operation_stage_collect_inputs: int = 1

pub val kpsa_pake_operation_stage_computation: int = 2

pub val kmbedtls_psa_key_id_builtin_min: int = 2147418112

pub val kmbedtls_psa_key_id_builtin_max: int = 2147479551

pub val kpsa_alg_category_pake: int = 167772160

pub val kpsa_alg_jpake: int = 167772416

pub val kpsa_pake_role_none: int = 0

pub val kpsa_pake_role_first: int = 1

pub val kpsa_pake_role_second: int = 2

pub val kpsa_pake_role_client: int = 17

pub val kpsa_pake_role_server: int = 18

pub val kpsa_pake_primitive_type_ecc: int = 1

pub val kpsa_pake_primitive_type_dh: int = 2

pub val kpsa_pake_step_key_share: int = 1

pub val kpsa_pake_step_zk_public: int = 2

pub val kpsa_pake_step_zk_proof: int = 3

pub val kpsa_pake_output_max_size: int = 65

pub val kpsa_pake_input_max_size: int = 65

pub val kmbedtls_err_pk_alloc_failed: int = -16256

pub val kmbedtls_err_pk_type_mismatch: int = -16128

pub val kmbedtls_err_pk_bad_input_data: int = -16000

pub val kmbedtls_err_pk_file_io_error: int = -15872

pub val kmbedtls_err_pk_key_invalid_version: int = -15744

pub val kmbedtls_err_pk_key_invalid_format: int = -15616

pub val kmbedtls_err_pk_unknown_pk_alg: int = -15488

pub val kmbedtls_err_pk_password_required: int = -15360

pub val kmbedtls_err_pk_password_mismatch: int = -15232

pub val kmbedtls_err_pk_invalid_pubkey: int = -15104

pub val kmbedtls_err_pk_invalid_alg: int = -14976

pub val kmbedtls_err_pk_unknown_named_curve: int = -14848

pub val kmbedtls_err_pk_feature_unavailable: int = -14720

pub val kmbedtls_err_pk_sig_len_mismatch: int = -14592

pub val kmbedtls_err_pk_buffer_too_small: int = -14464

pub val kmbedtls_pk_signature_max_size: int = 1024

pub val kmbedtls_pk_debug_max_items: int = 3

pub val kmbedtls_pk_max_ec_pubkey_raw_len: int = 133

pub val kmbedtls_tls_rsa_with_null_md5: int = 1

pub val kmbedtls_tls_rsa_with_null_sha: int = 2

pub val kmbedtls_tls_psk_with_null_sha: int = 44

pub val kmbedtls_tls_dhe_psk_with_null_sha: int = 45

pub val kmbedtls_tls_rsa_psk_with_null_sha: int = 46

pub val kmbedtls_tls_rsa_with_aes_128_cbc_sha: int = 47

pub val kmbedtls_tls_dhe_rsa_with_aes_128_cbc_sha: int = 51

pub val kmbedtls_tls_rsa_with_aes_256_cbc_sha: int = 53

pub val kmbedtls_tls_dhe_rsa_with_aes_256_cbc_sha: int = 57

pub val kmbedtls_tls_rsa_with_null_sha256: int = 59

pub val kmbedtls_tls_rsa_with_aes_128_cbc_sha256: int = 60

pub val kmbedtls_tls_rsa_with_aes_256_cbc_sha256: int = 61

pub val kmbedtls_tls_rsa_with_camellia_128_cbc_sha: int = 65

pub val kmbedtls_tls_dhe_rsa_with_camellia_128_cbc_sha: int = 69

pub val kmbedtls_tls_dhe_rsa_with_aes_128_cbc_sha256: int = 103

pub val kmbedtls_tls_dhe_rsa_with_aes_256_cbc_sha256: int = 107

pub val kmbedtls_tls_rsa_with_camellia_256_cbc_sha: int = 132

pub val kmbedtls_tls_dhe_rsa_with_camellia_256_cbc_sha: int = 136

pub val kmbedtls_tls_psk_with_aes_128_cbc_sha: int = 140

pub val kmbedtls_tls_psk_with_aes_256_cbc_sha: int = 141

pub val kmbedtls_tls_dhe_psk_with_aes_128_cbc_sha: int = 144

pub val kmbedtls_tls_dhe_psk_with_aes_256_cbc_sha: int = 145

pub val kmbedtls_tls_rsa_psk_with_aes_128_cbc_sha: int = 148

pub val kmbedtls_tls_rsa_psk_with_aes_256_cbc_sha: int = 149

pub val kmbedtls_tls_rsa_with_aes_128_gcm_sha256: int = 156

pub val kmbedtls_tls_rsa_with_aes_256_gcm_sha384: int = 157

pub val kmbedtls_tls_dhe_rsa_with_aes_128_gcm_sha256: int = 158

pub val kmbedtls_tls_dhe_rsa_with_aes_256_gcm_sha384: int = 159

pub val kmbedtls_tls_psk_with_aes_128_gcm_sha256: int = 168

pub val kmbedtls_tls_psk_with_aes_256_gcm_sha384: int = 169

pub val kmbedtls_tls_dhe_psk_with_aes_128_gcm_sha256: int = 170

pub val kmbedtls_tls_dhe_psk_with_aes_256_gcm_sha384: int = 171

pub val kmbedtls_tls_rsa_psk_with_aes_128_gcm_sha256: int = 172

pub val kmbedtls_tls_rsa_psk_with_aes_256_gcm_sha384: int = 173

pub val kmbedtls_tls_psk_with_aes_128_cbc_sha256: int = 174

pub val kmbedtls_tls_psk_with_aes_256_cbc_sha384: int = 175

pub val kmbedtls_tls_psk_with_null_sha256: int = 176

pub val kmbedtls_tls_psk_with_null_sha384: int = 177

pub val kmbedtls_tls_dhe_psk_with_aes_128_cbc_sha256: int = 178

pub val kmbedtls_tls_dhe_psk_with_aes_256_cbc_sha384: int = 179

pub val kmbedtls_tls_dhe_psk_with_null_sha256: int = 180

pub val kmbedtls_tls_dhe_psk_with_null_sha384: int = 181

pub val kmbedtls_tls_rsa_psk_with_aes_128_cbc_sha256: int = 182

pub val kmbedtls_tls_rsa_psk_with_aes_256_cbc_sha384: int = 183

pub val kmbedtls_tls_rsa_psk_with_null_sha256: int = 184

pub val kmbedtls_tls_rsa_psk_with_null_sha384: int = 185

pub val kmbedtls_tls_rsa_with_camellia_128_cbc_sha256: int = 186

pub val kmbedtls_tls_dhe_rsa_with_camellia_128_cbc_sha256: int = 190

pub val kmbedtls_tls_rsa_with_camellia_256_cbc_sha256: int = 192

pub val kmbedtls_tls_dhe_rsa_with_camellia_256_cbc_sha256: int = 196

pub val kmbedtls_tls_ecdh_ecdsa_with_null_sha: int = 49153

pub val kmbedtls_tls_ecdh_ecdsa_with_aes_128_cbc_sha: int = 49156

pub val kmbedtls_tls_ecdh_ecdsa_with_aes_256_cbc_sha: int = 49157

pub val kmbedtls_tls_ecdhe_ecdsa_with_null_sha: int = 49158

pub val kmbedtls_tls_ecdhe_ecdsa_with_aes_128_cbc_sha: int = 49161

pub val kmbedtls_tls_ecdhe_ecdsa_with_aes_256_cbc_sha: int = 49162

pub val kmbedtls_tls_ecdh_rsa_with_null_sha: int = 49163

pub val kmbedtls_tls_ecdh_rsa_with_aes_128_cbc_sha: int = 49166

pub val kmbedtls_tls_ecdh_rsa_with_aes_256_cbc_sha: int = 49167

pub val kmbedtls_tls_ecdhe_rsa_with_null_sha: int = 49168

pub val kmbedtls_tls_ecdhe_rsa_with_aes_128_cbc_sha: int = 49171

pub val kmbedtls_tls_ecdhe_rsa_with_aes_256_cbc_sha: int = 49172

pub val kmbedtls_tls_ecdhe_ecdsa_with_aes_128_cbc_sha256: int = 49187

pub val kmbedtls_tls_ecdhe_ecdsa_with_aes_256_cbc_sha384: int = 49188

pub val kmbedtls_tls_ecdh_ecdsa_with_aes_128_cbc_sha256: int = 49189

pub val kmbedtls_tls_ecdh_ecdsa_with_aes_256_cbc_sha384: int = 49190

pub val kmbedtls_tls_ecdhe_rsa_with_aes_128_cbc_sha256: int = 49191

pub val kmbedtls_tls_ecdhe_rsa_with_aes_256_cbc_sha384: int = 49192

pub val kmbedtls_tls_ecdh_rsa_with_aes_128_cbc_sha256: int = 49193

pub val kmbedtls_tls_ecdh_rsa_with_aes_256_cbc_sha384: int = 49194

pub val kmbedtls_tls_ecdhe_ecdsa_with_aes_128_gcm_sha256: int = 49195

pub val kmbedtls_tls_ecdhe_ecdsa_with_aes_256_gcm_sha384: int = 49196

pub val kmbedtls_tls_ecdh_ecdsa_with_aes_128_gcm_sha256: int = 49197

pub val kmbedtls_tls_ecdh_ecdsa_with_aes_256_gcm_sha384: int = 49198

pub val kmbedtls_tls_ecdhe_rsa_with_aes_128_gcm_sha256: int = 49199

pub val kmbedtls_tls_ecdhe_rsa_with_aes_256_gcm_sha384: int = 49200

pub val kmbedtls_tls_ecdh_rsa_with_aes_128_gcm_sha256: int = 49201

pub val kmbedtls_tls_ecdh_rsa_with_aes_256_gcm_sha384: int = 49202

pub val kmbedtls_tls_ecdhe_psk_with_aes_128_cbc_sha: int = 49205

pub val kmbedtls_tls_ecdhe_psk_with_aes_256_cbc_sha: int = 49206

pub val kmbedtls_tls_ecdhe_psk_with_aes_128_cbc_sha256: int = 49207

pub val kmbedtls_tls_ecdhe_psk_with_aes_256_cbc_sha384: int = 49208

pub val kmbedtls_tls_ecdhe_psk_with_null_sha: int = 49209

pub val kmbedtls_tls_ecdhe_psk_with_null_sha256: int = 49210

pub val kmbedtls_tls_ecdhe_psk_with_null_sha384: int = 49211

pub val kmbedtls_tls_rsa_with_aria_128_cbc_sha256: int = 49212

pub val kmbedtls_tls_rsa_with_aria_256_cbc_sha384: int = 49213

pub val kmbedtls_tls_dhe_rsa_with_aria_128_cbc_sha256: int = 49220

pub val kmbedtls_tls_dhe_rsa_with_aria_256_cbc_sha384: int = 49221

pub val kmbedtls_tls_ecdhe_ecdsa_with_aria_128_cbc_sha256: int = 49224

pub val kmbedtls_tls_ecdhe_ecdsa_with_aria_256_cbc_sha384: int = 49225

pub val kmbedtls_tls_ecdh_ecdsa_with_aria_128_cbc_sha256: int = 49226

pub val kmbedtls_tls_ecdh_ecdsa_with_aria_256_cbc_sha384: int = 49227

pub val kmbedtls_tls_ecdhe_rsa_with_aria_128_cbc_sha256: int = 49228

pub val kmbedtls_tls_ecdhe_rsa_with_aria_256_cbc_sha384: int = 49229

pub val kmbedtls_tls_ecdh_rsa_with_aria_128_cbc_sha256: int = 49230

pub val kmbedtls_tls_ecdh_rsa_with_aria_256_cbc_sha384: int = 49231

pub val kmbedtls_tls_rsa_with_aria_128_gcm_sha256: int = 49232

pub val kmbedtls_tls_rsa_with_aria_256_gcm_sha384: int = 49233

pub val kmbedtls_tls_dhe_rsa_with_aria_128_gcm_sha256: int = 49234

pub val kmbedtls_tls_dhe_rsa_with_aria_256_gcm_sha384: int = 49235

pub val kmbedtls_tls_ecdhe_ecdsa_with_aria_128_gcm_sha256: int = 49244

pub val kmbedtls_tls_ecdhe_ecdsa_with_aria_256_gcm_sha384: int = 49245

pub val kmbedtls_tls_ecdh_ecdsa_with_aria_128_gcm_sha256: int = 49246

pub val kmbedtls_tls_ecdh_ecdsa_with_aria_256_gcm_sha384: int = 49247

pub val kmbedtls_tls_ecdhe_rsa_with_aria_128_gcm_sha256: int = 49248

pub val kmbedtls_tls_ecdhe_rsa_with_aria_256_gcm_sha384: int = 49249

pub val kmbedtls_tls_ecdh_rsa_with_aria_128_gcm_sha256: int = 49250

pub val kmbedtls_tls_ecdh_rsa_with_aria_256_gcm_sha384: int = 49251

pub val kmbedtls_tls_psk_with_aria_128_cbc_sha256: int = 49252

pub val kmbedtls_tls_psk_with_aria_256_cbc_sha384: int = 49253

pub val kmbedtls_tls_dhe_psk_with_aria_128_cbc_sha256: int = 49254

pub val kmbedtls_tls_dhe_psk_with_aria_256_cbc_sha384: int = 49255

pub val kmbedtls_tls_rsa_psk_with_aria_128_cbc_sha256: int = 49256

pub val kmbedtls_tls_rsa_psk_with_aria_256_cbc_sha384: int = 49257

pub val kmbedtls_tls_psk_with_aria_128_gcm_sha256: int = 49258

pub val kmbedtls_tls_psk_with_aria_256_gcm_sha384: int = 49259

pub val kmbedtls_tls_dhe_psk_with_aria_128_gcm_sha256: int = 49260

pub val kmbedtls_tls_dhe_psk_with_aria_256_gcm_sha384: int = 49261

pub val kmbedtls_tls_rsa_psk_with_aria_128_gcm_sha256: int = 49262

pub val kmbedtls_tls_rsa_psk_with_aria_256_gcm_sha384: int = 49263

pub val kmbedtls_tls_ecdhe_psk_with_aria_128_cbc_sha256: int = 49264

pub val kmbedtls_tls_ecdhe_psk_with_aria_256_cbc_sha384: int = 49265

pub val kmbedtls_tls_ecdhe_ecdsa_with_camellia_128_cbc_sha256: int = 49266

pub val kmbedtls_tls_ecdhe_ecdsa_with_camellia_256_cbc_sha384: int = 49267

pub val kmbedtls_tls_ecdh_ecdsa_with_camellia_128_cbc_sha256: int = 49268

pub val kmbedtls_tls_ecdh_ecdsa_with_camellia_256_cbc_sha384: int = 49269

pub val kmbedtls_tls_ecdhe_rsa_with_camellia_128_cbc_sha256: int = 49270

pub val kmbedtls_tls_ecdhe_rsa_with_camellia_256_cbc_sha384: int = 49271

pub val kmbedtls_tls_ecdh_rsa_with_camellia_128_cbc_sha256: int = 49272

pub val kmbedtls_tls_ecdh_rsa_with_camellia_256_cbc_sha384: int = 49273

pub val kmbedtls_tls_rsa_with_camellia_128_gcm_sha256: int = 49274

pub val kmbedtls_tls_rsa_with_camellia_256_gcm_sha384: int = 49275

pub val kmbedtls_tls_dhe_rsa_with_camellia_128_gcm_sha256: int = 49276

pub val kmbedtls_tls_dhe_rsa_with_camellia_256_gcm_sha384: int = 49277

pub val kmbedtls_tls_ecdhe_ecdsa_with_camellia_128_gcm_sha256: int = 49286

pub val kmbedtls_tls_ecdhe_ecdsa_with_camellia_256_gcm_sha384: int = 49287

pub val kmbedtls_tls_ecdh_ecdsa_with_camellia_128_gcm_sha256: int = 49288

pub val kmbedtls_tls_ecdh_ecdsa_with_camellia_256_gcm_sha384: int = 49289

pub val kmbedtls_tls_ecdhe_rsa_with_camellia_128_gcm_sha256: int = 49290

pub val kmbedtls_tls_ecdhe_rsa_with_camellia_256_gcm_sha384: int = 49291

pub val kmbedtls_tls_ecdh_rsa_with_camellia_128_gcm_sha256: int = 49292

pub val kmbedtls_tls_ecdh_rsa_with_camellia_256_gcm_sha384: int = 49293

pub val kmbedtls_tls_psk_with_camellia_128_gcm_sha256: int = 49294

pub val kmbedtls_tls_psk_with_camellia_256_gcm_sha384: int = 49295

pub val kmbedtls_tls_dhe_psk_with_camellia_128_gcm_sha256: int = 49296

pub val kmbedtls_tls_dhe_psk_with_camellia_256_gcm_sha384: int = 49297

pub val kmbedtls_tls_rsa_psk_with_camellia_128_gcm_sha256: int = 49298

pub val kmbedtls_tls_rsa_psk_with_camellia_256_gcm_sha384: int = 49299

pub val kmbedtls_tls_psk_with_camellia_128_cbc_sha256: int = 49300

pub val kmbedtls_tls_psk_with_camellia_256_cbc_sha384: int = 49301

pub val kmbedtls_tls_dhe_psk_with_camellia_128_cbc_sha256: int = 49302

pub val kmbedtls_tls_dhe_psk_with_camellia_256_cbc_sha384: int = 49303

pub val kmbedtls_tls_rsa_psk_with_camellia_128_cbc_sha256: int = 49304

pub val kmbedtls_tls_rsa_psk_with_camellia_256_cbc_sha384: int = 49305

pub val kmbedtls_tls_ecdhe_psk_with_camellia_128_cbc_sha256: int = 49306

pub val kmbedtls_tls_ecdhe_psk_with_camellia_256_cbc_sha384: int = 49307

pub val kmbedtls_tls_rsa_with_aes_128_ccm: int = 49308

pub val kmbedtls_tls_rsa_with_aes_256_ccm: int = 49309

pub val kmbedtls_tls_dhe_rsa_with_aes_128_ccm: int = 49310

pub val kmbedtls_tls_dhe_rsa_with_aes_256_ccm: int = 49311

pub val kmbedtls_tls_rsa_with_aes_128_ccm_8: int = 49312

pub val kmbedtls_tls_rsa_with_aes_256_ccm_8: int = 49313

pub val kmbedtls_tls_dhe_rsa_with_aes_128_ccm_8: int = 49314

pub val kmbedtls_tls_dhe_rsa_with_aes_256_ccm_8: int = 49315

pub val kmbedtls_tls_psk_with_aes_128_ccm: int = 49316

pub val kmbedtls_tls_psk_with_aes_256_ccm: int = 49317

pub val kmbedtls_tls_dhe_psk_with_aes_128_ccm: int = 49318

pub val kmbedtls_tls_dhe_psk_with_aes_256_ccm: int = 49319

pub val kmbedtls_tls_psk_with_aes_128_ccm_8: int = 49320

pub val kmbedtls_tls_psk_with_aes_256_ccm_8: int = 49321

pub val kmbedtls_tls_dhe_psk_with_aes_128_ccm_8: int = 49322

pub val kmbedtls_tls_dhe_psk_with_aes_256_ccm_8: int = 49323

pub val kmbedtls_tls_ecdhe_ecdsa_with_aes_128_ccm: int = 49324

pub val kmbedtls_tls_ecdhe_ecdsa_with_aes_256_ccm: int = 49325

pub val kmbedtls_tls_ecdhe_ecdsa_with_aes_128_ccm_8: int = 49326

pub val kmbedtls_tls_ecdhe_ecdsa_with_aes_256_ccm_8: int = 49327

pub val kmbedtls_tls_ecjpake_with_aes_128_ccm_8: int = 49407

pub val kmbedtls_tls_ecdhe_rsa_with_chacha20_poly1305_sha256: int = 52392

pub val kmbedtls_tls_ecdhe_ecdsa_with_chacha20_poly1305_sha256: int = 52393

pub val kmbedtls_tls_dhe_rsa_with_chacha20_poly1305_sha256: int = 52394

pub val kmbedtls_tls_psk_with_chacha20_poly1305_sha256: int = 52395

pub val kmbedtls_tls_ecdhe_psk_with_chacha20_poly1305_sha256: int = 52396

pub val kmbedtls_tls_dhe_psk_with_chacha20_poly1305_sha256: int = 52397

pub val kmbedtls_tls_rsa_psk_with_chacha20_poly1305_sha256: int = 52398

pub val kmbedtls_tls1_3_aes_128_gcm_sha256: int = 4865

pub val kmbedtls_tls1_3_aes_256_gcm_sha384: int = 4866

pub val kmbedtls_tls1_3_chacha20_poly1305_sha256: int = 4867

pub val kmbedtls_tls1_3_aes_128_ccm_sha256: int = 4868

pub val kmbedtls_tls1_3_aes_128_ccm_8_sha256: int = 4869

pub val kmbedtls_ciphersuite_weak: int = 1

pub val kmbedtls_ciphersuite_short_tag: int = 2

pub val kmbedtls_ciphersuite_nodtls: int = 4

pub val kmbedtls_x509_max_intermediate_ca: int = 8

pub val kmbedtls_err_x509_feature_unavailable: int = -8320

pub val kmbedtls_err_x509_unknown_oid: int = -8448

pub val kmbedtls_err_x509_invalid_format: int = -8576

pub val kmbedtls_err_x509_invalid_version: int = -8704

pub val kmbedtls_err_x509_invalid_serial: int = -8832

pub val kmbedtls_err_x509_invalid_alg: int = -8960

pub val kmbedtls_err_x509_invalid_name: int = -9088

pub val kmbedtls_err_x509_invalid_date: int = -9216

pub val kmbedtls_err_x509_invalid_signature: int = -9344

pub val kmbedtls_err_x509_invalid_extensions: int = -9472

pub val kmbedtls_err_x509_unknown_version: int = -9600

pub val kmbedtls_err_x509_unknown_sig_alg: int = -9728

pub val kmbedtls_err_x509_sig_mismatch: int = -9856

pub val kmbedtls_err_x509_cert_verify_failed: int = -9984

pub val kmbedtls_err_x509_cert_unknown_format: int = -10112

pub val kmbedtls_err_x509_bad_input_data: int = -10240

pub val kmbedtls_err_x509_alloc_failed: int = -10368

pub val kmbedtls_err_x509_file_io_error: int = -10496

pub val kmbedtls_err_x509_buffer_too_small: int = -10624

pub val kmbedtls_err_x509_fatal_error: int = -12288

pub val kmbedtls_x509_badcert_expired: int = 1

pub val kmbedtls_x509_badcert_revoked: int = 2

pub val kmbedtls_x509_badcert_cn_mismatch: int = 4

pub val kmbedtls_x509_badcert_not_trusted: int = 8

pub val kmbedtls_x509_badcrl_not_trusted: int = 16

pub val kmbedtls_x509_badcrl_expired: int = 32

pub val kmbedtls_x509_badcert_missing: int = 64

pub val kmbedtls_x509_badcert_skip_verify: int = 128

pub val kmbedtls_x509_badcert_other: int = 256

pub val kmbedtls_x509_badcert_future: int = 512

pub val kmbedtls_x509_badcrl_future: int = 1024

pub val kmbedtls_x509_badcert_key_usage: int = 2048

pub val kmbedtls_x509_badcert_ext_key_usage: int = 4096

pub val kmbedtls_x509_badcert_ns_cert_type: int = 8192

pub val kmbedtls_x509_badcert_bad_md: int = 16384

pub val kmbedtls_x509_badcert_bad_pk: int = 32768

pub val kmbedtls_x509_badcert_bad_key: int = 65536

pub val kmbedtls_x509_badcrl_bad_md: int = 131072

pub val kmbedtls_x509_badcrl_bad_pk: int = 262144

pub val kmbedtls_x509_badcrl_bad_key: int = 524288

pub val kmbedtls_x509_san_other_name: int = 0

pub val kmbedtls_x509_san_rfc822_name: int = 1

pub val kmbedtls_x509_san_dns_name: int = 2

pub val kmbedtls_x509_san_x400_address_name: int = 3

pub val kmbedtls_x509_san_directory_name: int = 4

pub val kmbedtls_x509_san_edi_party_name: int = 5

pub val kmbedtls_x509_san_uniform_resource_identifier: int = 6

pub val kmbedtls_x509_san_ip_address: int = 7

pub val kmbedtls_x509_san_registered_id: int = 8

pub val kmbedtls_x509_ku_digital_signature: int = 128

pub val kmbedtls_x509_ku_non_repudiation: int = 64

pub val kmbedtls_x509_ku_key_encipherment: int = 32

pub val kmbedtls_x509_ku_data_encipherment: int = 16

pub val kmbedtls_x509_ku_key_agreement: int = 8

pub val kmbedtls_x509_ku_key_cert_sign: int = 4

pub val kmbedtls_x509_ku_crl_sign: int = 2

pub val kmbedtls_x509_ku_encipher_only: int = 1

pub val kmbedtls_x509_ku_decipher_only: int = 32768

pub val kmbedtls_x509_ns_cert_type_ssl_client: int = 128

pub val kmbedtls_x509_ns_cert_type_ssl_server: int = 64

pub val kmbedtls_x509_ns_cert_type_email: int = 32

pub val kmbedtls_x509_ns_cert_type_object_signing: int = 16

pub val kmbedtls_x509_ns_cert_type_reserved: int = 8

pub val kmbedtls_x509_ns_cert_type_ssl_ca: int = 4

pub val kmbedtls_x509_ns_cert_type_email_ca: int = 2

pub val kmbedtls_x509_ns_cert_type_object_signing_ca: int = 1

pub val kmbedtls_x509_ext_authority_key_identifier: int = 1

pub val kmbedtls_x509_ext_subject_key_identifier: int = 2

pub val kmbedtls_x509_ext_key_usage: int = 4

pub val kmbedtls_x509_ext_certificate_policies: int = 8

pub val kmbedtls_x509_ext_policy_mappings: int = 16

pub val kmbedtls_x509_ext_subject_alt_name: int = 32

pub val kmbedtls_x509_ext_issuer_alt_name: int = 64

pub val kmbedtls_x509_ext_subject_directory_attrs: int = 128

pub val kmbedtls_x509_ext_basic_constraints: int = 256

pub val kmbedtls_x509_ext_name_constraints: int = 512

pub val kmbedtls_x509_ext_policy_constraints: int = 1024

pub val kmbedtls_x509_ext_extended_key_usage: int = 2048

pub val kmbedtls_x509_ext_crl_distribution_points: int = 4096

pub val kmbedtls_x509_ext_inihibit_anypolicy: int = 8192

pub val kmbedtls_x509_ext_freshest_crl: int = 16384

pub val kmbedtls_x509_ext_ns_cert_type: int = 65536

pub val kmbedtls_x509_format_der: int = 1

pub val kmbedtls_x509_format_pem: int = 2

pub val kmbedtls_x509_max_dn_name_size: int = 256

pub val kmbedtls_x509_crt_version_1: int = 0

pub val kmbedtls_x509_crt_version_2: int = 1

pub val kmbedtls_x509_crt_version_3: int = 2

pub val kmbedtls_x509_rfc5280_max_serial_len: int = 20

pub val kmbedtls_x509_rfc5280_utc_time_len: int = 15

pub val kmbedtls_x509_max_file_path_len: int = 512

pub val kmbedtls_x509_max_verify_chain_size: int = 10

pub val kmbedtls_err_dhm_bad_input_data: int = -12416

pub val kmbedtls_err_dhm_read_params_failed: int = -12544

pub val kmbedtls_err_dhm_make_params_failed: int = -12672

pub val kmbedtls_err_dhm_read_public_failed: int = -12800

pub val kmbedtls_err_dhm_make_public_failed: int = -12928

pub val kmbedtls_err_dhm_calc_secret_failed: int = -13056

pub val kmbedtls_err_dhm_invalid_format: int = -13184

pub val kmbedtls_err_dhm_alloc_failed: int = -13312

pub val kmbedtls_err_dhm_file_io_error: int = -13440

pub val kmbedtls_err_dhm_set_group_failed: int = -13696

pub val kmbedtls_err_ssl_crypto_in_progress: int = -28672

pub val kmbedtls_err_ssl_feature_unavailable: int = -28800

pub val kmbedtls_err_ssl_bad_input_data: int = -28928

pub val kmbedtls_err_ssl_invalid_mac: int = -29056

pub val kmbedtls_err_ssl_invalid_record: int = -29184

pub val kmbedtls_err_ssl_conn_eof: int = -29312

pub val kmbedtls_err_ssl_decode_error: int = -29440

pub val kmbedtls_err_ssl_no_rng: int = -29696

pub val kmbedtls_err_ssl_no_client_certificate: int = -29824

pub val kmbedtls_err_ssl_unsupported_extension: int = -29952

pub val kmbedtls_err_ssl_no_application_protocol: int = -30080

pub val kmbedtls_err_ssl_private_key_required: int = -30208

pub val kmbedtls_err_ssl_ca_chain_required: int = -30336

pub val kmbedtls_err_ssl_unexpected_message: int = -30464

pub val kmbedtls_err_ssl_fatal_alert_message: int = -30592

pub val kmbedtls_err_ssl_unrecognized_name: int = -30720

pub val kmbedtls_err_ssl_peer_close_notify: int = -30848

pub val kmbedtls_err_ssl_bad_certificate: int = -31232

pub val kmbedtls_err_ssl_received_new_session_ticket: int = -31488

pub val kmbedtls_err_ssl_cannot_read_early_data: int = -31616

pub val kmbedtls_err_ssl_received_early_data: int = -31744

pub val kmbedtls_err_ssl_cannot_write_early_data: int = -31872

pub val kmbedtls_err_ssl_cache_entry_not_found: int = -32384

pub val kmbedtls_err_ssl_alloc_failed: int = -32512

pub val kmbedtls_err_ssl_hw_accel_failed: int = -32640

pub val kmbedtls_err_ssl_hw_accel_fallthrough: int = -28544

pub val kmbedtls_err_ssl_bad_protocol_version: int = -28288

pub val kmbedtls_err_ssl_handshake_failure: int = -28160

pub val kmbedtls_err_ssl_session_ticket_expired: int = -28032

pub val kmbedtls_err_ssl_pk_type_mismatch: int = -27904

pub val kmbedtls_err_ssl_unknown_identity: int = -27776

pub val kmbedtls_err_ssl_internal_error: int = -27648

pub val kmbedtls_err_ssl_counter_wrapping: int = -27520

pub val kmbedtls_err_ssl_waiting_server_hello_renego: int = -27392

pub val kmbedtls_err_ssl_hello_verify_required: int = -27264

pub val kmbedtls_err_ssl_buffer_too_small: int = -27136

pub val kmbedtls_err_ssl_want_read: int = -26880

pub val kmbedtls_err_ssl_want_write: int = -26752

pub val kmbedtls_err_ssl_timeout: int = -26624

pub val kmbedtls_err_ssl_client_reconnect: int = -26496

pub val kmbedtls_err_ssl_unexpected_record: int = -26368

pub val kmbedtls_err_ssl_non_fatal: int = -26240

pub val kmbedtls_err_ssl_illegal_parameter: int = -26112

pub val kmbedtls_err_ssl_continue_processing: int = -25984

pub val kmbedtls_err_ssl_async_in_progress: int = -25856

pub val kmbedtls_err_ssl_early_message: int = -25728

pub val kmbedtls_err_ssl_unexpected_cid: int = -24576

pub val kmbedtls_err_ssl_version_mismatch: int = -24320

pub val kmbedtls_err_ssl_bad_config: int = -24192

pub val kmbedtls_ssl_tls1_3_psk_mode_pure: int = 0

pub val kmbedtls_ssl_tls1_3_psk_mode_ecdhe: int = 1

pub val kmbedtls_ssl_iana_tls_group_none: int = 0

pub val kmbedtls_ssl_iana_tls_group_secp192k1: int = 18

pub val kmbedtls_ssl_iana_tls_group_secp192r1: int = 19

pub val kmbedtls_ssl_iana_tls_group_secp224k1: int = 20

pub val kmbedtls_ssl_iana_tls_group_secp224r1: int = 21

pub val kmbedtls_ssl_iana_tls_group_secp256k1: int = 22

pub val kmbedtls_ssl_iana_tls_group_secp256r1: int = 23

pub val kmbedtls_ssl_iana_tls_group_secp384r1: int = 24

pub val kmbedtls_ssl_iana_tls_group_secp521r1: int = 25

pub val kmbedtls_ssl_iana_tls_group_bp256r1: int = 26

pub val kmbedtls_ssl_iana_tls_group_bp384r1: int = 27

pub val kmbedtls_ssl_iana_tls_group_bp512r1: int = 28

pub val kmbedtls_ssl_iana_tls_group_x25519: int = 29

pub val kmbedtls_ssl_iana_tls_group_x448: int = 30

pub val kmbedtls_ssl_iana_tls_group_ffdhe2048: int = 256

pub val kmbedtls_ssl_iana_tls_group_ffdhe3072: int = 257

pub val kmbedtls_ssl_iana_tls_group_ffdhe4096: int = 258

pub val kmbedtls_ssl_iana_tls_group_ffdhe6144: int = 259

pub val kmbedtls_ssl_iana_tls_group_ffdhe8192: int = 260

pub val kmbedtls_ssl_tls1_3_key_exchange_mode_psk: int = 1

pub val kmbedtls_ssl_tls1_3_key_exchange_mode_ephemeral: int = 2

pub val kmbedtls_ssl_tls1_3_key_exchange_mode_psk_ephemeral: int = 4

pub val kmbedtls_ssl_tls1_3_key_exchange_mode_all: int = 7

pub val kmbedtls_ssl_tls1_3_key_exchange_mode_psk_all: int = 5

pub val kmbedtls_ssl_tls1_3_key_exchange_mode_ephemeral_all: int = 6

pub val kmbedtls_ssl_tls1_3_key_exchange_mode_none: int = 0

pub val kmbedtls_ssl_major_version_3: int = 3

pub val kmbedtls_ssl_minor_version_3: int = 3

pub val kmbedtls_ssl_minor_version_4: int = 4

pub val kmbedtls_ssl_transport_stream: int = 0

pub val kmbedtls_ssl_transport_datagram: int = 1

pub val kmbedtls_ssl_max_host_name_len: int = 255

pub val kmbedtls_ssl_max_alpn_name_len: int = 255

pub val kmbedtls_ssl_max_alpn_list_len: int = 65535

pub val kmbedtls_ssl_max_frag_len_none: int = 0

pub val kmbedtls_ssl_max_frag_len_512: int = 1

pub val kmbedtls_ssl_max_frag_len_1024: int = 2

pub val kmbedtls_ssl_max_frag_len_2048: int = 3

pub val kmbedtls_ssl_max_frag_len_4096: int = 4

pub val kmbedtls_ssl_max_frag_len_invalid: int = 5

pub val kmbedtls_ssl_is_client: int = 0

pub val kmbedtls_ssl_is_server: int = 1

pub val kmbedtls_ssl_extended_ms_disabled: int = 0

pub val kmbedtls_ssl_extended_ms_enabled: int = 1

pub val kmbedtls_ssl_cid_disabled: int = 0

pub val kmbedtls_ssl_cid_enabled: int = 1

pub val kmbedtls_ssl_etm_disabled: int = 0

pub val kmbedtls_ssl_etm_enabled: int = 1

pub val kmbedtls_ssl_compress_null: int = 0

pub val kmbedtls_ssl_verify_none: int = 0

pub val kmbedtls_ssl_verify_optional: int = 1

pub val kmbedtls_ssl_verify_required: int = 2

pub val kmbedtls_ssl_verify_unset: int = 3

pub val kmbedtls_ssl_legacy_renegotiation: int = 0

pub val kmbedtls_ssl_secure_renegotiation: int = 1

pub val kmbedtls_ssl_renegotiation_disabled: int = 0

pub val kmbedtls_ssl_renegotiation_enabled: int = 1

pub val kmbedtls_ssl_anti_replay_disabled: int = 0

pub val kmbedtls_ssl_anti_replay_enabled: int = 1

pub val kmbedtls_ssl_renegotiation_not_enforced: int = -1

pub val kmbedtls_ssl_renego_max_records_default: int = 16

pub val kmbedtls_ssl_legacy_no_renegotiation: int = 0

pub val kmbedtls_ssl_legacy_allow_renegotiation: int = 1

pub val kmbedtls_ssl_legacy_break_handshake: int = 2

pub val kmbedtls_ssl_trunc_hmac_disabled: int = 0

pub val kmbedtls_ssl_trunc_hmac_enabled: int = 1

pub val kmbedtls_ssl_truncated_hmac_len: int = 10

pub val kmbedtls_ssl_session_tickets_disabled: int = 0

pub val kmbedtls_ssl_session_tickets_enabled: int = 1

pub val kmbedtls_ssl_preset_default: int = 0

pub val kmbedtls_ssl_preset_suiteb: int = 2

pub val kmbedtls_ssl_cert_req_ca_list_enabled: int = 1

pub val kmbedtls_ssl_cert_req_ca_list_disabled: int = 0

pub val kmbedtls_ssl_early_data_disabled: int = 0

pub val kmbedtls_ssl_early_data_enabled: int = 1

pub val kmbedtls_ssl_dtls_srtp_mki_unsupported: int = 0

pub val kmbedtls_ssl_dtls_srtp_mki_supported: int = 1

pub val kmbedtls_ssl_srv_ciphersuite_order_client: int = 1

pub val kmbedtls_ssl_srv_ciphersuite_order_server: int = 0

pub val kmbedtls_ssl_tls1_3_ticket_resumption_key_len: int = 48

pub val kmbedtls_ssl_dtls_timeout_dfl_min: int = 1000

pub val kmbedtls_ssl_dtls_timeout_dfl_max: int = 60000

pub val kmbedtls_ssl_early_data_no_discard: int = 0

pub val kmbedtls_ssl_early_data_try_to_deprotect_and_discard: int = 1

pub val kmbedtls_ssl_early_data_discard: int = 2

pub val kmbedtls_ssl_in_content_len: int = 16384

pub val kmbedtls_ssl_out_content_len: int = 16384

pub val kmbedtls_ssl_dtls_max_buffering: int = 32768

pub val kmbedtls_ssl_cid_in_len_max: int = 32

pub val kmbedtls_ssl_cid_out_len_max: int = 32

pub val kmbedtls_ssl_cid_tls1_3_padding_granularity: int = 16

pub val kmbedtls_ssl_max_early_data_size: int = 1024

pub val kmbedtls_ssl_tls1_3_ticket_age_tolerance: int = 6000

pub val kmbedtls_ssl_tls1_3_ticket_nonce_length: int = 32

pub val kmbedtls_ssl_tls1_3_default_new_session_tickets: int = 1

pub val kmbedtls_ssl_verify_data_max_len: int = 12

pub val kmbedtls_ssl_empty_renegotiation_info: int = 255

pub val kmbedtls_ssl_hash_none: int = 0

pub val kmbedtls_ssl_hash_md5: int = 1

pub val kmbedtls_ssl_hash_sha1: int = 2

pub val kmbedtls_ssl_hash_sha224: int = 3

pub val kmbedtls_ssl_hash_sha256: int = 4

pub val kmbedtls_ssl_hash_sha384: int = 5

pub val kmbedtls_ssl_hash_sha512: int = 6

pub val kmbedtls_ssl_sig_anon: int = 0

pub val kmbedtls_ssl_sig_rsa: int = 1

pub val kmbedtls_ssl_sig_ecdsa: int = 3

pub val kmbedtls_tls1_3_sig_rsa_pkcs1_sha256: int = 1025

pub val kmbedtls_tls1_3_sig_rsa_pkcs1_sha384: int = 1281

pub val kmbedtls_tls1_3_sig_rsa_pkcs1_sha512: int = 1537

pub val kmbedtls_tls1_3_sig_ecdsa_secp256r1_sha256: int = 1027

pub val kmbedtls_tls1_3_sig_ecdsa_secp384r1_sha384: int = 1283

pub val kmbedtls_tls1_3_sig_ecdsa_secp521r1_sha512: int = 1539

pub val kmbedtls_tls1_3_sig_rsa_pss_rsae_sha256: int = 2052

pub val kmbedtls_tls1_3_sig_rsa_pss_rsae_sha384: int = 2053

pub val kmbedtls_tls1_3_sig_rsa_pss_rsae_sha512: int = 2054

pub val kmbedtls_tls1_3_sig_ed25519: int = 2055

pub val kmbedtls_tls1_3_sig_ed448: int = 2056

pub val kmbedtls_tls1_3_sig_rsa_pss_pss_sha256: int = 2057

pub val kmbedtls_tls1_3_sig_rsa_pss_pss_sha384: int = 2058

pub val kmbedtls_tls1_3_sig_rsa_pss_pss_sha512: int = 2059

pub val kmbedtls_tls1_3_sig_rsa_pkcs1_sha1: int = 513

pub val kmbedtls_tls1_3_sig_ecdsa_sha1: int = 515

pub val kmbedtls_tls1_3_sig_none: int = 0

pub val kmbedtls_ssl_cert_type_rsa_sign: int = 1

pub val kmbedtls_ssl_cert_type_ecdsa_sign: int = 64

pub val kmbedtls_ssl_msg_change_cipher_spec: int = 20

pub val kmbedtls_ssl_msg_alert: int = 21

pub val kmbedtls_ssl_msg_handshake: int = 22

pub val kmbedtls_ssl_msg_application_data: int = 23

pub val kmbedtls_ssl_msg_cid: int = 25

pub val kmbedtls_ssl_alert_level_warning: int = 1

pub val kmbedtls_ssl_alert_level_fatal: int = 2

pub val kmbedtls_ssl_alert_msg_close_notify: int = 0

pub val kmbedtls_ssl_alert_msg_unexpected_message: int = 10

pub val kmbedtls_ssl_alert_msg_bad_record_mac: int = 20

pub val kmbedtls_ssl_alert_msg_decryption_failed: int = 21

pub val kmbedtls_ssl_alert_msg_record_overflow: int = 22

pub val kmbedtls_ssl_alert_msg_decompression_failure: int = 30

pub val kmbedtls_ssl_alert_msg_handshake_failure: int = 40

pub val kmbedtls_ssl_alert_msg_no_cert: int = 41

pub val kmbedtls_ssl_alert_msg_bad_cert: int = 42

pub val kmbedtls_ssl_alert_msg_unsupported_cert: int = 43

pub val kmbedtls_ssl_alert_msg_cert_revoked: int = 44

pub val kmbedtls_ssl_alert_msg_cert_expired: int = 45

pub val kmbedtls_ssl_alert_msg_cert_unknown: int = 46

pub val kmbedtls_ssl_alert_msg_illegal_parameter: int = 47

pub val kmbedtls_ssl_alert_msg_unknown_ca: int = 48

pub val kmbedtls_ssl_alert_msg_access_denied: int = 49

pub val kmbedtls_ssl_alert_msg_decode_error: int = 50

pub val kmbedtls_ssl_alert_msg_decrypt_error: int = 51

pub val kmbedtls_ssl_alert_msg_export_restriction: int = 60

pub val kmbedtls_ssl_alert_msg_protocol_version: int = 70

pub val kmbedtls_ssl_alert_msg_insufficient_security: int = 71

pub val kmbedtls_ssl_alert_msg_internal_error: int = 80

pub val kmbedtls_ssl_alert_msg_inapropriate_fallback: int = 86

pub val kmbedtls_ssl_alert_msg_user_canceled: int = 90

pub val kmbedtls_ssl_alert_msg_no_renegotiation: int = 100

pub val kmbedtls_ssl_alert_msg_missing_extension: int = 109

pub val kmbedtls_ssl_alert_msg_unsupported_ext: int = 110

pub val kmbedtls_ssl_alert_msg_unrecognized_name: int = 112

pub val kmbedtls_ssl_alert_msg_unknown_psk_identity: int = 115

pub val kmbedtls_ssl_alert_msg_cert_required: int = 116

pub val kmbedtls_ssl_alert_msg_no_application_protocol: int = 120

pub val kmbedtls_ssl_hs_hello_request: int = 0

pub val kmbedtls_ssl_hs_client_hello: int = 1

pub val kmbedtls_ssl_hs_server_hello: int = 2

pub val kmbedtls_ssl_hs_hello_verify_request: int = 3

pub val kmbedtls_ssl_hs_new_session_ticket: int = 4

pub val kmbedtls_ssl_hs_end_of_early_data: int = 5

pub val kmbedtls_ssl_hs_encrypted_extensions: int = 8

pub val kmbedtls_ssl_hs_certificate: int = 11

pub val kmbedtls_ssl_hs_server_key_exchange: int = 12

pub val kmbedtls_ssl_hs_certificate_request: int = 13

pub val kmbedtls_ssl_hs_server_hello_done: int = 14

pub val kmbedtls_ssl_hs_certificate_verify: int = 15

pub val kmbedtls_ssl_hs_client_key_exchange: int = 16

pub val kmbedtls_ssl_hs_finished: int = 20

pub val kmbedtls_ssl_hs_message_hash: int = 254

pub val kmbedtls_tls_ext_servername: int = 0

pub val kmbedtls_tls_ext_servername_hostname: int = 0

pub val kmbedtls_tls_ext_max_fragment_length: int = 1

pub val kmbedtls_tls_ext_truncated_hmac: int = 4

pub val kmbedtls_tls_ext_status_request: int = 5

pub val kmbedtls_tls_ext_supported_elliptic_curves: int = 10

pub val kmbedtls_tls_ext_supported_groups: int = 10

pub val kmbedtls_tls_ext_supported_point_formats: int = 11

pub val kmbedtls_tls_ext_sig_alg: int = 13

pub val kmbedtls_tls_ext_use_srtp: int = 14

pub val kmbedtls_tls_ext_heartbeat: int = 15

pub val kmbedtls_tls_ext_alpn: int = 16

pub val kmbedtls_tls_ext_sct: int = 18

pub val kmbedtls_tls_ext_cli_cert_type: int = 19

pub val kmbedtls_tls_ext_serv_cert_type: int = 20

pub val kmbedtls_tls_ext_padding: int = 21

pub val kmbedtls_tls_ext_encrypt_then_mac: int = 22

pub val kmbedtls_tls_ext_extended_master_secret: int = 23

pub val kmbedtls_tls_ext_record_size_limit: int = 28

pub val kmbedtls_tls_ext_session_ticket: int = 35

pub val kmbedtls_tls_ext_pre_shared_key: int = 41

pub val kmbedtls_tls_ext_early_data: int = 42

pub val kmbedtls_tls_ext_supported_versions: int = 43

pub val kmbedtls_tls_ext_cookie: int = 44

pub val kmbedtls_tls_ext_psk_key_exchange_modes: int = 45

pub val kmbedtls_tls_ext_cert_auth: int = 47

pub val kmbedtls_tls_ext_oid_filters: int = 48

pub val kmbedtls_tls_ext_post_handshake_auth: int = 49

pub val kmbedtls_tls_ext_sig_alg_cert: int = 50

pub val kmbedtls_tls_ext_key_share: int = 51

pub val kmbedtls_tls_ext_cid: int = 54

pub val kmbedtls_tls_ext_ecjpake_kkpp: int = 256

pub val kmbedtls_tls_ext_renegotiation_info: int = 65281

pub val kmbedtls_psk_max_len: int = 48

pub val kmbedtls_premaster_size: int = 1076

pub val kmbedtls_tls1_3_md_max_size: int = 64

pub val kmbedtls_ssl_sequence_number_len: int = 8

pub val kmbedtls_ssl_tls1_3_ticket_allow_psk_resumption: int = 1

pub val kmbedtls_ssl_tls1_3_ticket_allow_psk_ephemeral_resumption: int = 4

pub val kmbedtls_ssl_tls1_3_ticket_allow_early_data: int = 8

pub val kmbedtls_ssl_tls1_3_ticket_flags_mask: int = 13

pub val kmbedtls_ssl_unexpected_cid_ignore: int = 0

pub val kmbedtls_ssl_unexpected_cid_fail: int = 1

pub val kmbedtls_err_net_socket_failed: int = -66

pub val kmbedtls_err_net_connect_failed: int = -68

pub val kmbedtls_err_net_bind_failed: int = -70

pub val kmbedtls_err_net_listen_failed: int = -72

pub val kmbedtls_err_net_accept_failed: int = -74

pub val kmbedtls_err_net_recv_failed: int = -76

pub val kmbedtls_err_net_send_failed: int = -78

pub val kmbedtls_err_net_conn_reset: int = -80

pub val kmbedtls_err_net_unknown_host: int = -82

pub val kmbedtls_err_net_buffer_too_small: int = -67

pub val kmbedtls_err_net_invalid_context: int = -69

pub val kmbedtls_err_net_poll_failed: int = -71

pub val kmbedtls_err_net_bad_input_data: int = -73

pub val kmbedtls_net_listen_backlog: int = 10

pub val kmbedtls_net_proto_tcp: int = 0

pub val kmbedtls_net_proto_udp: int = 1

pub val kmbedtls_net_poll_read: int = 1

pub val kmbedtls_net_poll_write: int = 2

pub val kmbedtls_aes_encrypt: int = 1

pub val kmbedtls_aes_decrypt: int = 0

pub val kmbedtls_err_aes_invalid_key_length: int = -32

pub val kmbedtls_err_aes_invalid_input_length: int = -34

pub val kmbedtls_err_aes_bad_input_data: int = -33

pub val kmbedtls_aria_encrypt: int = 1

pub val kmbedtls_aria_decrypt: int = 0

pub val kmbedtls_aria_blocksize: int = 16

pub val kmbedtls_aria_max_rounds: int = 16

pub val kmbedtls_aria_max_keysize: int = 32

pub val kmbedtls_err_aria_bad_input_data: int = -92

pub val kmbedtls_err_aria_invalid_input_length: int = -94

pub val kmbedtls_camellia_encrypt: int = 1

pub val kmbedtls_camellia_decrypt: int = 0

pub val kmbedtls_err_camellia_bad_input_data: int = -36

pub val kmbedtls_err_camellia_invalid_input_length: int = -38

pub val kmbedtls_des_encrypt: int = 1

pub val kmbedtls_des_decrypt: int = 0

pub val kmbedtls_err_des_invalid_input_length: int = -50

pub val kmbedtls_des_key_size: int = 8

pub val kmbedtls_err_threading_bad_input_data: int = -28

pub val kmbedtls_err_threading_mutex_error: int = -30

pub val kmbedtls_err_lms_bad_input_data: int = -17

pub val kmbedtls_err_lms_out_of_private_keys: int = -19

pub val kmbedtls_err_lms_verify_failed: int = -21

pub val kmbedtls_err_lms_alloc_failed: int = -23

pub val kmbedtls_err_lms_buffer_too_small: int = -25

pub val kmbedtls_lmots_n_hash_len_max: int = 32

pub val kmbedtls_lmots_p_sig_digit_count_max: int = 34

pub val kmbedtls_lmots_i_key_id_len: int = 16

pub val kmbedtls_lmots_q_leaf_id_len: int = 4

pub val kmbedtls_lmots_type_len: int = 4

pub val kmbedtls_lms_type_len: int = 4

pub val kmbedtls_lms_m_node_bytes_max: int = 32

pub val kmbedtls_err_base64_buffer_too_small: int = -42

pub val kmbedtls_err_base64_invalid_character: int = -44

pub val kmbedtls_printf_sizet: string = "zu"

pub val kmbedtls_printf_longlong: string = "lld"

pub val kmbedtls_printf_ms_time: string = "ld"

pub val kmbedtls_entropy_md: int = 11

pub val kmbedtls_entropy_block_size: int = 64

pub val kmbedtls_err_entropy_source_failed: int = -60

pub val kmbedtls_err_entropy_max_sources: int = -62

pub val kmbedtls_err_entropy_no_sources_defined: int = -64

pub val kmbedtls_err_entropy_no_strong_source: int = -61

pub val kmbedtls_err_entropy_file_io_error: int = -63

pub val kmbedtls_entropy_max_sources: int = 20

pub val kmbedtls_entropy_max_gather: int = 128

pub val kmbedtls_entropy_max_seed_size: int = 1024

pub val kmbedtls_entropy_source_manual: int = 20

pub val kmbedtls_entropy_source_strong: int = 1

pub val kmbedtls_entropy_source_weak: int = 0

pub val kmbedtls_err_pem_no_header_footer_present: int = -4224

pub val kmbedtls_err_pem_invalid_data: int = -4352

pub val kmbedtls_err_pem_alloc_failed: int = -4480

pub val kmbedtls_err_pem_invalid_enc_iv: int = -4608

pub val kmbedtls_err_pem_unknown_enc_alg: int = -4736

pub val kmbedtls_err_pem_password_required: int = -4864

pub val kmbedtls_err_pem_password_mismatch: int = -4992

pub val kmbedtls_err_pem_feature_unavailable: int = -5120

pub val kmbedtls_err_pem_bad_input_data: int = -5248

pub val kmbedtls_err_hmac_drbg_request_too_big: int = -3

pub val kmbedtls_err_hmac_drbg_input_too_big: int = -5

pub val kmbedtls_err_hmac_drbg_file_io_error: int = -7

pub val kmbedtls_err_hmac_drbg_entropy_source_failed: int = -9

pub val kmbedtls_hmac_drbg_reseed_interval: int = 10000

pub val kmbedtls_hmac_drbg_max_input: int = 256

pub val kmbedtls_hmac_drbg_max_request: int = 1024

pub val kmbedtls_hmac_drbg_max_seed_input: int = 384

pub val kmbedtls_hmac_drbg_pr_off: int = 0

pub val kmbedtls_hmac_drbg_pr_on: int = 1

pub val kmbedtls_err_pkcs12_bad_input_data: int = -8064

pub val kmbedtls_err_pkcs12_feature_unavailable: int = -7936

pub val kmbedtls_err_pkcs12_pbe_invalid_format: int = -7808

pub val kmbedtls_err_pkcs12_password_mismatch: int = -7680

pub val kmbedtls_pkcs12_derive_key: int = 1

pub val kmbedtls_pkcs12_derive_iv: int = 2

pub val kmbedtls_pkcs12_derive_mac_key: int = 3

pub val kmbedtls_pkcs12_pbe_decrypt: int = 0

pub val kmbedtls_pkcs12_pbe_encrypt: int = 1

pub val kmbedtls_err_pkcs7_invalid_format: int = -21248

pub val kmbedtls_err_pkcs7_feature_unavailable: int = -21376

pub val kmbedtls_err_pkcs7_invalid_version: int = -21504

pub val kmbedtls_err_pkcs7_invalid_content_info: int = -21632

pub val kmbedtls_err_pkcs7_invalid_alg: int = -21760

pub val kmbedtls_err_pkcs7_invalid_cert: int = -21888

pub val kmbedtls_err_pkcs7_invalid_signature: int = -22016

pub val kmbedtls_err_pkcs7_invalid_signer_info: int = -22144

pub val kmbedtls_err_pkcs7_bad_input_data: int = -22272

pub val kmbedtls_err_pkcs7_alloc_failed: int = -22400

pub val kmbedtls_err_pkcs7_verify_fail: int = -22528

pub val kmbedtls_err_pkcs7_cert_date_invalid: int = -22656

pub val kmbedtls_pkcs7_supported_version: int = 1

pub val kmbedtls_psa_random_state: int = 0

pub val kmbedtls_platform_std_exit_success: int = 0

pub val kmbedtls_platform_std_exit_failure: int = 1

pub val kmbedtls_platform_std_nv_seed_file: string = "seedfile"

pub val kmbedtls_exit_success: int = 0

pub val kmbedtls_exit_failure: int = 1

pub val kmbedtls_err_oid_not_found: int = -46

pub val kmbedtls_err_oid_buf_too_small: int = -11

pub val kmbedtls_oid_x509_ext_authority_key_identifier: int = 1

pub val kmbedtls_oid_x509_ext_subject_key_identifier: int = 2

pub val kmbedtls_oid_x509_ext_key_usage: int = 4

pub val kmbedtls_oid_x509_ext_certificate_policies: int = 8

pub val kmbedtls_oid_x509_ext_policy_mappings: int = 16

pub val kmbedtls_oid_x509_ext_subject_alt_name: int = 32

pub val kmbedtls_oid_x509_ext_issuer_alt_name: int = 64

pub val kmbedtls_oid_x509_ext_subject_directory_attrs: int = 128

pub val kmbedtls_oid_x509_ext_basic_constraints: int = 256

pub val kmbedtls_oid_x509_ext_name_constraints: int = 512

pub val kmbedtls_oid_x509_ext_policy_constraints: int = 1024

pub val kmbedtls_oid_x509_ext_extended_key_usage: int = 2048

pub val kmbedtls_oid_x509_ext_crl_distribution_points: int = 4096

pub val kmbedtls_oid_x509_ext_inihibit_anypolicy: int = 8192

pub val kmbedtls_oid_x509_ext_freshest_crl: int = 16384

pub val kmbedtls_oid_x509_ext_ns_cert_type: int = 65536

pub val kmbedtls_oid_max_components: int = 128

pub val kmbedtls_oid_iso_member_bodies: string = "*"

pub val kmbedtls_oid_iso_identified_org: string = "+"

pub val kmbedtls_oid_iso_ccitt_ds: string = "U"

pub val kmbedtls_oid_iso_itu_country: string = "`"

pub val kmbedtls_oid_country_us: string = "\x86\x48"

pub val kmbedtls_oid_org_rsa_data_security: string = "\x86\xF7\r"

pub val kmbedtls_oid_rsa_company: string = "\x2A\x86\x48\x86\xF7\r"

pub val kmbedtls_oid_org_ansi_x9_62: string = "\xCE\x3D"

pub val kmbedtls_oid_ansi_x9_62: string = "\x2A\x86\x48\xCE\x3D"

pub val kmbedtls_oid_org_dod: string = "\x06"

pub val kmbedtls_oid_org_oiw: string = "\x0E"

pub val kmbedtls_oid_oiw_secsig: string = "\x0E\x03"

pub val kmbedtls_oid_oiw_secsig_alg: string = "\x0E\x03\x02"

pub val kmbedtls_oid_oiw_secsig_sha1: string = "\x0E\x03\x02\x1A"

pub val kmbedtls_oid_org_thawte: string = "e"

pub val kmbedtls_oid_thawte: string = "+e"

pub val kmbedtls_oid_org_certicom: string = "\x81\x04"

pub val kmbedtls_oid_certicom: string = "\x2B\x81\x04"

pub val kmbedtls_oid_org_teletrust: string = "$"

pub val kmbedtls_oid_teletrust: string = "+$"

pub val kmbedtls_oid_organization: string = "\x01"

pub val kmbedtls_oid_iso_itu_us_org: string = "\x60\x86\x48\x01"

pub val kmbedtls_oid_org_gov: string = "e"

pub val kmbedtls_oid_gov: string = "\x60\x86\x48\x01\x65"

pub val kmbedtls_oid_org_netscape: string = "\x86\xF8\x42"

pub val kmbedtls_oid_netscape: string = "\x60\x86\x48\x01\x86\xF8\x42"

pub val kmbedtls_oid_id_ce: string = "U\x1D"

pub val kmbedtls_oid_nist_alg: string = "\x60\x86\x48\x01\x65\x03\x04"

pub val kmbedtls_oid_internet: string = "+\x06\x01"

pub val kmbedtls_oid_pkix: string = "+\x06\x01\x05\x05\x07"

pub val kmbedtls_oid_at: string = "U\x04"

pub val kmbedtls_oid_at_cn: string = "U\x04\x03"

pub val kmbedtls_oid_at_sur_name: string = "U\x04\x04"

pub val kmbedtls_oid_at_serial_number: string = "U\x04\x05"

pub val kmbedtls_oid_at_country: string = "U\x04\x06"

pub val kmbedtls_oid_at_locality: string = "U\x04\x07"

pub val kmbedtls_oid_at_state: string = "U\x04\x08"

pub val kmbedtls_oid_at_organization: string = "U\x04\n"

pub val kmbedtls_oid_at_org_unit: string = "U\x04\x0B"

pub val kmbedtls_oid_at_title: string = "U\x04\x0C"

pub val kmbedtls_oid_at_postal_address: string = "U\x04\x10"

pub val kmbedtls_oid_at_postal_code: string = "U\x04\x11"

pub val kmbedtls_oid_at_given_name: string = "U\x04*"

pub val kmbedtls_oid_at_initials: string = "U\x04+"

pub val kmbedtls_oid_at_generation_qualifier: string = "U\x04,"

pub val kmbedtls_oid_at_unique_identifier: string = "U\x04-"

pub val kmbedtls_oid_at_dn_qualifier: string = "U\x04."

pub val kmbedtls_oid_at_pseudonym: string = "U\x04A"

pub val kmbedtls_oid_uid: string = "\t\x92\x26\x89\x93\xF2\x2C\x64\x01\x01"

pub val kmbedtls_oid_domain_component: string = "\t\x92\x26\x89\x93\xF2\x2C\x64\x01\x19"

pub val kmbedtls_oid_authority_key_identifier: string = "U\x1D#"

pub val kmbedtls_oid_subject_key_identifier: string = "U\x1D\x0E"

pub val kmbedtls_oid_key_usage: string = "U\x1D\x0F"

pub val kmbedtls_oid_certificate_policies: string = "U\x1D "

pub val kmbedtls_oid_policy_mappings: string = "U\x1D!"

pub val kmbedtls_oid_subject_alt_name: string = "U\x1D\x11"

pub val kmbedtls_oid_issuer_alt_name: string = "U\x1D\x12"

pub val kmbedtls_oid_subject_directory_attrs: string = "U\x1D\t"

pub val kmbedtls_oid_basic_constraints: string = "U\x1D\x13"

pub val kmbedtls_oid_name_constraints: string = "U\x1D\x1E"

pub val kmbedtls_oid_policy_constraints: string = "U\x1D$"

pub val kmbedtls_oid_extended_key_usage: string = "U\x1D%"

pub val kmbedtls_oid_crl_distribution_points: string = "U\x1D\x1F"

pub val kmbedtls_oid_inihibit_anypolicy: string = "U\x1D6"

pub val kmbedtls_oid_freshest_crl: string = "U\x1D."

pub val kmbedtls_oid_any_policy: string = "U\x1D "

pub val kmbedtls_oid_ns_cert: string = "\x60\x86\x48\x01\x86\xF8\x42\x01"

pub val kmbedtls_oid_ns_cert_type: string = "\x60\x86\x48\x01\x86\xF8\x42\x01\x01"

pub val kmbedtls_oid_ns_base_url: string = "\x60\x86\x48\x01\x86\xF8\x42\x01\x02"

pub val kmbedtls_oid_ns_revocation_url: string = "\x60\x86\x48\x01\x86\xF8\x42\x01\x03"

pub val kmbedtls_oid_ns_ca_revocation_url: string = "\x60\x86\x48\x01\x86\xF8\x42\x01\x04"

pub val kmbedtls_oid_ns_renewal_url: string = "\x60\x86\x48\x01\x86\xF8\x42\x01\x07"

pub val kmbedtls_oid_ns_ca_policy_url: string = "\x60\x86\x48\x01\x86\xF8\x42\x01\x08"

pub val kmbedtls_oid_ns_ssl_server_name: string = "\x60\x86\x48\x01\x86\xF8\x42\x01\x0C"

pub val kmbedtls_oid_ns_comment: string = "\x60\x86\x48\x01\x86\xF8\x42\x01\r"

pub val kmbedtls_oid_ns_data_type: string = "\x60\x86\x48\x01\x86\xF8\x42\x02"

pub val kmbedtls_oid_ns_cert_sequence: string = "\x60\x86\x48\x01\x86\xF8\x42\x02\x05"

pub val kmbedtls_oid_private_key_usage_period: string = "U\x1D\x10"

pub val kmbedtls_oid_crl_number: string = "U\x1D\x14"

pub val kmbedtls_oid_any_extended_key_usage: string = "U\x1D%"

pub val kmbedtls_oid_kp: string = "+\x06\x01\x05\x05\x07\x03"

pub val kmbedtls_oid_server_auth: string = "+\x06\x01\x05\x05\x07\x03\x01"

pub val kmbedtls_oid_client_auth: string = "+\x06\x01\x05\x05\x07\x03\x02"

pub val kmbedtls_oid_code_signing: string = "+\x06\x01\x05\x05\x07\x03\x03"

pub val kmbedtls_oid_email_protection: string = "+\x06\x01\x05\x05\x07\x03\x04"

pub val kmbedtls_oid_time_stamping: string = "+\x06\x01\x05\x05\x07\x03\x08"

pub val kmbedtls_oid_ocsp_signing: string = "+\x06\x01\x05\x05\x07\x03\t"

pub val kmbedtls_oid_wisun_fan: string = "\x2B\x06\x01\x04\x01\x82\xE4\x25\x01"

pub val kmbedtls_oid_on: string = "+\x06\x01\x05\x05\x07\x08"

pub val kmbedtls_oid_on_hw_module_name: string = "+\x06\x01\x05\x05\x07\x08\x04"

pub val kmbedtls_oid_pkcs: string = "\x2A\x86\x48\x86\xF7\r\x01"

pub val kmbedtls_oid_pkcs1: string = "\x2A\x86\x48\x86\xF7\r\x01\x01"

pub val kmbedtls_oid_pkcs5: string = "\x2A\x86\x48\x86\xF7\r\x01\x05"

pub val kmbedtls_oid_pkcs7: string = "\x2A\x86\x48\x86\xF7\r\x01\x07"

pub val kmbedtls_oid_pkcs9: string = "\x2A\x86\x48\x86\xF7\r\x01\t"

pub val kmbedtls_oid_pkcs12: string = "\x2A\x86\x48\x86\xF7\r\x01\x0C"

pub val kmbedtls_oid_pkcs1_rsa: string = "\x2A\x86\x48\x86\xF7\r\x01\x01\x01"

pub val kmbedtls_oid_pkcs1_md5: string = "\x2A\x86\x48\x86\xF7\r\x01\x01\x04"

pub val kmbedtls_oid_pkcs1_sha1: string = "\x2A\x86\x48\x86\xF7\r\x01\x01\x05"

pub val kmbedtls_oid_pkcs1_sha224: string = "\x2A\x86\x48\x86\xF7\r\x01\x01\x0E"

pub val kmbedtls_oid_pkcs1_sha256: string = "\x2A\x86\x48\x86\xF7\r\x01\x01\x0B"

pub val kmbedtls_oid_pkcs1_sha384: string = "\x2A\x86\x48\x86\xF7\r\x01\x01\x0C"

pub val kmbedtls_oid_pkcs1_sha512: string = "\x2A\x86\x48\x86\xF7\r\x01\x01\r"

pub val kmbedtls_oid_rsa_sha_obs: string = "+\x0E\x03\x02\x1D"

pub val kmbedtls_oid_pkcs9_email: string = "\x2A\x86\x48\x86\xF7\r\x01\t\x01"

pub val kmbedtls_oid_rsassa_pss: string = "\x2A\x86\x48\x86\xF7\r\x01\x01\n"

pub val kmbedtls_oid_mgf1: string = "\x2A\x86\x48\x86\xF7\r\x01\x01\x08"

pub val kmbedtls_oid_digest_alg_md5: string = "\x2A\x86\x48\x86\xF7\r\x02\x05"

pub val kmbedtls_oid_digest_alg_sha1: string = "+\x0E\x03\x02\x1A"

pub val kmbedtls_oid_digest_alg_sha224: string = "\x60\x86\x48\x01\x65\x03\x04\x02\x04"

pub val kmbedtls_oid_digest_alg_sha256: string = "\x60\x86\x48\x01\x65\x03\x04\x02\x01"

pub val kmbedtls_oid_digest_alg_sha384: string = "\x60\x86\x48\x01\x65\x03\x04\x02\x02"

pub val kmbedtls_oid_digest_alg_sha512: string = "\x60\x86\x48\x01\x65\x03\x04\x02\x03"

pub val kmbedtls_oid_digest_alg_ripemd160: string = "+$\x03\x02\x01"

pub val kmbedtls_oid_digest_alg_sha3_224: string = "\x60\x86\x48\x01\x65\x03\x04\x02\x07"

pub val kmbedtls_oid_digest_alg_sha3_256: string = "\x60\x86\x48\x01\x65\x03\x04\x02\x08"

pub val kmbedtls_oid_digest_alg_sha3_384: string = "\x60\x86\x48\x01\x65\x03\x04\x02\t"

pub val kmbedtls_oid_digest_alg_sha3_512: string = "\x60\x86\x48\x01\x65\x03\x04\x02\n"

pub val kmbedtls_oid_hmac_sha1: string = "\x2A\x86\x48\x86\xF7\r\x02\x07"

pub val kmbedtls_oid_hmac_sha224: string = "\x2A\x86\x48\x86\xF7\r\x02\x08"

pub val kmbedtls_oid_hmac_sha256: string = "\x2A\x86\x48\x86\xF7\r\x02\t"

pub val kmbedtls_oid_hmac_sha384: string = "\x2A\x86\x48\x86\xF7\r\x02\n"

pub val kmbedtls_oid_hmac_sha512: string = "\x2A\x86\x48\x86\xF7\r\x02\x0B"

pub val kmbedtls_oid_hmac_sha3_224: string = "\x60\x86\x48\x01\x65\x03\x04\x02\r"

pub val kmbedtls_oid_hmac_sha3_256: string = "\x60\x86\x48\x01\x65\x03\x04\x02\x0E"

pub val kmbedtls_oid_hmac_sha3_384: string = "\x60\x86\x48\x01\x65\x03\x04\x02\x0F"

pub val kmbedtls_oid_hmac_sha3_512: string = "\x60\x86\x48\x01\x65\x03\x04\x02\x10"

pub val kmbedtls_oid_hmac_ripemd160: string = "+\x06\x01\x05\x05\x08\x01\x04"

pub val kmbedtls_oid_des_cbc: string = "+\x0E\x03\x02\x07"

pub val kmbedtls_oid_des_ede3_cbc: string = "\x2A\x86\x48\x86\xF7\r\x03\x07"

pub val kmbedtls_oid_aes: string = "\x60\x86\x48\x01\x65\x03\x04\x01"

pub val kmbedtls_oid_aes_128_cbc: string = "\x60\x86\x48\x01\x65\x03\x04\x01\x02"

pub val kmbedtls_oid_aes_192_cbc: string = "\x60\x86\x48\x01\x65\x03\x04\x01\x16"

pub val kmbedtls_oid_aes_256_cbc: string = "\x60\x86\x48\x01\x65\x03\x04\x01\x2A"

pub val kmbedtls_oid_aes128_kw: string = "\x60\x86\x48\x01\x65\x03\x04\x01\x05"

pub val kmbedtls_oid_aes128_kwp: string = "\x60\x86\x48\x01\x65\x03\x04\x01\x08"

pub val kmbedtls_oid_aes192_kw: string = "\x60\x86\x48\x01\x65\x03\x04\x01\x19"

pub val kmbedtls_oid_aes192_kwp: string = "\x60\x86\x48\x01\x65\x03\x04\x01\x1C"

pub val kmbedtls_oid_aes256_kw: string = "\x60\x86\x48\x01\x65\x03\x04\x01\x2D"

pub val kmbedtls_oid_aes256_kwp: string = "\x60\x86\x48\x01\x65\x03\x04\x01\x30"

pub val kmbedtls_oid_pkcs5_pbkdf2: string = "\x2A\x86\x48\x86\xF7\r\x01\x05\x0C"

pub val kmbedtls_oid_pkcs5_pbes2: string = "\x2A\x86\x48\x86\xF7\r\x01\x05\r"

pub val kmbedtls_oid_pkcs5_pbmac1: string = "\x2A\x86\x48\x86\xF7\r\x01\x05\x0E"

pub val kmbedtls_oid_pkcs5_pbe_md5_des_cbc: string = "\x2A\x86\x48\x86\xF7\r\x01\x05\x03"

pub val kmbedtls_oid_pkcs5_pbe_md5_rc2_cbc: string = "\x2A\x86\x48\x86\xF7\r\x01\x05\x06"

pub val kmbedtls_oid_pkcs5_pbe_sha1_des_cbc: string = "\x2A\x86\x48\x86\xF7\r\x01\x05\n"

pub val kmbedtls_oid_pkcs5_pbe_sha1_rc2_cbc: string = "\x2A\x86\x48\x86\xF7\r\x01\x05\x0B"

pub val kmbedtls_oid_pkcs7_data: string = "\x2A\x86\x48\x86\xF7\r\x01\x07\x01"

pub val kmbedtls_oid_pkcs7_signed_data: string = "\x2A\x86\x48\x86\xF7\r\x01\x07\x02"

pub val kmbedtls_oid_pkcs7_enveloped_data: string = "\x2A\x86\x48\x86\xF7\r\x01\x07\x03"

pub val kmbedtls_oid_pkcs7_signed_and_enveloped_data: string = "\x2A\x86\x48\x86\xF7\r\x01\x07\x04"

pub val kmbedtls_oid_pkcs7_digested_data: string = "\x2A\x86\x48\x86\xF7\r\x01\x07\x05"

pub val kmbedtls_oid_pkcs7_encrypted_data: string = "\x2A\x86\x48\x86\xF7\r\x01\x07\x06"

pub val kmbedtls_oid_pkcs9_csr_ext_req: string = "\x2A\x86\x48\x86\xF7\r\x01\t\x0E"

pub val kmbedtls_oid_pkcs12_pbe: string = "\x2A\x86\x48\x86\xF7\r\x01\x0C\x01"

pub val kmbedtls_oid_pkcs12_pbe_sha1_des3_ede_cbc: string = "\x2A\x86\x48\x86\xF7\r\x01\x0C\x01\x03"

pub val kmbedtls_oid_pkcs12_pbe_sha1_des2_ede_cbc: string = "\x2A\x86\x48\x86\xF7\r\x01\x0C\x01\x04"

pub val kmbedtls_oid_pkcs12_pbe_sha1_rc2_128_cbc: string = "\x2A\x86\x48\x86\xF7\r\x01\x0C\x01\x05"

pub val kmbedtls_oid_pkcs12_pbe_sha1_rc2_40_cbc: string = "\x2A\x86\x48\x86\xF7\r\x01\x0C\x01\x06"

pub val kmbedtls_oid_ec_alg_unrestricted: string = "\x2A\x86\x48\xCE\x3D\x02\x01"

pub val kmbedtls_oid_ec_alg_ecdh: string = "\x2B\x81\x04\x01\x0C"

pub val kmbedtls_oid_ec_grp_secp192r1: string = "\x2A\x86\x48\xCE\x3D\x03\x01\x01"

pub val kmbedtls_oid_ec_grp_secp224r1: string = "\x2B\x81\x04"

pub val kmbedtls_oid_ec_grp_secp256r1: string = "\x2A\x86\x48\xCE\x3D\x03\x01\x07"

pub val kmbedtls_oid_ec_grp_secp384r1: string = "\x2B\x81\x04"

pub val kmbedtls_oid_ec_grp_secp521r1: string = "\x2B\x81\x04"

pub val kmbedtls_oid_ec_grp_secp192k1: string = "\x2B\x81\x04"

pub val kmbedtls_oid_ec_grp_secp224k1: string = "\x2B\x81\x04"

pub val kmbedtls_oid_ec_grp_secp256k1: string = "\x2B\x81\x04"

pub val kmbedtls_oid_ec_brainpool_v1: string = "+$\x03\x03\x02\x08\x01\x01"

pub val kmbedtls_oid_ec_grp_bp256r1: string = "+$\x03\x03\x02\x08\x01\x01\x07"

pub val kmbedtls_oid_ec_grp_bp384r1: string = "+$\x03\x03\x02\x08\x01\x01\x0B"

pub val kmbedtls_oid_ec_grp_bp512r1: string = "+$\x03\x03\x02\x08\x01\x01\r"

pub val kmbedtls_oid_ansi_x9_62_field_type: string = "\x2A\x86\x48\xCE\x3D\x01"

pub val kmbedtls_oid_ansi_x9_62_prime_field: string = "\x2A\x86\x48\xCE\x3D\x01\x01"

pub val kmbedtls_oid_ansi_x9_62_sig: string = "\x2A\x86\x48\xCE\x3D\x04"

pub val kmbedtls_oid_ansi_x9_62_sig_sha2: string = "\x2A\x86\x48\xCE\x3D\x04\x03"

pub val kmbedtls_oid_ecdsa_sha1: string = "\x2A\x86\x48\xCE\x3D\x04\x01"

pub val kmbedtls_oid_ecdsa_sha224: string = "\x2A\x86\x48\xCE\x3D\x04\x03\x01"

pub val kmbedtls_oid_ecdsa_sha256: string = "\x2A\x86\x48\xCE\x3D\x04\x03\x02"

pub val kmbedtls_oid_ecdsa_sha384: string = "\x2A\x86\x48\xCE\x3D\x04\x03\x03"

pub val kmbedtls_oid_ecdsa_sha512: string = "\x2A\x86\x48\xCE\x3D\x04\x03\x04"

pub val kmbedtls_oid_x25519: string = "+en"

pub val kmbedtls_oid_x448: string = "+eo"

pub val kmbedtls_oid_ed25519: string = "+ep"

pub val kmbedtls_oid_ed448: string = "+eq"

pub val kmbedtls_err_hkdf_bad_input_data: int = -24448

pub val kmbedtls_err_ctr_drbg_entropy_source_failed: int = -52

pub val kmbedtls_err_ctr_drbg_request_too_big: int = -54

pub val kmbedtls_err_ctr_drbg_input_too_big: int = -56

pub val kmbedtls_err_ctr_drbg_file_io_error: int = -58

pub val kmbedtls_ctr_drbg_blocksize: int = 16

pub val kmbedtls_ctr_drbg_keysize: int = 32

pub val kmbedtls_ctr_drbg_keybits: int = 256

pub val kmbedtls_ctr_drbg_seedlen: int = 48

pub val kmbedtls_ctr_drbg_entropy_len: int = 48

pub val kmbedtls_ctr_drbg_reseed_interval: int = 10000

pub val kmbedtls_ctr_drbg_max_input: int = 256

pub val kmbedtls_ctr_drbg_max_request: int = 1024

pub val kmbedtls_ctr_drbg_max_seed_input: int = 384

pub val kmbedtls_ctr_drbg_pr_off: int = 0

pub val kmbedtls_ctr_drbg_pr_on: int = 1

pub val kmbedtls_ctr_drbg_entropy_nonce_len: int = 0

pub val kmbedtls_err_error_generic_error: int = -1

pub val kmbedtls_err_error_corruption_detected: int = -110

pub val kmbedtls_err_platform_hw_accel_failed: int = -112

pub val kmbedtls_err_platform_feature_unsupported: int = -114

pub val kmbedtls_ssl_cookie_timeout: int = 60

pub val kmbedtls_err_pkcs5_bad_input_data: int = -12160

pub val kmbedtls_err_pkcs5_invalid_format: int = -12032

pub val kmbedtls_err_pkcs5_feature_unavailable: int = -11904

pub val kmbedtls_err_pkcs5_password_mismatch: int = -11776

pub val kmbedtls_pkcs5_decrypt: int = 0

pub val kmbedtls_pkcs5_encrypt: int = 1

pub val kmbedtls_memory_align_multiple: int = 4

pub val kmbedtls_memory_verify_none: int = 0

pub val kmbedtls_memory_verify_alloc: int = 1

pub val kmbedtls_memory_verify_free: int = 2

pub val kmbedtls_memory_verify_always: int = 3

pub val kmbedtls_ssl_ticket_max_key_bytes: int = 32

pub val kmbedtls_ssl_ticket_key_name_bytes: int = 4

pub val kmbedtls_ssl_cache_default_timeout: int = 86400

pub val kmbedtls_ssl_cache_default_max_entries: int = 50

