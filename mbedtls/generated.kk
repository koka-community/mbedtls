// Copyright (c) 2020, the Koka-Community authors. All rights reserved. 
// Use of this source code is governed by a
// MIT-style license that can be found in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
// 
// Generated by `ffigen`.

import std/core/cextern
import std/num/int32
import std/num/int64
import std/num/float64

extern import
  c { vcpkg="mbedtls" }

// \brief Flags for mbedtls_mpi_gen_prime()
// 
// Each of these flags is a constraint on the result X returned by
// mbedtls_mpi_gen_prime().
type mbedtls-mpi-gen-prime-flag-t
  // < (X-1)/2 is prime too
  MBEDTLS_MPI_GEN_PRIME_FLAG_DH
  // < lower error rate from 2<sup>-80</sup> to 2<sup>-128</sup>
  MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR

pub fun mbedtls-mpi-gen-prime-flag-t/int(i: mbedtls-mpi-gen-prime-flag-t): int32
  match i
    MBEDTLS_MPI_GEN_PRIME_FLAG_DH -> 1.int32
    MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR -> 2.int32

pub fun int/mbedtls-mpi-gen-prime-flag-t(i: int32): exn mbedtls-mpi-gen-prime-flag-t
  match i.int
    1 -> MBEDTLS_MPI_GEN_PRIME_FLAG_DH
    2 -> MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR

// \brief     Supported message digests.
// 
// \warning   MD5 and SHA-1 are considered weak message digests and
// their use constitutes a security risk. We recommend considering
// stronger message digests instead.
type mbedtls-md-type-t
  // < None.
  MBEDTLS_MD_NONE
  // < The MD5 message digest.
  MBEDTLS_MD_MD5
  // < The RIPEMD-160 message digest.
  MBEDTLS_MD_RIPEMD160
  // < The SHA-1 message digest.
  MBEDTLS_MD_SHA1
  // < The SHA-224 message digest.
  MBEDTLS_MD_SHA224
  // < The SHA-256 message digest.
  MBEDTLS_MD_SHA256
  // < The SHA-384 message digest.
  MBEDTLS_MD_SHA384
  // < The SHA-512 message digest.
  MBEDTLS_MD_SHA512
  // < The SHA3-224 message digest.
  MBEDTLS_MD_SHA3_224
  // < The SHA3-256 message digest.
  MBEDTLS_MD_SHA3_256
  // < The SHA3-384 message digest.
  MBEDTLS_MD_SHA3_384
  // < The SHA3-512 message digest.
  MBEDTLS_MD_SHA3_512

pub fun mbedtls-md-type-t/int(i: mbedtls-md-type-t): int32
  match i
    MBEDTLS_MD_NONE -> 0.int32
    MBEDTLS_MD_MD5 -> 3.int32
    MBEDTLS_MD_RIPEMD160 -> 4.int32
    MBEDTLS_MD_SHA1 -> 5.int32
    MBEDTLS_MD_SHA224 -> 8.int32
    MBEDTLS_MD_SHA256 -> 9.int32
    MBEDTLS_MD_SHA384 -> 10.int32
    MBEDTLS_MD_SHA512 -> 11.int32
    MBEDTLS_MD_SHA3_224 -> 16.int32
    MBEDTLS_MD_SHA3_256 -> 17.int32
    MBEDTLS_MD_SHA3_384 -> 18.int32
    MBEDTLS_MD_SHA3_512 -> 19.int32

pub fun int/mbedtls-md-type-t(i: int32): exn mbedtls-md-type-t
  match i.int
    0 -> MBEDTLS_MD_NONE
    3 -> MBEDTLS_MD_MD5
    4 -> MBEDTLS_MD_RIPEMD160
    5 -> MBEDTLS_MD_SHA1
    8 -> MBEDTLS_MD_SHA224
    9 -> MBEDTLS_MD_SHA256
    10 -> MBEDTLS_MD_SHA384
    11 -> MBEDTLS_MD_SHA512
    16 -> MBEDTLS_MD_SHA3_224
    17 -> MBEDTLS_MD_SHA3_256
    18 -> MBEDTLS_MD_SHA3_384
    19 -> MBEDTLS_MD_SHA3_512

// Used internally to indicate whether a context uses legacy or PSA.
// 
// Internal use only.
type mbedtls-md-engine-t
  MBEDTLS_MD_ENGINE_LEGACY
  MBEDTLS_MD_ENGINE_PSA

pub fun mbedtls-md-engine-t/int(i: mbedtls-md-engine-t): int32
  match i
    MBEDTLS_MD_ENGINE_LEGACY -> 0.int32
    MBEDTLS_MD_ENGINE_PSA -> 1.int32

pub fun int/mbedtls-md-engine-t(i: int32): exn mbedtls-md-engine-t
  match i.int
    0 -> MBEDTLS_MD_ENGINE_LEGACY
    1 -> MBEDTLS_MD_ENGINE_PSA

// Domain-parameter identifiers: curve, subgroup, and generator.
// 
// \note Only curves over prime fields are supported.
// 
// \warning This library does not support validation of arbitrary domain
// parameters. Therefore, only standardized domain parameters from trusted
// sources should be used. See mbedtls_ecp_group_load().
type mbedtls-ecp-group-id
  // !< Curve not defined.
  MBEDTLS_ECP_DP_NONE
  // !< Domain parameters for the 192-bit curve defined by FIPS 186-4 and SEC1.
  MBEDTLS_ECP_DP_SECP192R1
  // !< Domain parameters for the 224-bit curve defined by FIPS 186-4 and SEC1.
  MBEDTLS_ECP_DP_SECP224R1
  // !< Domain parameters for the 256-bit curve defined by FIPS 186-4 and SEC1.
  MBEDTLS_ECP_DP_SECP256R1
  // !< Domain parameters for the 384-bit curve defined by FIPS 186-4 and SEC1.
  MBEDTLS_ECP_DP_SECP384R1
  // !< Domain parameters for the 521-bit curve defined by FIPS 186-4 and SEC1.
  MBEDTLS_ECP_DP_SECP521R1
  // !< Domain parameters for 256-bit Brainpool curve.
  MBEDTLS_ECP_DP_BP256R1
  // !< Domain parameters for 384-bit Brainpool curve.
  MBEDTLS_ECP_DP_BP384R1
  // !< Domain parameters for 512-bit Brainpool curve.
  MBEDTLS_ECP_DP_BP512R1
  // !< Domain parameters for Curve25519.
  MBEDTLS_ECP_DP_CURVE25519
  // !< Domain parameters for 192-bit "Koblitz" curve.
  MBEDTLS_ECP_DP_SECP192K1
  // !< Domain parameters for 224-bit "Koblitz" curve.
  MBEDTLS_ECP_DP_SECP224K1
  // !< Domain parameters for 256-bit "Koblitz" curve.
  MBEDTLS_ECP_DP_SECP256K1
  // !< Domain parameters for Curve448.
  MBEDTLS_ECP_DP_CURVE448

pub fun mbedtls-ecp-group-id/int(i: mbedtls-ecp-group-id): int32
  match i
    MBEDTLS_ECP_DP_NONE -> 0.int32
    MBEDTLS_ECP_DP_SECP192R1 -> 1.int32
    MBEDTLS_ECP_DP_SECP224R1 -> 2.int32
    MBEDTLS_ECP_DP_SECP256R1 -> 3.int32
    MBEDTLS_ECP_DP_SECP384R1 -> 4.int32
    MBEDTLS_ECP_DP_SECP521R1 -> 5.int32
    MBEDTLS_ECP_DP_BP256R1 -> 6.int32
    MBEDTLS_ECP_DP_BP384R1 -> 7.int32
    MBEDTLS_ECP_DP_BP512R1 -> 8.int32
    MBEDTLS_ECP_DP_CURVE25519 -> 9.int32
    MBEDTLS_ECP_DP_SECP192K1 -> 10.int32
    MBEDTLS_ECP_DP_SECP224K1 -> 11.int32
    MBEDTLS_ECP_DP_SECP256K1 -> 12.int32
    MBEDTLS_ECP_DP_CURVE448 -> 13.int32

pub fun int/mbedtls-ecp-group-id(i: int32): exn mbedtls-ecp-group-id
  match i.int
    0 -> MBEDTLS_ECP_DP_NONE
    1 -> MBEDTLS_ECP_DP_SECP192R1
    2 -> MBEDTLS_ECP_DP_SECP224R1
    3 -> MBEDTLS_ECP_DP_SECP256R1
    4 -> MBEDTLS_ECP_DP_SECP384R1
    5 -> MBEDTLS_ECP_DP_SECP521R1
    6 -> MBEDTLS_ECP_DP_BP256R1
    7 -> MBEDTLS_ECP_DP_BP384R1
    8 -> MBEDTLS_ECP_DP_BP512R1
    9 -> MBEDTLS_ECP_DP_CURVE25519
    10 -> MBEDTLS_ECP_DP_SECP192K1
    11 -> MBEDTLS_ECP_DP_SECP224K1
    12 -> MBEDTLS_ECP_DP_SECP256K1
    13 -> MBEDTLS_ECP_DP_CURVE448

type mbedtls-ecp-curve-type
  MBEDTLS_ECP_TYPE_NONE
  MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS
  MBEDTLS_ECP_TYPE_MONTGOMERY

pub fun mbedtls-ecp-curve-type/int(i: mbedtls-ecp-curve-type): int32
  match i
    MBEDTLS_ECP_TYPE_NONE -> 0.int32
    MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS -> 1.int32
    MBEDTLS_ECP_TYPE_MONTGOMERY -> 2.int32

pub fun int/mbedtls-ecp-curve-type(i: int32): exn mbedtls-ecp-curve-type
  match i.int
    0 -> MBEDTLS_ECP_TYPE_NONE
    1 -> MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS
    2 -> MBEDTLS_ECP_TYPE_MONTGOMERY

// For encrypt-decrypt functions, whether the operation is an encryption
// or a decryption.
type psa-encrypt-or-decrypt-t
  PSA_CRYPTO_DRIVER_DECRYPT
  PSA_CRYPTO_DRIVER_ENCRYPT

pub fun psa-encrypt-or-decrypt-t/int(i: psa-encrypt-or-decrypt-t): int32
  match i
    PSA_CRYPTO_DRIVER_DECRYPT -> 0.int32
    PSA_CRYPTO_DRIVER_ENCRYPT -> 1.int32

pub fun int/psa-encrypt-or-decrypt-t(i: int32): exn psa-encrypt-or-decrypt-t
  match i.int
    0 -> PSA_CRYPTO_DRIVER_DECRYPT
    1 -> PSA_CRYPTO_DRIVER_ENCRYPT

// SHA-3 family id.
// 
// It identifies the family (SHA3-256, SHA3-512, etc.)
type mbedtls-sha3-id
  // !< Operation not defined.
  MBEDTLS_SHA3_NONE
  // !< SHA3-224
  MBEDTLS_SHA3_224
  // !< SHA3-256
  MBEDTLS_SHA3_256
  // !< SHA3-384
  MBEDTLS_SHA3_384
  // !< SHA3-512
  MBEDTLS_SHA3_512

pub fun mbedtls-sha3-id/int(i: mbedtls-sha3-id): int32
  match i
    MBEDTLS_SHA3_NONE -> 0.int32
    MBEDTLS_SHA3_224 -> 1.int32
    MBEDTLS_SHA3_256 -> 2.int32
    MBEDTLS_SHA3_384 -> 3.int32
    MBEDTLS_SHA3_512 -> 4.int32

pub fun int/mbedtls-sha3-id(i: int32): exn mbedtls-sha3-id
  match i.int
    0 -> MBEDTLS_SHA3_NONE
    1 -> MBEDTLS_SHA3_224
    2 -> MBEDTLS_SHA3_256
    3 -> MBEDTLS_SHA3_384
    4 -> MBEDTLS_SHA3_512

// \brief     Supported cipher types.
// 
// \warning   DES/3DES are considered weak ciphers and their use
// constitutes a security risk. We recommend considering stronger
// ciphers instead.
type mbedtls-cipher-id-t
  // < Placeholder to mark the end of cipher ID lists.
  MBEDTLS_CIPHER_ID_NONE
  // < The identity cipher, treated as a stream cipher.
  MBEDTLS_CIPHER_ID_NULL
  // < The AES cipher.
  MBEDTLS_CIPHER_ID_AES
  // < The DES cipher. \warning DES is considered weak.
  MBEDTLS_CIPHER_ID_DES
  // < The Triple DES cipher. \warning 3DES is considered weak.
  MBEDTLS_CIPHER_ID_3DES
  // < The Camellia cipher.
  MBEDTLS_CIPHER_ID_CAMELLIA
  // < The Aria cipher.
  MBEDTLS_CIPHER_ID_ARIA
  // < The ChaCha20 cipher.
  MBEDTLS_CIPHER_ID_CHACHA20

pub fun mbedtls-cipher-id-t/int(i: mbedtls-cipher-id-t): int32
  match i
    MBEDTLS_CIPHER_ID_NONE -> 0.int32
    MBEDTLS_CIPHER_ID_NULL -> 1.int32
    MBEDTLS_CIPHER_ID_AES -> 2.int32
    MBEDTLS_CIPHER_ID_DES -> 3.int32
    MBEDTLS_CIPHER_ID_3DES -> 4.int32
    MBEDTLS_CIPHER_ID_CAMELLIA -> 5.int32
    MBEDTLS_CIPHER_ID_ARIA -> 6.int32
    MBEDTLS_CIPHER_ID_CHACHA20 -> 7.int32

pub fun int/mbedtls-cipher-id-t(i: int32): exn mbedtls-cipher-id-t
  match i.int
    0 -> MBEDTLS_CIPHER_ID_NONE
    1 -> MBEDTLS_CIPHER_ID_NULL
    2 -> MBEDTLS_CIPHER_ID_AES
    3 -> MBEDTLS_CIPHER_ID_DES
    4 -> MBEDTLS_CIPHER_ID_3DES
    5 -> MBEDTLS_CIPHER_ID_CAMELLIA
    6 -> MBEDTLS_CIPHER_ID_ARIA
    7 -> MBEDTLS_CIPHER_ID_CHACHA20

// \brief     Supported {cipher type, cipher mode} pairs.
// 
// \warning   DES/3DES are considered weak ciphers and their use
// constitutes a security risk. We recommend considering stronger
// ciphers instead.
type mbedtls-cipher-type-t
  // < Placeholder to mark the end of cipher-pair lists.
  MBEDTLS_CIPHER_NONE
  // < The identity stream cipher.
  MBEDTLS_CIPHER_NULL
  // < AES cipher with 128-bit ECB mode.
  MBEDTLS_CIPHER_AES_128_ECB
  // < AES cipher with 192-bit ECB mode.
  MBEDTLS_CIPHER_AES_192_ECB
  // < AES cipher with 256-bit ECB mode.
  MBEDTLS_CIPHER_AES_256_ECB
  // < AES cipher with 128-bit CBC mode.
  MBEDTLS_CIPHER_AES_128_CBC
  // < AES cipher with 192-bit CBC mode.
  MBEDTLS_CIPHER_AES_192_CBC
  // < AES cipher with 256-bit CBC mode.
  MBEDTLS_CIPHER_AES_256_CBC
  // < AES cipher with 128-bit CFB128 mode.
  MBEDTLS_CIPHER_AES_128_CFB128
  // < AES cipher with 192-bit CFB128 mode.
  MBEDTLS_CIPHER_AES_192_CFB128
  // < AES cipher with 256-bit CFB128 mode.
  MBEDTLS_CIPHER_AES_256_CFB128
  // < AES cipher with 128-bit CTR mode.
  MBEDTLS_CIPHER_AES_128_CTR
  // < AES cipher with 192-bit CTR mode.
  MBEDTLS_CIPHER_AES_192_CTR
  // < AES cipher with 256-bit CTR mode.
  MBEDTLS_CIPHER_AES_256_CTR
  // < AES cipher with 128-bit GCM mode.
  MBEDTLS_CIPHER_AES_128_GCM
  // < AES cipher with 192-bit GCM mode.
  MBEDTLS_CIPHER_AES_192_GCM
  // < AES cipher with 256-bit GCM mode.
  MBEDTLS_CIPHER_AES_256_GCM
  // < Camellia cipher with 128-bit ECB mode.
  MBEDTLS_CIPHER_CAMELLIA_128_ECB
  // < Camellia cipher with 192-bit ECB mode.
  MBEDTLS_CIPHER_CAMELLIA_192_ECB
  // < Camellia cipher with 256-bit ECB mode.
  MBEDTLS_CIPHER_CAMELLIA_256_ECB
  // < Camellia cipher with 128-bit CBC mode.
  MBEDTLS_CIPHER_CAMELLIA_128_CBC
  // < Camellia cipher with 192-bit CBC mode.
  MBEDTLS_CIPHER_CAMELLIA_192_CBC
  // < Camellia cipher with 256-bit CBC mode.
  MBEDTLS_CIPHER_CAMELLIA_256_CBC
  // < Camellia cipher with 128-bit CFB128 mode.
  MBEDTLS_CIPHER_CAMELLIA_128_CFB128
  // < Camellia cipher with 192-bit CFB128 mode.
  MBEDTLS_CIPHER_CAMELLIA_192_CFB128
  // < Camellia cipher with 256-bit CFB128 mode.
  MBEDTLS_CIPHER_CAMELLIA_256_CFB128
  // < Camellia cipher with 128-bit CTR mode.
  MBEDTLS_CIPHER_CAMELLIA_128_CTR
  // < Camellia cipher with 192-bit CTR mode.
  MBEDTLS_CIPHER_CAMELLIA_192_CTR
  // < Camellia cipher with 256-bit CTR mode.
  MBEDTLS_CIPHER_CAMELLIA_256_CTR
  // < Camellia cipher with 128-bit GCM mode.
  MBEDTLS_CIPHER_CAMELLIA_128_GCM
  // < Camellia cipher with 192-bit GCM mode.
  MBEDTLS_CIPHER_CAMELLIA_192_GCM
  // < Camellia cipher with 256-bit GCM mode.
  MBEDTLS_CIPHER_CAMELLIA_256_GCM
  // < DES cipher with ECB mode. \warning DES is considered weak.
  MBEDTLS_CIPHER_DES_ECB
  // < DES cipher with CBC mode. \warning DES is considered weak.
  MBEDTLS_CIPHER_DES_CBC
  // < DES cipher with EDE ECB mode. \warning 3DES is considered weak.
  MBEDTLS_CIPHER_DES_EDE_ECB
  // < DES cipher with EDE CBC mode. \warning 3DES is considered weak.
  MBEDTLS_CIPHER_DES_EDE_CBC
  // < DES cipher with EDE3 ECB mode. \warning 3DES is considered weak.
  MBEDTLS_CIPHER_DES_EDE3_ECB
  // < DES cipher with EDE3 CBC mode. \warning 3DES is considered weak.
  MBEDTLS_CIPHER_DES_EDE3_CBC
  // < AES cipher with 128-bit CCM mode.
  MBEDTLS_CIPHER_AES_128_CCM
  // < AES cipher with 192-bit CCM mode.
  MBEDTLS_CIPHER_AES_192_CCM
  // < AES cipher with 256-bit CCM mode.
  MBEDTLS_CIPHER_AES_256_CCM
  // < AES cipher with 128-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_AES_128_CCM_STAR_NO_TAG
  // < AES cipher with 192-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_AES_192_CCM_STAR_NO_TAG
  // < AES cipher with 256-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_AES_256_CCM_STAR_NO_TAG
  // < Camellia cipher with 128-bit CCM mode.
  MBEDTLS_CIPHER_CAMELLIA_128_CCM
  // < Camellia cipher with 192-bit CCM mode.
  MBEDTLS_CIPHER_CAMELLIA_192_CCM
  // < Camellia cipher with 256-bit CCM mode.
  MBEDTLS_CIPHER_CAMELLIA_256_CCM
  // < Camellia cipher with 128-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_CAMELLIA_128_CCM_STAR_NO_TAG
  // < Camellia cipher with 192-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_CAMELLIA_192_CCM_STAR_NO_TAG
  // < Camellia cipher with 256-bit CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_CAMELLIA_256_CCM_STAR_NO_TAG
  // < Aria cipher with 128-bit key and ECB mode.
  MBEDTLS_CIPHER_ARIA_128_ECB
  // < Aria cipher with 192-bit key and ECB mode.
  MBEDTLS_CIPHER_ARIA_192_ECB
  // < Aria cipher with 256-bit key and ECB mode.
  MBEDTLS_CIPHER_ARIA_256_ECB
  // < Aria cipher with 128-bit key and CBC mode.
  MBEDTLS_CIPHER_ARIA_128_CBC
  // < Aria cipher with 192-bit key and CBC mode.
  MBEDTLS_CIPHER_ARIA_192_CBC
  // < Aria cipher with 256-bit key and CBC mode.
  MBEDTLS_CIPHER_ARIA_256_CBC
  // < Aria cipher with 128-bit key and CFB-128 mode.
  MBEDTLS_CIPHER_ARIA_128_CFB128
  // < Aria cipher with 192-bit key and CFB-128 mode.
  MBEDTLS_CIPHER_ARIA_192_CFB128
  // < Aria cipher with 256-bit key and CFB-128 mode.
  MBEDTLS_CIPHER_ARIA_256_CFB128
  // < Aria cipher with 128-bit key and CTR mode.
  MBEDTLS_CIPHER_ARIA_128_CTR
  // < Aria cipher with 192-bit key and CTR mode.
  MBEDTLS_CIPHER_ARIA_192_CTR
  // < Aria cipher with 256-bit key and CTR mode.
  MBEDTLS_CIPHER_ARIA_256_CTR
  // < Aria cipher with 128-bit key and GCM mode.
  MBEDTLS_CIPHER_ARIA_128_GCM
  // < Aria cipher with 192-bit key and GCM mode.
  MBEDTLS_CIPHER_ARIA_192_GCM
  // < Aria cipher with 256-bit key and GCM mode.
  MBEDTLS_CIPHER_ARIA_256_GCM
  // < Aria cipher with 128-bit key and CCM mode.
  MBEDTLS_CIPHER_ARIA_128_CCM
  // < Aria cipher with 192-bit key and CCM mode.
  MBEDTLS_CIPHER_ARIA_192_CCM
  // < Aria cipher with 256-bit key and CCM mode.
  MBEDTLS_CIPHER_ARIA_256_CCM
  // < Aria cipher with 128-bit key and CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_ARIA_128_CCM_STAR_NO_TAG
  // < Aria cipher with 192-bit key and CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_ARIA_192_CCM_STAR_NO_TAG
  // < Aria cipher with 256-bit key and CCM_STAR_NO_TAG mode.
  MBEDTLS_CIPHER_ARIA_256_CCM_STAR_NO_TAG
  // < AES 128-bit cipher in OFB mode.
  MBEDTLS_CIPHER_AES_128_OFB
  // < AES 192-bit cipher in OFB mode.
  MBEDTLS_CIPHER_AES_192_OFB
  // < AES 256-bit cipher in OFB mode.
  MBEDTLS_CIPHER_AES_256_OFB
  // < AES 128-bit cipher in XTS block mode.
  MBEDTLS_CIPHER_AES_128_XTS
  // < AES 256-bit cipher in XTS block mode.
  MBEDTLS_CIPHER_AES_256_XTS
  // < ChaCha20 stream cipher.
  MBEDTLS_CIPHER_CHACHA20
  // < ChaCha20-Poly1305 AEAD cipher.
  MBEDTLS_CIPHER_CHACHA20_POLY1305
  // < AES cipher with 128-bit NIST KW mode.
  MBEDTLS_CIPHER_AES_128_KW
  // < AES cipher with 192-bit NIST KW mode.
  MBEDTLS_CIPHER_AES_192_KW
  // < AES cipher with 256-bit NIST KW mode.
  MBEDTLS_CIPHER_AES_256_KW
  // < AES cipher with 128-bit NIST KWP mode.
  MBEDTLS_CIPHER_AES_128_KWP
  // < AES cipher with 192-bit NIST KWP mode.
  MBEDTLS_CIPHER_AES_192_KWP
  // < AES cipher with 256-bit NIST KWP mode.
  MBEDTLS_CIPHER_AES_256_KWP

pub fun mbedtls-cipher-type-t/int(i: mbedtls-cipher-type-t): int32
  match i
    MBEDTLS_CIPHER_NONE -> 0.int32
    MBEDTLS_CIPHER_NULL -> 1.int32
    MBEDTLS_CIPHER_AES_128_ECB -> 2.int32
    MBEDTLS_CIPHER_AES_192_ECB -> 3.int32
    MBEDTLS_CIPHER_AES_256_ECB -> 4.int32
    MBEDTLS_CIPHER_AES_128_CBC -> 5.int32
    MBEDTLS_CIPHER_AES_192_CBC -> 6.int32
    MBEDTLS_CIPHER_AES_256_CBC -> 7.int32
    MBEDTLS_CIPHER_AES_128_CFB128 -> 8.int32
    MBEDTLS_CIPHER_AES_192_CFB128 -> 9.int32
    MBEDTLS_CIPHER_AES_256_CFB128 -> 10.int32
    MBEDTLS_CIPHER_AES_128_CTR -> 11.int32
    MBEDTLS_CIPHER_AES_192_CTR -> 12.int32
    MBEDTLS_CIPHER_AES_256_CTR -> 13.int32
    MBEDTLS_CIPHER_AES_128_GCM -> 14.int32
    MBEDTLS_CIPHER_AES_192_GCM -> 15.int32
    MBEDTLS_CIPHER_AES_256_GCM -> 16.int32
    MBEDTLS_CIPHER_CAMELLIA_128_ECB -> 17.int32
    MBEDTLS_CIPHER_CAMELLIA_192_ECB -> 18.int32
    MBEDTLS_CIPHER_CAMELLIA_256_ECB -> 19.int32
    MBEDTLS_CIPHER_CAMELLIA_128_CBC -> 20.int32
    MBEDTLS_CIPHER_CAMELLIA_192_CBC -> 21.int32
    MBEDTLS_CIPHER_CAMELLIA_256_CBC -> 22.int32
    MBEDTLS_CIPHER_CAMELLIA_128_CFB128 -> 23.int32
    MBEDTLS_CIPHER_CAMELLIA_192_CFB128 -> 24.int32
    MBEDTLS_CIPHER_CAMELLIA_256_CFB128 -> 25.int32
    MBEDTLS_CIPHER_CAMELLIA_128_CTR -> 26.int32
    MBEDTLS_CIPHER_CAMELLIA_192_CTR -> 27.int32
    MBEDTLS_CIPHER_CAMELLIA_256_CTR -> 28.int32
    MBEDTLS_CIPHER_CAMELLIA_128_GCM -> 29.int32
    MBEDTLS_CIPHER_CAMELLIA_192_GCM -> 30.int32
    MBEDTLS_CIPHER_CAMELLIA_256_GCM -> 31.int32
    MBEDTLS_CIPHER_DES_ECB -> 32.int32
    MBEDTLS_CIPHER_DES_CBC -> 33.int32
    MBEDTLS_CIPHER_DES_EDE_ECB -> 34.int32
    MBEDTLS_CIPHER_DES_EDE_CBC -> 35.int32
    MBEDTLS_CIPHER_DES_EDE3_ECB -> 36.int32
    MBEDTLS_CIPHER_DES_EDE3_CBC -> 37.int32
    MBEDTLS_CIPHER_AES_128_CCM -> 38.int32
    MBEDTLS_CIPHER_AES_192_CCM -> 39.int32
    MBEDTLS_CIPHER_AES_256_CCM -> 40.int32
    MBEDTLS_CIPHER_AES_128_CCM_STAR_NO_TAG -> 41.int32
    MBEDTLS_CIPHER_AES_192_CCM_STAR_NO_TAG -> 42.int32
    MBEDTLS_CIPHER_AES_256_CCM_STAR_NO_TAG -> 43.int32
    MBEDTLS_CIPHER_CAMELLIA_128_CCM -> 44.int32
    MBEDTLS_CIPHER_CAMELLIA_192_CCM -> 45.int32
    MBEDTLS_CIPHER_CAMELLIA_256_CCM -> 46.int32
    MBEDTLS_CIPHER_CAMELLIA_128_CCM_STAR_NO_TAG -> 47.int32
    MBEDTLS_CIPHER_CAMELLIA_192_CCM_STAR_NO_TAG -> 48.int32
    MBEDTLS_CIPHER_CAMELLIA_256_CCM_STAR_NO_TAG -> 49.int32
    MBEDTLS_CIPHER_ARIA_128_ECB -> 50.int32
    MBEDTLS_CIPHER_ARIA_192_ECB -> 51.int32
    MBEDTLS_CIPHER_ARIA_256_ECB -> 52.int32
    MBEDTLS_CIPHER_ARIA_128_CBC -> 53.int32
    MBEDTLS_CIPHER_ARIA_192_CBC -> 54.int32
    MBEDTLS_CIPHER_ARIA_256_CBC -> 55.int32
    MBEDTLS_CIPHER_ARIA_128_CFB128 -> 56.int32
    MBEDTLS_CIPHER_ARIA_192_CFB128 -> 57.int32
    MBEDTLS_CIPHER_ARIA_256_CFB128 -> 58.int32
    MBEDTLS_CIPHER_ARIA_128_CTR -> 59.int32
    MBEDTLS_CIPHER_ARIA_192_CTR -> 60.int32
    MBEDTLS_CIPHER_ARIA_256_CTR -> 61.int32
    MBEDTLS_CIPHER_ARIA_128_GCM -> 62.int32
    MBEDTLS_CIPHER_ARIA_192_GCM -> 63.int32
    MBEDTLS_CIPHER_ARIA_256_GCM -> 64.int32
    MBEDTLS_CIPHER_ARIA_128_CCM -> 65.int32
    MBEDTLS_CIPHER_ARIA_192_CCM -> 66.int32
    MBEDTLS_CIPHER_ARIA_256_CCM -> 67.int32
    MBEDTLS_CIPHER_ARIA_128_CCM_STAR_NO_TAG -> 68.int32
    MBEDTLS_CIPHER_ARIA_192_CCM_STAR_NO_TAG -> 69.int32
    MBEDTLS_CIPHER_ARIA_256_CCM_STAR_NO_TAG -> 70.int32
    MBEDTLS_CIPHER_AES_128_OFB -> 71.int32
    MBEDTLS_CIPHER_AES_192_OFB -> 72.int32
    MBEDTLS_CIPHER_AES_256_OFB -> 73.int32
    MBEDTLS_CIPHER_AES_128_XTS -> 74.int32
    MBEDTLS_CIPHER_AES_256_XTS -> 75.int32
    MBEDTLS_CIPHER_CHACHA20 -> 76.int32
    MBEDTLS_CIPHER_CHACHA20_POLY1305 -> 77.int32
    MBEDTLS_CIPHER_AES_128_KW -> 78.int32
    MBEDTLS_CIPHER_AES_192_KW -> 79.int32
    MBEDTLS_CIPHER_AES_256_KW -> 80.int32
    MBEDTLS_CIPHER_AES_128_KWP -> 81.int32
    MBEDTLS_CIPHER_AES_192_KWP -> 82.int32
    MBEDTLS_CIPHER_AES_256_KWP -> 83.int32

pub fun int/mbedtls-cipher-type-t(i: int32): exn mbedtls-cipher-type-t
  match i.int
    0 -> MBEDTLS_CIPHER_NONE
    1 -> MBEDTLS_CIPHER_NULL
    2 -> MBEDTLS_CIPHER_AES_128_ECB
    3 -> MBEDTLS_CIPHER_AES_192_ECB
    4 -> MBEDTLS_CIPHER_AES_256_ECB
    5 -> MBEDTLS_CIPHER_AES_128_CBC
    6 -> MBEDTLS_CIPHER_AES_192_CBC
    7 -> MBEDTLS_CIPHER_AES_256_CBC
    8 -> MBEDTLS_CIPHER_AES_128_CFB128
    9 -> MBEDTLS_CIPHER_AES_192_CFB128
    10 -> MBEDTLS_CIPHER_AES_256_CFB128
    11 -> MBEDTLS_CIPHER_AES_128_CTR
    12 -> MBEDTLS_CIPHER_AES_192_CTR
    13 -> MBEDTLS_CIPHER_AES_256_CTR
    14 -> MBEDTLS_CIPHER_AES_128_GCM
    15 -> MBEDTLS_CIPHER_AES_192_GCM
    16 -> MBEDTLS_CIPHER_AES_256_GCM
    17 -> MBEDTLS_CIPHER_CAMELLIA_128_ECB
    18 -> MBEDTLS_CIPHER_CAMELLIA_192_ECB
    19 -> MBEDTLS_CIPHER_CAMELLIA_256_ECB
    20 -> MBEDTLS_CIPHER_CAMELLIA_128_CBC
    21 -> MBEDTLS_CIPHER_CAMELLIA_192_CBC
    22 -> MBEDTLS_CIPHER_CAMELLIA_256_CBC
    23 -> MBEDTLS_CIPHER_CAMELLIA_128_CFB128
    24 -> MBEDTLS_CIPHER_CAMELLIA_192_CFB128
    25 -> MBEDTLS_CIPHER_CAMELLIA_256_CFB128
    26 -> MBEDTLS_CIPHER_CAMELLIA_128_CTR
    27 -> MBEDTLS_CIPHER_CAMELLIA_192_CTR
    28 -> MBEDTLS_CIPHER_CAMELLIA_256_CTR
    29 -> MBEDTLS_CIPHER_CAMELLIA_128_GCM
    30 -> MBEDTLS_CIPHER_CAMELLIA_192_GCM
    31 -> MBEDTLS_CIPHER_CAMELLIA_256_GCM
    32 -> MBEDTLS_CIPHER_DES_ECB
    33 -> MBEDTLS_CIPHER_DES_CBC
    34 -> MBEDTLS_CIPHER_DES_EDE_ECB
    35 -> MBEDTLS_CIPHER_DES_EDE_CBC
    36 -> MBEDTLS_CIPHER_DES_EDE3_ECB
    37 -> MBEDTLS_CIPHER_DES_EDE3_CBC
    38 -> MBEDTLS_CIPHER_AES_128_CCM
    39 -> MBEDTLS_CIPHER_AES_192_CCM
    40 -> MBEDTLS_CIPHER_AES_256_CCM
    41 -> MBEDTLS_CIPHER_AES_128_CCM_STAR_NO_TAG
    42 -> MBEDTLS_CIPHER_AES_192_CCM_STAR_NO_TAG
    43 -> MBEDTLS_CIPHER_AES_256_CCM_STAR_NO_TAG
    44 -> MBEDTLS_CIPHER_CAMELLIA_128_CCM
    45 -> MBEDTLS_CIPHER_CAMELLIA_192_CCM
    46 -> MBEDTLS_CIPHER_CAMELLIA_256_CCM
    47 -> MBEDTLS_CIPHER_CAMELLIA_128_CCM_STAR_NO_TAG
    48 -> MBEDTLS_CIPHER_CAMELLIA_192_CCM_STAR_NO_TAG
    49 -> MBEDTLS_CIPHER_CAMELLIA_256_CCM_STAR_NO_TAG
    50 -> MBEDTLS_CIPHER_ARIA_128_ECB
    51 -> MBEDTLS_CIPHER_ARIA_192_ECB
    52 -> MBEDTLS_CIPHER_ARIA_256_ECB
    53 -> MBEDTLS_CIPHER_ARIA_128_CBC
    54 -> MBEDTLS_CIPHER_ARIA_192_CBC
    55 -> MBEDTLS_CIPHER_ARIA_256_CBC
    56 -> MBEDTLS_CIPHER_ARIA_128_CFB128
    57 -> MBEDTLS_CIPHER_ARIA_192_CFB128
    58 -> MBEDTLS_CIPHER_ARIA_256_CFB128
    59 -> MBEDTLS_CIPHER_ARIA_128_CTR
    60 -> MBEDTLS_CIPHER_ARIA_192_CTR
    61 -> MBEDTLS_CIPHER_ARIA_256_CTR
    62 -> MBEDTLS_CIPHER_ARIA_128_GCM
    63 -> MBEDTLS_CIPHER_ARIA_192_GCM
    64 -> MBEDTLS_CIPHER_ARIA_256_GCM
    65 -> MBEDTLS_CIPHER_ARIA_128_CCM
    66 -> MBEDTLS_CIPHER_ARIA_192_CCM
    67 -> MBEDTLS_CIPHER_ARIA_256_CCM
    68 -> MBEDTLS_CIPHER_ARIA_128_CCM_STAR_NO_TAG
    69 -> MBEDTLS_CIPHER_ARIA_192_CCM_STAR_NO_TAG
    70 -> MBEDTLS_CIPHER_ARIA_256_CCM_STAR_NO_TAG
    71 -> MBEDTLS_CIPHER_AES_128_OFB
    72 -> MBEDTLS_CIPHER_AES_192_OFB
    73 -> MBEDTLS_CIPHER_AES_256_OFB
    74 -> MBEDTLS_CIPHER_AES_128_XTS
    75 -> MBEDTLS_CIPHER_AES_256_XTS
    76 -> MBEDTLS_CIPHER_CHACHA20
    77 -> MBEDTLS_CIPHER_CHACHA20_POLY1305
    78 -> MBEDTLS_CIPHER_AES_128_KW
    79 -> MBEDTLS_CIPHER_AES_192_KW
    80 -> MBEDTLS_CIPHER_AES_256_KW
    81 -> MBEDTLS_CIPHER_AES_128_KWP
    82 -> MBEDTLS_CIPHER_AES_192_KWP
    83 -> MBEDTLS_CIPHER_AES_256_KWP

// Supported cipher modes.
type mbedtls-cipher-mode-t
  // < None.
  MBEDTLS_MODE_NONE
  // < The ECB cipher mode.
  MBEDTLS_MODE_ECB
  // < The CBC cipher mode.
  MBEDTLS_MODE_CBC
  // < The CFB cipher mode.
  MBEDTLS_MODE_CFB
  // < The OFB cipher mode.
  MBEDTLS_MODE_OFB
  // < The CTR cipher mode.
  MBEDTLS_MODE_CTR
  // < The GCM cipher mode.
  MBEDTLS_MODE_GCM
  // < The stream cipher mode.
  MBEDTLS_MODE_STREAM
  // < The CCM cipher mode.
  MBEDTLS_MODE_CCM
  // < The CCM*-no-tag cipher mode.
  MBEDTLS_MODE_CCM_STAR_NO_TAG
  // < The XTS cipher mode.
  MBEDTLS_MODE_XTS
  // < The ChaCha-Poly cipher mode.
  MBEDTLS_MODE_CHACHAPOLY
  // < The SP800-38F KW mode
  MBEDTLS_MODE_KW
  // < The SP800-38F KWP mode
  MBEDTLS_MODE_KWP

pub fun mbedtls-cipher-mode-t/int(i: mbedtls-cipher-mode-t): int32
  match i
    MBEDTLS_MODE_NONE -> 0.int32
    MBEDTLS_MODE_ECB -> 1.int32
    MBEDTLS_MODE_CBC -> 2.int32
    MBEDTLS_MODE_CFB -> 3.int32
    MBEDTLS_MODE_OFB -> 4.int32
    MBEDTLS_MODE_CTR -> 5.int32
    MBEDTLS_MODE_GCM -> 6.int32
    MBEDTLS_MODE_STREAM -> 7.int32
    MBEDTLS_MODE_CCM -> 8.int32
    MBEDTLS_MODE_CCM_STAR_NO_TAG -> 9.int32
    MBEDTLS_MODE_XTS -> 10.int32
    MBEDTLS_MODE_CHACHAPOLY -> 11.int32
    MBEDTLS_MODE_KW -> 12.int32
    MBEDTLS_MODE_KWP -> 13.int32

pub fun int/mbedtls-cipher-mode-t(i: int32): exn mbedtls-cipher-mode-t
  match i.int
    0 -> MBEDTLS_MODE_NONE
    1 -> MBEDTLS_MODE_ECB
    2 -> MBEDTLS_MODE_CBC
    3 -> MBEDTLS_MODE_CFB
    4 -> MBEDTLS_MODE_OFB
    5 -> MBEDTLS_MODE_CTR
    6 -> MBEDTLS_MODE_GCM
    7 -> MBEDTLS_MODE_STREAM
    8 -> MBEDTLS_MODE_CCM
    9 -> MBEDTLS_MODE_CCM_STAR_NO_TAG
    10 -> MBEDTLS_MODE_XTS
    11 -> MBEDTLS_MODE_CHACHAPOLY
    12 -> MBEDTLS_MODE_KW
    13 -> MBEDTLS_MODE_KWP

// Supported cipher padding types.
type mbedtls-cipher-padding-t
  // < PKCS7 padding (default).
  MBEDTLS_PADDING_PKCS7
  // < ISO/IEC 7816-4 padding.
  MBEDTLS_PADDING_ONE_AND_ZEROS
  // < ANSI X.923 padding.
  MBEDTLS_PADDING_ZEROS_AND_LEN
  // < Zero padding (not reversible).
  MBEDTLS_PADDING_ZEROS
  // < Never pad (full blocks only).
  MBEDTLS_PADDING_NONE

pub fun mbedtls-cipher-padding-t/int(i: mbedtls-cipher-padding-t): int32
  match i
    MBEDTLS_PADDING_PKCS7 -> 0.int32
    MBEDTLS_PADDING_ONE_AND_ZEROS -> 1.int32
    MBEDTLS_PADDING_ZEROS_AND_LEN -> 2.int32
    MBEDTLS_PADDING_ZEROS -> 3.int32
    MBEDTLS_PADDING_NONE -> 4.int32

pub fun int/mbedtls-cipher-padding-t(i: int32): exn mbedtls-cipher-padding-t
  match i.int
    0 -> MBEDTLS_PADDING_PKCS7
    1 -> MBEDTLS_PADDING_ONE_AND_ZEROS
    2 -> MBEDTLS_PADDING_ZEROS_AND_LEN
    3 -> MBEDTLS_PADDING_ZEROS
    4 -> MBEDTLS_PADDING_NONE

// Type of operation.
type mbedtls-operation-t
  MBEDTLS_OPERATION_NONE
  MBEDTLS_DECRYPT
  MBEDTLS_ENCRYPT

pub fun mbedtls-operation-t/int(i: mbedtls-operation-t): int32
  match i
    MBEDTLS_OPERATION_NONE -> -1.int32
    MBEDTLS_DECRYPT -> 0.int32
    MBEDTLS_ENCRYPT -> 1.int32

pub fun int/mbedtls-operation-t(i: int32): exn mbedtls-operation-t
  match i.int
    -1 -> MBEDTLS_OPERATION_NONE
    0 -> MBEDTLS_DECRYPT
    1 -> MBEDTLS_ENCRYPT

pub struct psa-driver-hash-context-t
pub type psa-driver-hash-context-t-c
pub alias psa-driver-hash-context-tp = c-pointer<psa-driver-hash-context-t-c>
pub alias psa-driver-hash-context-tc = owned-c<psa-driver-hash-context-t-c>
pub alias psa-driver-hash-context-tcb<s::S> = borrowed-c<s,psa-driver-hash-context-t-c>
pub alias psa-driver-hash-context-tca = owned-c<c-array<psa-driver-hash-context-t-c>>

pub value struct mbedtls-psa-hash-operation-t
  private-alg: int
  private-ctx: unnamed-union1-c

pub type mbedtls-psa-hash-operation-t-c
pub alias mbedtls-psa-hash-operation-tp = c-pointer<mbedtls-psa-hash-operation-t-c>
pub alias mbedtls-psa-hash-operation-tc = owned-c<mbedtls-psa-hash-operation-t-c>
pub alias mbedtls-psa-hash-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-hash-operation-t-c>
pub alias mbedtls-psa-hash-operation-tca = owned-c<c-array<mbedtls-psa-hash-operation-t-c>>

pub extern mbedtls-psa-hash-operation-t/size-of(c: c-null<mbedtls-psa-hash-operation-t-c>): int32
  c inline "sizeof(mbedtls_psa_hash_operation_t)"

pub fun mbedtls-psa-hash-operation-tc(): mbedtls-psa-hash-operation-tc
  malloc(?size-of=mbedtls-psa-hash-operation-t/size-of)

pub fun mbedtls-psa-hash-operation-tc-calloc(): mbedtls-psa-hash-operation-tc
  malloc-c(?size-of=mbedtls-psa-hash-operation-t/size-of)

pub fun mbedtls-psa-hash-operation-tc-array(n: int): mbedtls-psa-hash-operation-tca
  malloc(n.int32, ?size-of=mbedtls-psa-hash-operation-t/size-of)

pub fun mbedtls-psa-hash-operation-tc-array-calloc(n: int): mbedtls-psa-hash-operation-tca
  malloc-c(n.int32, ?size-of=mbedtls-psa-hash-operation-t/size-of)

pub inline extern mbedtls-psa-hash-operation-t-ptrraw/private-alg(s: intptr_t): int32
  c inline "(psa_algorithm_t)(((mbedtls_psa_hash_operation_t*)#1)->private_alg)"

pub inline fun mbedtls-psa-hash-operation-tp/private-alg(s: mbedtls-psa-hash-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-hash-operation-t-ptrraw/private-alg.int

pub inline fun mbedtls-psa-hash-operation-tc/private-alg(^s: mbedtls-psa-hash-operation-tc): <> int
  s.with-ptr(mbedtls-psa-hash-operation-tp/private-alg)

pub inline fun mbedtls-psa-hash-operation-tcb/private-alg(^s: mbedtls-psa-hash-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-hash-operation-tp/private-alg)

pub inline extern mbedtls-psa-hash-operation-t-ptrraw/set-private-alg(s: intptr_t, private-alg: int32): ()
  c inline "((mbedtls_psa_hash_operation_t*)#1)->private_alg = (psa_algorithm_t)#2"

pub inline fun mbedtls-psa-hash-operation-tp/set-private-alg(s: mbedtls-psa-hash-operation-tp, private-alg: int): ()
  s.mbedtls-psa-hash-operation-t-ptrraw/set-private-alg(private-alg.int32)

pub inline fun mbedtls-psa-hash-operation-tc/set-private-alg(^s: mbedtls-psa-hash-operation-tc, private-alg: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hash-operation-tp/set-private-alg(private-alg))

pub inline fun mbedtls-psa-hash-operation-tcb/set-private-alg(^s: mbedtls-psa-hash-operation-tcb<s::S>, private-alg: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hash-operation-tp/set-private-alg(private-alg))

// \brief Encoding of a cryptographic algorithm.
// 
// Values of this type are generally constructed by macros called
// `PSA_ALG_xxx`.
// 
// For algorithms that can be applied to multiple key types, this type
// does not encode the key type. For example, for symmetric ciphers
// based on a block cipher, #psa_algorithm_t encodes the block cipher
// mode and the padding mode while the block cipher itself is encoded
// via #psa_key_type_t.
// 
// \note Values of this type are encoded in the persistent key store.
// Any changes to existing values will require bumping the storage
// format version and providing a translation when reading the old
// format.
alias psa-algorithm-t = int
pub struct unnamed-union1
pub type unnamed-union1-c
pub alias unnamed-union1p = c-pointer<unnamed-union1-c>
pub alias unnamed-union1c = owned-c<unnamed-union1-c>
pub alias unnamed-union1cb<s::S> = borrowed-c<s,unnamed-union1-c>
pub alias unnamed-union1ca = owned-c<c-array<unnamed-union1-c>>

// \brief          MD5 context structure
// 
// \warning        MD5 is considered a weak message digest and its use
// constitutes a security risk. We recommend considering
// stronger message digests instead.
pub struct mbedtls-md5-context
pub type mbedtls-md5-context-c
pub alias mbedtls-md5-contextp = c-pointer<mbedtls-md5-context-c>
pub alias mbedtls-md5-contextc<s::S> = owned-c<mbedtls-md5-context-c>
pub alias mbedtls-md5-contextcb<s::S> = borrowed-c<s,mbedtls-md5-context-c>
pub alias mbedtls-md5-contextca<s::S> = owned-c<c-array<mbedtls-md5-context-c>>

pub extern mbedtls-md5-context/size-of(c: c-null<mbedtls-md5-context-c>): int32
  c inline "sizeof(struct mbedtls_md5_context)"

pub fun mbedtls-md5-contextc(): mbedtls-md5-contextc<s::S>
  malloc(?size-of=mbedtls-md5-context/size-of)

pub fun mbedtls-md5-contextc-calloc(): mbedtls-md5-contextc<s::S>
  malloc-c(?size-of=mbedtls-md5-context/size-of)

pub fun mbedtls-md5-contextc-array(n: int): mbedtls-md5-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-md5-context/size-of)

pub fun mbedtls-md5-contextc-array-calloc(n: int): mbedtls-md5-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-md5-context/size-of)

pub inline extern mbedtls-md5-context-ptrraw/private-total(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_md5_context*)#1)->private_total)"

pub inline fun mbedtls-md5-contextp/private-total(s: mbedtls-md5-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-md5-context-ptrraw/private-total.cextern/ptr/carray

pub inline fun mbedtls-md5-contextc/private-total(^s: mbedtls-md5-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-md5-contextp/private-total)

pub inline fun mbedtls-md5-contextcb/private-total(^s: mbedtls-md5-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-md5-contextp/private-total)

pub inline extern mbedtls-md5-context-ptrraw/set-private-total(s: intptr_t, private-total: c-pointer<int>): ()
  c inline "((struct mbedtls_md5_context*)#1)->private_total = (int32_t*)#2"

pub inline fun mbedtls-md5-contextp/set-private-total(s: mbedtls-md5-contextp, private-total: c-array<int>): ()
  s.mbedtls-md5-context-ptrraw/set-private-total(private-total.cextern/carray/ptr)

pub inline fun mbedtls-md5-contextc/set-private-total(^s: mbedtls-md5-contextc<s::S>, private-total: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-md5-contextp/set-private-total(private-total))

pub inline fun mbedtls-md5-contextcb/set-private-total(^s: mbedtls-md5-contextcb<s::S>, private-total: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-md5-contextp/set-private-total(private-total))

pub inline extern mbedtls-md5-context-ptrraw/private-state(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_md5_context*)#1)->private_state)"

pub inline fun mbedtls-md5-contextp/private-state(s: mbedtls-md5-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-md5-context-ptrraw/private-state.cextern/ptr/carray

pub inline fun mbedtls-md5-contextc/private-state(^s: mbedtls-md5-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-md5-contextp/private-state)

pub inline fun mbedtls-md5-contextcb/private-state(^s: mbedtls-md5-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-md5-contextp/private-state)

pub inline extern mbedtls-md5-context-ptrraw/set-private-state(s: intptr_t, private-state: c-pointer<int>): ()
  c inline "((struct mbedtls_md5_context*)#1)->private_state = (int32_t*)#2"

pub inline fun mbedtls-md5-contextp/set-private-state(s: mbedtls-md5-contextp, private-state: c-array<int>): ()
  s.mbedtls-md5-context-ptrraw/set-private-state(private-state.cextern/carray/ptr)

pub inline fun mbedtls-md5-contextc/set-private-state(^s: mbedtls-md5-contextc<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-md5-contextp/set-private-state(private-state))

pub inline fun mbedtls-md5-contextcb/set-private-state(^s: mbedtls-md5-contextcb<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-md5-contextp/set-private-state(private-state))

pub inline extern mbedtls-md5-context-ptrraw/private-buffer(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_md5_context*)#1)->private_buffer)"

pub inline fun mbedtls-md5-contextp/private-buffer(s: mbedtls-md5-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-md5-context-ptrraw/private-buffer.cextern/ptr/carray

pub inline fun mbedtls-md5-contextc/private-buffer(^s: mbedtls-md5-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-md5-contextp/private-buffer)

pub inline fun mbedtls-md5-contextcb/private-buffer(^s: mbedtls-md5-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-md5-contextp/private-buffer)

pub inline extern mbedtls-md5-context-ptrraw/set-private-buffer(s: intptr_t, private-buffer: c-pointer<int>): ()
  c inline "((struct mbedtls_md5_context*)#1)->private_buffer = (unsigned char*)#2"

pub inline fun mbedtls-md5-contextp/set-private-buffer(s: mbedtls-md5-contextp, private-buffer: c-array<int>): ()
  s.mbedtls-md5-context-ptrraw/set-private-buffer(private-buffer.cextern/carray/ptr)

pub inline fun mbedtls-md5-contextc/set-private-buffer(^s: mbedtls-md5-contextc<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-md5-contextp/set-private-buffer(private-buffer))

pub inline fun mbedtls-md5-contextcb/set-private-buffer(^s: mbedtls-md5-contextcb<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-md5-contextp/set-private-buffer(private-buffer))

// \brief          RIPEMD-160 context structure
pub struct mbedtls-ripemd160-context
pub type mbedtls-ripemd160-context-c
pub alias mbedtls-ripemd160-contextp = c-pointer<mbedtls-ripemd160-context-c>
pub alias mbedtls-ripemd160-contextc<s::S> = owned-c<mbedtls-ripemd160-context-c>
pub alias mbedtls-ripemd160-contextcb<s::S> = borrowed-c<s,mbedtls-ripemd160-context-c>
pub alias mbedtls-ripemd160-contextca<s::S> = owned-c<c-array<mbedtls-ripemd160-context-c>>

pub extern mbedtls-ripemd160-context/size-of(c: c-null<mbedtls-ripemd160-context-c>): int32
  c inline "sizeof(struct mbedtls_ripemd160_context)"

pub fun mbedtls-ripemd160-contextc(): mbedtls-ripemd160-contextc<s::S>
  malloc(?size-of=mbedtls-ripemd160-context/size-of)

pub fun mbedtls-ripemd160-contextc-calloc(): mbedtls-ripemd160-contextc<s::S>
  malloc-c(?size-of=mbedtls-ripemd160-context/size-of)

pub fun mbedtls-ripemd160-contextc-array(n: int): mbedtls-ripemd160-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-ripemd160-context/size-of)

pub fun mbedtls-ripemd160-contextc-array-calloc(n: int): mbedtls-ripemd160-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-ripemd160-context/size-of)

pub inline extern mbedtls-ripemd160-context-ptrraw/private-total(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_ripemd160_context*)#1)->private_total)"

pub inline fun mbedtls-ripemd160-contextp/private-total(s: mbedtls-ripemd160-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-ripemd160-context-ptrraw/private-total.cextern/ptr/carray

pub inline fun mbedtls-ripemd160-contextc/private-total(^s: mbedtls-ripemd160-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-ripemd160-contextp/private-total)

pub inline fun mbedtls-ripemd160-contextcb/private-total(^s: mbedtls-ripemd160-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-ripemd160-contextp/private-total)

pub inline extern mbedtls-ripemd160-context-ptrraw/set-private-total(s: intptr_t, private-total: c-pointer<int>): ()
  c inline "((struct mbedtls_ripemd160_context*)#1)->private_total = (int32_t*)#2"

pub inline fun mbedtls-ripemd160-contextp/set-private-total(s: mbedtls-ripemd160-contextp, private-total: c-array<int>): ()
  s.mbedtls-ripemd160-context-ptrraw/set-private-total(private-total.cextern/carray/ptr)

pub inline fun mbedtls-ripemd160-contextc/set-private-total(^s: mbedtls-ripemd160-contextc<s::S>, private-total: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ripemd160-contextp/set-private-total(private-total))

pub inline fun mbedtls-ripemd160-contextcb/set-private-total(^s: mbedtls-ripemd160-contextcb<s::S>, private-total: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ripemd160-contextp/set-private-total(private-total))

pub inline extern mbedtls-ripemd160-context-ptrraw/private-state(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_ripemd160_context*)#1)->private_state)"

pub inline fun mbedtls-ripemd160-contextp/private-state(s: mbedtls-ripemd160-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-ripemd160-context-ptrraw/private-state.cextern/ptr/carray

pub inline fun mbedtls-ripemd160-contextc/private-state(^s: mbedtls-ripemd160-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-ripemd160-contextp/private-state)

pub inline fun mbedtls-ripemd160-contextcb/private-state(^s: mbedtls-ripemd160-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-ripemd160-contextp/private-state)

pub inline extern mbedtls-ripemd160-context-ptrraw/set-private-state(s: intptr_t, private-state: c-pointer<int>): ()
  c inline "((struct mbedtls_ripemd160_context*)#1)->private_state = (int32_t*)#2"

pub inline fun mbedtls-ripemd160-contextp/set-private-state(s: mbedtls-ripemd160-contextp, private-state: c-array<int>): ()
  s.mbedtls-ripemd160-context-ptrraw/set-private-state(private-state.cextern/carray/ptr)

pub inline fun mbedtls-ripemd160-contextc/set-private-state(^s: mbedtls-ripemd160-contextc<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ripemd160-contextp/set-private-state(private-state))

pub inline fun mbedtls-ripemd160-contextcb/set-private-state(^s: mbedtls-ripemd160-contextcb<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ripemd160-contextp/set-private-state(private-state))

pub inline extern mbedtls-ripemd160-context-ptrraw/private-buffer(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_ripemd160_context*)#1)->private_buffer)"

pub inline fun mbedtls-ripemd160-contextp/private-buffer(s: mbedtls-ripemd160-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-ripemd160-context-ptrraw/private-buffer.cextern/ptr/carray

pub inline fun mbedtls-ripemd160-contextc/private-buffer(^s: mbedtls-ripemd160-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-ripemd160-contextp/private-buffer)

pub inline fun mbedtls-ripemd160-contextcb/private-buffer(^s: mbedtls-ripemd160-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-ripemd160-contextp/private-buffer)

pub inline extern mbedtls-ripemd160-context-ptrraw/set-private-buffer(s: intptr_t, private-buffer: c-pointer<int>): ()
  c inline "((struct mbedtls_ripemd160_context*)#1)->private_buffer = (unsigned char*)#2"

pub inline fun mbedtls-ripemd160-contextp/set-private-buffer(s: mbedtls-ripemd160-contextp, private-buffer: c-array<int>): ()
  s.mbedtls-ripemd160-context-ptrraw/set-private-buffer(private-buffer.cextern/carray/ptr)

pub inline fun mbedtls-ripemd160-contextc/set-private-buffer(^s: mbedtls-ripemd160-contextc<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ripemd160-contextp/set-private-buffer(private-buffer))

pub inline fun mbedtls-ripemd160-contextcb/set-private-buffer(^s: mbedtls-ripemd160-contextcb<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ripemd160-contextp/set-private-buffer(private-buffer))

// \brief          The SHA-1 context structure.
// 
// \warning        SHA-1 is considered a weak message digest and its use
// constitutes a security risk. We recommend considering
// stronger message digests instead.
pub struct mbedtls-sha1-context
pub type mbedtls-sha1-context-c
pub alias mbedtls-sha1-contextp = c-pointer<mbedtls-sha1-context-c>
pub alias mbedtls-sha1-contextc<s::S> = owned-c<mbedtls-sha1-context-c>
pub alias mbedtls-sha1-contextcb<s::S> = borrowed-c<s,mbedtls-sha1-context-c>
pub alias mbedtls-sha1-contextca<s::S> = owned-c<c-array<mbedtls-sha1-context-c>>

pub extern mbedtls-sha1-context/size-of(c: c-null<mbedtls-sha1-context-c>): int32
  c inline "sizeof(struct mbedtls_sha1_context)"

pub fun mbedtls-sha1-contextc(): mbedtls-sha1-contextc<s::S>
  malloc(?size-of=mbedtls-sha1-context/size-of)

pub fun mbedtls-sha1-contextc-calloc(): mbedtls-sha1-contextc<s::S>
  malloc-c(?size-of=mbedtls-sha1-context/size-of)

pub fun mbedtls-sha1-contextc-array(n: int): mbedtls-sha1-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-sha1-context/size-of)

pub fun mbedtls-sha1-contextc-array-calloc(n: int): mbedtls-sha1-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-sha1-context/size-of)

pub inline extern mbedtls-sha1-context-ptrraw/private-total(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_sha1_context*)#1)->private_total)"

pub inline fun mbedtls-sha1-contextp/private-total(s: mbedtls-sha1-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-sha1-context-ptrraw/private-total.cextern/ptr/carray

pub inline fun mbedtls-sha1-contextc/private-total(^s: mbedtls-sha1-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha1-contextp/private-total)

pub inline fun mbedtls-sha1-contextcb/private-total(^s: mbedtls-sha1-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha1-contextp/private-total)

pub inline extern mbedtls-sha1-context-ptrraw/set-private-total(s: intptr_t, private-total: c-pointer<int>): ()
  c inline "((struct mbedtls_sha1_context*)#1)->private_total = (int32_t*)#2"

pub inline fun mbedtls-sha1-contextp/set-private-total(s: mbedtls-sha1-contextp, private-total: c-array<int>): ()
  s.mbedtls-sha1-context-ptrraw/set-private-total(private-total.cextern/carray/ptr)

pub inline fun mbedtls-sha1-contextc/set-private-total(^s: mbedtls-sha1-contextc<s::S>, private-total: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha1-contextp/set-private-total(private-total))

pub inline fun mbedtls-sha1-contextcb/set-private-total(^s: mbedtls-sha1-contextcb<s::S>, private-total: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha1-contextp/set-private-total(private-total))

pub inline extern mbedtls-sha1-context-ptrraw/private-state(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_sha1_context*)#1)->private_state)"

pub inline fun mbedtls-sha1-contextp/private-state(s: mbedtls-sha1-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-sha1-context-ptrraw/private-state.cextern/ptr/carray

pub inline fun mbedtls-sha1-contextc/private-state(^s: mbedtls-sha1-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha1-contextp/private-state)

pub inline fun mbedtls-sha1-contextcb/private-state(^s: mbedtls-sha1-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha1-contextp/private-state)

pub inline extern mbedtls-sha1-context-ptrraw/set-private-state(s: intptr_t, private-state: c-pointer<int>): ()
  c inline "((struct mbedtls_sha1_context*)#1)->private_state = (int32_t*)#2"

pub inline fun mbedtls-sha1-contextp/set-private-state(s: mbedtls-sha1-contextp, private-state: c-array<int>): ()
  s.mbedtls-sha1-context-ptrraw/set-private-state(private-state.cextern/carray/ptr)

pub inline fun mbedtls-sha1-contextc/set-private-state(^s: mbedtls-sha1-contextc<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha1-contextp/set-private-state(private-state))

pub inline fun mbedtls-sha1-contextcb/set-private-state(^s: mbedtls-sha1-contextcb<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha1-contextp/set-private-state(private-state))

pub inline extern mbedtls-sha1-context-ptrraw/private-buffer(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_sha1_context*)#1)->private_buffer)"

pub inline fun mbedtls-sha1-contextp/private-buffer(s: mbedtls-sha1-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-sha1-context-ptrraw/private-buffer.cextern/ptr/carray

pub inline fun mbedtls-sha1-contextc/private-buffer(^s: mbedtls-sha1-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha1-contextp/private-buffer)

pub inline fun mbedtls-sha1-contextcb/private-buffer(^s: mbedtls-sha1-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha1-contextp/private-buffer)

pub inline extern mbedtls-sha1-context-ptrraw/set-private-buffer(s: intptr_t, private-buffer: c-pointer<int>): ()
  c inline "((struct mbedtls_sha1_context*)#1)->private_buffer = (unsigned char*)#2"

pub inline fun mbedtls-sha1-contextp/set-private-buffer(s: mbedtls-sha1-contextp, private-buffer: c-array<int>): ()
  s.mbedtls-sha1-context-ptrraw/set-private-buffer(private-buffer.cextern/carray/ptr)

pub inline fun mbedtls-sha1-contextc/set-private-buffer(^s: mbedtls-sha1-contextc<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha1-contextp/set-private-buffer(private-buffer))

pub inline fun mbedtls-sha1-contextcb/set-private-buffer(^s: mbedtls-sha1-contextcb<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha1-contextp/set-private-buffer(private-buffer))

// \brief          The SHA-256 context structure.
// 
// The structure is used both for SHA-256 and for SHA-224
// checksum calculations. The choice between these two is
// made in the call to mbedtls_sha256_starts().
pub struct mbedtls-sha256-context
pub type mbedtls-sha256-context-c
pub alias mbedtls-sha256-contextp = c-pointer<mbedtls-sha256-context-c>
pub alias mbedtls-sha256-contextc<s::S> = owned-c<mbedtls-sha256-context-c>
pub alias mbedtls-sha256-contextcb<s::S> = borrowed-c<s,mbedtls-sha256-context-c>
pub alias mbedtls-sha256-contextca<s::S> = owned-c<c-array<mbedtls-sha256-context-c>>

pub extern mbedtls-sha256-context/size-of(c: c-null<mbedtls-sha256-context-c>): int32
  c inline "sizeof(struct mbedtls_sha256_context)"

pub fun mbedtls-sha256-contextc(): mbedtls-sha256-contextc<s::S>
  malloc(?size-of=mbedtls-sha256-context/size-of)

pub fun mbedtls-sha256-contextc-calloc(): mbedtls-sha256-contextc<s::S>
  malloc-c(?size-of=mbedtls-sha256-context/size-of)

pub fun mbedtls-sha256-contextc-array(n: int): mbedtls-sha256-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-sha256-context/size-of)

pub fun mbedtls-sha256-contextc-array-calloc(n: int): mbedtls-sha256-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-sha256-context/size-of)

pub inline extern mbedtls-sha256-context-ptrraw/private-buffer(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_sha256_context*)#1)->private_buffer)"

pub inline fun mbedtls-sha256-contextp/private-buffer(s: mbedtls-sha256-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-sha256-context-ptrraw/private-buffer.cextern/ptr/carray

pub inline fun mbedtls-sha256-contextc/private-buffer(^s: mbedtls-sha256-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha256-contextp/private-buffer)

pub inline fun mbedtls-sha256-contextcb/private-buffer(^s: mbedtls-sha256-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha256-contextp/private-buffer)

pub inline extern mbedtls-sha256-context-ptrraw/set-private-buffer(s: intptr_t, private-buffer: c-pointer<int>): ()
  c inline "((struct mbedtls_sha256_context*)#1)->private_buffer = (unsigned char*)#2"

pub inline fun mbedtls-sha256-contextp/set-private-buffer(s: mbedtls-sha256-contextp, private-buffer: c-array<int>): ()
  s.mbedtls-sha256-context-ptrraw/set-private-buffer(private-buffer.cextern/carray/ptr)

pub inline fun mbedtls-sha256-contextc/set-private-buffer(^s: mbedtls-sha256-contextc<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-contextp/set-private-buffer(private-buffer))

pub inline fun mbedtls-sha256-contextcb/set-private-buffer(^s: mbedtls-sha256-contextcb<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-contextp/set-private-buffer(private-buffer))

pub inline extern mbedtls-sha256-context-ptrraw/private-total(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_sha256_context*)#1)->private_total)"

pub inline fun mbedtls-sha256-contextp/private-total(s: mbedtls-sha256-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-sha256-context-ptrraw/private-total.cextern/ptr/carray

pub inline fun mbedtls-sha256-contextc/private-total(^s: mbedtls-sha256-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha256-contextp/private-total)

pub inline fun mbedtls-sha256-contextcb/private-total(^s: mbedtls-sha256-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha256-contextp/private-total)

pub inline extern mbedtls-sha256-context-ptrraw/set-private-total(s: intptr_t, private-total: c-pointer<int>): ()
  c inline "((struct mbedtls_sha256_context*)#1)->private_total = (int32_t*)#2"

pub inline fun mbedtls-sha256-contextp/set-private-total(s: mbedtls-sha256-contextp, private-total: c-array<int>): ()
  s.mbedtls-sha256-context-ptrraw/set-private-total(private-total.cextern/carray/ptr)

pub inline fun mbedtls-sha256-contextc/set-private-total(^s: mbedtls-sha256-contextc<s::S>, private-total: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-contextp/set-private-total(private-total))

pub inline fun mbedtls-sha256-contextcb/set-private-total(^s: mbedtls-sha256-contextcb<s::S>, private-total: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-contextp/set-private-total(private-total))

pub inline extern mbedtls-sha256-context-ptrraw/private-state(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_sha256_context*)#1)->private_state)"

pub inline fun mbedtls-sha256-contextp/private-state(s: mbedtls-sha256-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-sha256-context-ptrraw/private-state.cextern/ptr/carray

pub inline fun mbedtls-sha256-contextc/private-state(^s: mbedtls-sha256-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha256-contextp/private-state)

pub inline fun mbedtls-sha256-contextcb/private-state(^s: mbedtls-sha256-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha256-contextp/private-state)

pub inline extern mbedtls-sha256-context-ptrraw/set-private-state(s: intptr_t, private-state: c-pointer<int>): ()
  c inline "((struct mbedtls_sha256_context*)#1)->private_state = (int32_t*)#2"

pub inline fun mbedtls-sha256-contextp/set-private-state(s: mbedtls-sha256-contextp, private-state: c-array<int>): ()
  s.mbedtls-sha256-context-ptrraw/set-private-state(private-state.cextern/carray/ptr)

pub inline fun mbedtls-sha256-contextc/set-private-state(^s: mbedtls-sha256-contextc<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-contextp/set-private-state(private-state))

pub inline fun mbedtls-sha256-contextcb/set-private-state(^s: mbedtls-sha256-contextcb<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-contextp/set-private-state(private-state))

pub inline extern mbedtls-sha256-context-ptrraw/private-is224(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_sha256_context*)#1)->private_is224)"

pub inline fun mbedtls-sha256-contextp/private-is224(s: mbedtls-sha256-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-sha256-context-ptrraw/private-is224.int

pub inline fun mbedtls-sha256-contextc/private-is224(^s: mbedtls-sha256-contextc<s::S>): <> int
  s.with-ptr(mbedtls-sha256-contextp/private-is224)

pub inline fun mbedtls-sha256-contextcb/private-is224(^s: mbedtls-sha256-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-sha256-contextp/private-is224)

pub inline extern mbedtls-sha256-context-ptrraw/set-private-is224(s: intptr_t, private-is224: int32): ()
  c inline "((struct mbedtls_sha256_context*)#1)->private_is224 = (int)#2"

pub inline fun mbedtls-sha256-contextp/set-private-is224(s: mbedtls-sha256-contextp, private-is224: int): ()
  s.mbedtls-sha256-context-ptrraw/set-private-is224(private-is224.int32)

pub inline fun mbedtls-sha256-contextc/set-private-is224(^s: mbedtls-sha256-contextc<s::S>, private-is224: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-contextp/set-private-is224(private-is224))

pub inline fun mbedtls-sha256-contextcb/set-private-is224(^s: mbedtls-sha256-contextcb<s::S>, private-is224: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha256-contextp/set-private-is224(private-is224))

// \brief          The SHA-512 context structure.
// 
// The structure is used both for SHA-384 and for SHA-512
// checksum calculations. The choice between these two is
// made in the call to mbedtls_sha512_starts().
pub struct mbedtls-sha512-context
pub type mbedtls-sha512-context-c
pub alias mbedtls-sha512-contextp = c-pointer<mbedtls-sha512-context-c>
pub alias mbedtls-sha512-contextc<s::S> = owned-c<mbedtls-sha512-context-c>
pub alias mbedtls-sha512-contextcb<s::S> = borrowed-c<s,mbedtls-sha512-context-c>
pub alias mbedtls-sha512-contextca<s::S> = owned-c<c-array<mbedtls-sha512-context-c>>

pub extern mbedtls-sha512-context/size-of(c: c-null<mbedtls-sha512-context-c>): int32
  c inline "sizeof(struct mbedtls_sha512_context)"

pub fun mbedtls-sha512-contextc(): mbedtls-sha512-contextc<s::S>
  malloc(?size-of=mbedtls-sha512-context/size-of)

pub fun mbedtls-sha512-contextc-calloc(): mbedtls-sha512-contextc<s::S>
  malloc-c(?size-of=mbedtls-sha512-context/size-of)

pub fun mbedtls-sha512-contextc-array(n: int): mbedtls-sha512-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-sha512-context/size-of)

pub fun mbedtls-sha512-contextc-array-calloc(n: int): mbedtls-sha512-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-sha512-context/size-of)

pub inline extern mbedtls-sha512-context-ptrraw/private-total(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_sha512_context*)#1)->private_total)"

pub inline fun mbedtls-sha512-contextp/private-total(s: mbedtls-sha512-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-sha512-context-ptrraw/private-total.cextern/ptr/carray

pub inline fun mbedtls-sha512-contextc/private-total(^s: mbedtls-sha512-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha512-contextp/private-total)

pub inline fun mbedtls-sha512-contextcb/private-total(^s: mbedtls-sha512-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha512-contextp/private-total)

pub inline extern mbedtls-sha512-context-ptrraw/set-private-total(s: intptr_t, private-total: c-pointer<int>): ()
  c inline "((struct mbedtls_sha512_context*)#1)->private_total = (int64_t*)#2"

pub inline fun mbedtls-sha512-contextp/set-private-total(s: mbedtls-sha512-contextp, private-total: c-array<int>): ()
  s.mbedtls-sha512-context-ptrraw/set-private-total(private-total.cextern/carray/ptr)

pub inline fun mbedtls-sha512-contextc/set-private-total(^s: mbedtls-sha512-contextc<s::S>, private-total: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-contextp/set-private-total(private-total))

pub inline fun mbedtls-sha512-contextcb/set-private-total(^s: mbedtls-sha512-contextcb<s::S>, private-total: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-contextp/set-private-total(private-total))

pub inline extern mbedtls-sha512-context-ptrraw/private-state(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_sha512_context*)#1)->private_state)"

pub inline fun mbedtls-sha512-contextp/private-state(s: mbedtls-sha512-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-sha512-context-ptrraw/private-state.cextern/ptr/carray

pub inline fun mbedtls-sha512-contextc/private-state(^s: mbedtls-sha512-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha512-contextp/private-state)

pub inline fun mbedtls-sha512-contextcb/private-state(^s: mbedtls-sha512-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha512-contextp/private-state)

pub inline extern mbedtls-sha512-context-ptrraw/set-private-state(s: intptr_t, private-state: c-pointer<int>): ()
  c inline "((struct mbedtls_sha512_context*)#1)->private_state = (int64_t*)#2"

pub inline fun mbedtls-sha512-contextp/set-private-state(s: mbedtls-sha512-contextp, private-state: c-array<int>): ()
  s.mbedtls-sha512-context-ptrraw/set-private-state(private-state.cextern/carray/ptr)

pub inline fun mbedtls-sha512-contextc/set-private-state(^s: mbedtls-sha512-contextc<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-contextp/set-private-state(private-state))

pub inline fun mbedtls-sha512-contextcb/set-private-state(^s: mbedtls-sha512-contextcb<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-contextp/set-private-state(private-state))

pub inline extern mbedtls-sha512-context-ptrraw/private-buffer(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_sha512_context*)#1)->private_buffer)"

pub inline fun mbedtls-sha512-contextp/private-buffer(s: mbedtls-sha512-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-sha512-context-ptrraw/private-buffer.cextern/ptr/carray

pub inline fun mbedtls-sha512-contextc/private-buffer(^s: mbedtls-sha512-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha512-contextp/private-buffer)

pub inline fun mbedtls-sha512-contextcb/private-buffer(^s: mbedtls-sha512-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha512-contextp/private-buffer)

pub inline extern mbedtls-sha512-context-ptrraw/set-private-buffer(s: intptr_t, private-buffer: c-pointer<int>): ()
  c inline "((struct mbedtls_sha512_context*)#1)->private_buffer = (unsigned char*)#2"

pub inline fun mbedtls-sha512-contextp/set-private-buffer(s: mbedtls-sha512-contextp, private-buffer: c-array<int>): ()
  s.mbedtls-sha512-context-ptrraw/set-private-buffer(private-buffer.cextern/carray/ptr)

pub inline fun mbedtls-sha512-contextc/set-private-buffer(^s: mbedtls-sha512-contextc<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-contextp/set-private-buffer(private-buffer))

pub inline fun mbedtls-sha512-contextcb/set-private-buffer(^s: mbedtls-sha512-contextcb<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-contextp/set-private-buffer(private-buffer))

pub inline extern mbedtls-sha512-context-ptrraw/private-is384(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_sha512_context*)#1)->private_is384)"

pub inline fun mbedtls-sha512-contextp/private-is384(s: mbedtls-sha512-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-sha512-context-ptrraw/private-is384.int

pub inline fun mbedtls-sha512-contextc/private-is384(^s: mbedtls-sha512-contextc<s::S>): <> int
  s.with-ptr(mbedtls-sha512-contextp/private-is384)

pub inline fun mbedtls-sha512-contextcb/private-is384(^s: mbedtls-sha512-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-sha512-contextp/private-is384)

pub inline extern mbedtls-sha512-context-ptrraw/set-private-is384(s: intptr_t, private-is384: int32): ()
  c inline "((struct mbedtls_sha512_context*)#1)->private_is384 = (int)#2"

pub inline fun mbedtls-sha512-contextp/set-private-is384(s: mbedtls-sha512-contextp, private-is384: int): ()
  s.mbedtls-sha512-context-ptrraw/set-private-is384(private-is384.int32)

pub inline fun mbedtls-sha512-contextc/set-private-is384(^s: mbedtls-sha512-contextc<s::S>, private-is384: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-contextp/set-private-is384(private-is384))

pub inline fun mbedtls-sha512-contextcb/set-private-is384(^s: mbedtls-sha512-contextcb<s::S>, private-is384: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha512-contextp/set-private-is384(private-is384))

// \brief          The SHA-3 context structure.
// 
// The structure is used SHA-3 checksum calculations.
pub struct mbedtls-sha3-context
pub type mbedtls-sha3-context-c
pub alias mbedtls-sha3-contextp = c-pointer<mbedtls-sha3-context-c>
pub alias mbedtls-sha3-contextc<s::S> = owned-c<mbedtls-sha3-context-c>
pub alias mbedtls-sha3-contextcb<s::S> = borrowed-c<s,mbedtls-sha3-context-c>
pub alias mbedtls-sha3-contextca<s::S> = owned-c<c-array<mbedtls-sha3-context-c>>

pub extern mbedtls-sha3-context/size-of(c: c-null<mbedtls-sha3-context-c>): int32
  c inline "sizeof(mbedtls_sha3_context)"

pub fun mbedtls-sha3-contextc(): mbedtls-sha3-contextc<s::S>
  malloc(?size-of=mbedtls-sha3-context/size-of)

pub fun mbedtls-sha3-contextc-calloc(): mbedtls-sha3-contextc<s::S>
  malloc-c(?size-of=mbedtls-sha3-context/size-of)

pub fun mbedtls-sha3-contextc-array(n: int): mbedtls-sha3-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-sha3-context/size-of)

pub fun mbedtls-sha3-contextc-array-calloc(n: int): mbedtls-sha3-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-sha3-context/size-of)

pub inline extern mbedtls-sha3-context-ptrraw/private-state(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((mbedtls_sha3_context*)#1)->private_state)"

pub inline fun mbedtls-sha3-contextp/private-state(s: mbedtls-sha3-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-sha3-context-ptrraw/private-state.cextern/ptr/carray

pub inline fun mbedtls-sha3-contextc/private-state(^s: mbedtls-sha3-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha3-contextp/private-state)

pub inline fun mbedtls-sha3-contextcb/private-state(^s: mbedtls-sha3-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-sha3-contextp/private-state)

pub inline extern mbedtls-sha3-context-ptrraw/set-private-state(s: intptr_t, private-state: c-pointer<int>): ()
  c inline "((mbedtls_sha3_context*)#1)->private_state = (int64_t*)#2"

pub inline fun mbedtls-sha3-contextp/set-private-state(s: mbedtls-sha3-contextp, private-state: c-array<int>): ()
  s.mbedtls-sha3-context-ptrraw/set-private-state(private-state.cextern/carray/ptr)

pub inline fun mbedtls-sha3-contextc/set-private-state(^s: mbedtls-sha3-contextc<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-contextp/set-private-state(private-state))

pub inline fun mbedtls-sha3-contextcb/set-private-state(^s: mbedtls-sha3-contextcb<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-contextp/set-private-state(private-state))

pub inline extern mbedtls-sha3-context-ptrraw/private-index(s: intptr_t): int32
  c inline "(int32_t)(((mbedtls_sha3_context*)#1)->private_index)"

pub inline fun mbedtls-sha3-contextp/private-index(s: mbedtls-sha3-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-sha3-context-ptrraw/private-index.int

pub inline fun mbedtls-sha3-contextc/private-index(^s: mbedtls-sha3-contextc<s::S>): <> int
  s.with-ptr(mbedtls-sha3-contextp/private-index)

pub inline fun mbedtls-sha3-contextcb/private-index(^s: mbedtls-sha3-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-sha3-contextp/private-index)

pub inline extern mbedtls-sha3-context-ptrraw/set-private-index(s: intptr_t, private-index: int32): ()
  c inline "((mbedtls_sha3_context*)#1)->private_index = (int32_t)#2"

pub inline fun mbedtls-sha3-contextp/set-private-index(s: mbedtls-sha3-contextp, private-index: int): ()
  s.mbedtls-sha3-context-ptrraw/set-private-index(private-index.int32)

pub inline fun mbedtls-sha3-contextc/set-private-index(^s: mbedtls-sha3-contextc<s::S>, private-index: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-contextp/set-private-index(private-index))

pub inline fun mbedtls-sha3-contextcb/set-private-index(^s: mbedtls-sha3-contextcb<s::S>, private-index: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-contextp/set-private-index(private-index))

pub inline extern mbedtls-sha3-context-ptrraw/private-olen(s: intptr_t): int16
  c inline "(int16_t)(((mbedtls_sha3_context*)#1)->private_olen)"

pub inline fun mbedtls-sha3-contextp/private-olen(s: mbedtls-sha3-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-sha3-context-ptrraw/private-olen.int

pub inline fun mbedtls-sha3-contextc/private-olen(^s: mbedtls-sha3-contextc<s::S>): <> int
  s.with-ptr(mbedtls-sha3-contextp/private-olen)

pub inline fun mbedtls-sha3-contextcb/private-olen(^s: mbedtls-sha3-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-sha3-contextp/private-olen)

pub inline extern mbedtls-sha3-context-ptrraw/set-private-olen(s: intptr_t, private-olen: int16): ()
  c inline "((mbedtls_sha3_context*)#1)->private_olen = (int16_t)#2"

pub inline fun mbedtls-sha3-contextp/set-private-olen(s: mbedtls-sha3-contextp, private-olen: int): ()
  s.mbedtls-sha3-context-ptrraw/set-private-olen(private-olen.int16)

pub inline fun mbedtls-sha3-contextc/set-private-olen(^s: mbedtls-sha3-contextc<s::S>, private-olen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-contextp/set-private-olen(private-olen))

pub inline fun mbedtls-sha3-contextcb/set-private-olen(^s: mbedtls-sha3-contextcb<s::S>, private-olen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-contextp/set-private-olen(private-olen))

pub inline extern mbedtls-sha3-context-ptrraw/private-max-block-size(s: intptr_t): int16
  c inline "(int16_t)(((mbedtls_sha3_context*)#1)->private_max_block_size)"

pub inline fun mbedtls-sha3-contextp/private-max-block-size(s: mbedtls-sha3-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-sha3-context-ptrraw/private-max-block-size.int

pub inline fun mbedtls-sha3-contextc/private-max-block-size(^s: mbedtls-sha3-contextc<s::S>): <> int
  s.with-ptr(mbedtls-sha3-contextp/private-max-block-size)

pub inline fun mbedtls-sha3-contextcb/private-max-block-size(^s: mbedtls-sha3-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-sha3-contextp/private-max-block-size)

pub inline extern mbedtls-sha3-context-ptrraw/set-private-max-block-size(s: intptr_t, private-max-block-size: int16): ()
  c inline "((mbedtls_sha3_context*)#1)->private_max_block_size = (int16_t)#2"

pub inline fun mbedtls-sha3-contextp/set-private-max-block-size(s: mbedtls-sha3-contextp, private-max-block-size: int): ()
  s.mbedtls-sha3-context-ptrraw/set-private-max-block-size(private-max-block-size.int16)

pub inline fun mbedtls-sha3-contextc/set-private-max-block-size(^s: mbedtls-sha3-contextc<s::S>, private-max-block-size: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-contextp/set-private-max-block-size(private-max-block-size))

pub inline fun mbedtls-sha3-contextcb/set-private-max-block-size(^s: mbedtls-sha3-contextcb<s::S>, private-max-block-size: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-sha3-contextp/set-private-max-block-size(private-max-block-size))

pub struct psa-driver-cipher-context-t
pub type psa-driver-cipher-context-t-c
pub alias psa-driver-cipher-context-tp = c-pointer<psa-driver-cipher-context-t-c>
pub alias psa-driver-cipher-context-tc = owned-c<psa-driver-cipher-context-t-c>
pub alias psa-driver-cipher-context-tcb<s::S> = borrowed-c<s,psa-driver-cipher-context-t-c>
pub alias psa-driver-cipher-context-tca = owned-c<c-array<psa-driver-cipher-context-t-c>>

pub struct mbedtls-psa-cipher-operation-t
  private-alg: int
  private-iv-length: int
  private-block-length: int
  private-ctx: unnamed-union2-c

pub type mbedtls-psa-cipher-operation-t-c
pub alias mbedtls-psa-cipher-operation-tp = c-pointer<mbedtls-psa-cipher-operation-t-c>
pub alias mbedtls-psa-cipher-operation-tc = owned-c<mbedtls-psa-cipher-operation-t-c>
pub alias mbedtls-psa-cipher-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-cipher-operation-t-c>
pub alias mbedtls-psa-cipher-operation-tca = owned-c<c-array<mbedtls-psa-cipher-operation-t-c>>

pub extern mbedtls-psa-cipher-operation-t/size-of(c: c-null<mbedtls-psa-cipher-operation-t-c>): int32
  c inline "sizeof(mbedtls_psa_cipher_operation_t)"

pub fun mbedtls-psa-cipher-operation-tc(): mbedtls-psa-cipher-operation-tc
  malloc(?size-of=mbedtls-psa-cipher-operation-t/size-of)

pub fun mbedtls-psa-cipher-operation-tc-calloc(): mbedtls-psa-cipher-operation-tc
  malloc-c(?size-of=mbedtls-psa-cipher-operation-t/size-of)

pub fun mbedtls-psa-cipher-operation-tc-array(n: int): mbedtls-psa-cipher-operation-tca
  malloc(n.int32, ?size-of=mbedtls-psa-cipher-operation-t/size-of)

pub fun mbedtls-psa-cipher-operation-tc-array-calloc(n: int): mbedtls-psa-cipher-operation-tca
  malloc-c(n.int32, ?size-of=mbedtls-psa-cipher-operation-t/size-of)

pub inline extern mbedtls-psa-cipher-operation-t-ptrraw/private-alg(s: intptr_t): int32
  c inline "(psa_algorithm_t)(((mbedtls_psa_cipher_operation_t*)#1)->private_alg)"

pub inline fun mbedtls-psa-cipher-operation-tp/private-alg(s: mbedtls-psa-cipher-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-cipher-operation-t-ptrraw/private-alg.int

pub inline fun mbedtls-psa-cipher-operation-tc/private-alg(^s: mbedtls-psa-cipher-operation-tc): <> int
  s.with-ptr(mbedtls-psa-cipher-operation-tp/private-alg)

pub inline fun mbedtls-psa-cipher-operation-tcb/private-alg(^s: mbedtls-psa-cipher-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-cipher-operation-tp/private-alg)

pub inline extern mbedtls-psa-cipher-operation-t-ptrraw/set-private-alg(s: intptr_t, private-alg: int32): ()
  c inline "((mbedtls_psa_cipher_operation_t*)#1)->private_alg = (psa_algorithm_t)#2"

pub inline fun mbedtls-psa-cipher-operation-tp/set-private-alg(s: mbedtls-psa-cipher-operation-tp, private-alg: int): ()
  s.mbedtls-psa-cipher-operation-t-ptrraw/set-private-alg(private-alg.int32)

pub inline fun mbedtls-psa-cipher-operation-tc/set-private-alg(^s: mbedtls-psa-cipher-operation-tc, private-alg: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-tp/set-private-alg(private-alg))

pub inline fun mbedtls-psa-cipher-operation-tcb/set-private-alg(^s: mbedtls-psa-cipher-operation-tcb<s::S>, private-alg: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-tp/set-private-alg(private-alg))

pub inline extern mbedtls-psa-cipher-operation-t-ptrraw/private-iv-length(s: intptr_t): int8
  c inline "(uint8_t)(((mbedtls_psa_cipher_operation_t*)#1)->private_iv_length)"

pub inline fun mbedtls-psa-cipher-operation-tp/private-iv-length(s: mbedtls-psa-cipher-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-cipher-operation-t-ptrraw/private-iv-length.int

pub inline fun mbedtls-psa-cipher-operation-tc/private-iv-length(^s: mbedtls-psa-cipher-operation-tc): <> int
  s.with-ptr(mbedtls-psa-cipher-operation-tp/private-iv-length)

pub inline fun mbedtls-psa-cipher-operation-tcb/private-iv-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-cipher-operation-tp/private-iv-length)

pub inline extern mbedtls-psa-cipher-operation-t-ptrraw/set-private-iv-length(s: intptr_t, private-iv-length: int8): ()
  c inline "((mbedtls_psa_cipher_operation_t*)#1)->private_iv_length = (uint8_t)#2"

pub inline fun mbedtls-psa-cipher-operation-tp/set-private-iv-length(s: mbedtls-psa-cipher-operation-tp, private-iv-length: int): ()
  s.mbedtls-psa-cipher-operation-t-ptrraw/set-private-iv-length(private-iv-length.int8)

pub inline fun mbedtls-psa-cipher-operation-tc/set-private-iv-length(^s: mbedtls-psa-cipher-operation-tc, private-iv-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-tp/set-private-iv-length(private-iv-length))

pub inline fun mbedtls-psa-cipher-operation-tcb/set-private-iv-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>, private-iv-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-tp/set-private-iv-length(private-iv-length))

pub inline extern mbedtls-psa-cipher-operation-t-ptrraw/private-block-length(s: intptr_t): int8
  c inline "(uint8_t)(((mbedtls_psa_cipher_operation_t*)#1)->private_block_length)"

pub inline fun mbedtls-psa-cipher-operation-tp/private-block-length(s: mbedtls-psa-cipher-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-cipher-operation-t-ptrraw/private-block-length.int

pub inline fun mbedtls-psa-cipher-operation-tc/private-block-length(^s: mbedtls-psa-cipher-operation-tc): <> int
  s.with-ptr(mbedtls-psa-cipher-operation-tp/private-block-length)

pub inline fun mbedtls-psa-cipher-operation-tcb/private-block-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-cipher-operation-tp/private-block-length)

pub inline extern mbedtls-psa-cipher-operation-t-ptrraw/set-private-block-length(s: intptr_t, private-block-length: int8): ()
  c inline "((mbedtls_psa_cipher_operation_t*)#1)->private_block_length = (uint8_t)#2"

pub inline fun mbedtls-psa-cipher-operation-tp/set-private-block-length(s: mbedtls-psa-cipher-operation-tp, private-block-length: int): ()
  s.mbedtls-psa-cipher-operation-t-ptrraw/set-private-block-length(private-block-length.int8)

pub inline fun mbedtls-psa-cipher-operation-tc/set-private-block-length(^s: mbedtls-psa-cipher-operation-tc, private-block-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-tp/set-private-block-length(private-block-length))

pub inline fun mbedtls-psa-cipher-operation-tcb/set-private-block-length(^s: mbedtls-psa-cipher-operation-tcb<s::S>, private-block-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-cipher-operation-tp/set-private-block-length(private-block-length))

pub struct unnamed-union2
pub type unnamed-union2-c
pub alias unnamed-union2p = c-pointer<unnamed-union2-c>
pub alias unnamed-union2c = owned-c<unnamed-union2-c>
pub alias unnamed-union2cb<s::S> = borrowed-c<s,unnamed-union2-c>
pub alias unnamed-union2ca = owned-c<c-array<unnamed-union2-c>>

// Generic cipher context.
pub struct mbedtls-cipher-context-t
pub type mbedtls-cipher-context-t-c
pub alias mbedtls-cipher-context-tp = c-pointer<mbedtls-cipher-context-t-c>
pub alias mbedtls-cipher-context-tc<s::S> = owned-c<mbedtls-cipher-context-t-c>
pub alias mbedtls-cipher-context-tcb<s::S> = borrowed-c<s,mbedtls-cipher-context-t-c>
pub alias mbedtls-cipher-context-tca<s::S> = owned-c<c-array<mbedtls-cipher-context-t-c>>

pub extern mbedtls-cipher-context-t/size-of(c: c-null<mbedtls-cipher-context-t-c>): int32
  c inline "sizeof(struct mbedtls_cipher_context_t)"

pub fun mbedtls-cipher-context-tc(): mbedtls-cipher-context-tc<s::S>
  malloc(?size-of=mbedtls-cipher-context-t/size-of)

pub fun mbedtls-cipher-context-tc-calloc(): mbedtls-cipher-context-tc<s::S>
  malloc-c(?size-of=mbedtls-cipher-context-t/size-of)

pub fun mbedtls-cipher-context-tc-array(n: int): mbedtls-cipher-context-tca<s::S>
  malloc(n.int32, ?size-of=mbedtls-cipher-context-t/size-of)

pub fun mbedtls-cipher-context-tc-array-calloc(n: int): mbedtls-cipher-context-tca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-cipher-context-t/size-of)

pub inline extern mbedtls-cipher-context-t-ptrraw/private-cipher-info(s: intptr_t): c-pointer<mbedtls-cipher-info-t-c>
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_cipher_info)"

pub inline fun mbedtls-cipher-context-tp/private-cipher-info(s: mbedtls-cipher-context-tp): <> c-pointer<mbedtls-cipher-info-t-c>
  s.cextern/c-pointer/ptr.mbedtls-cipher-context-t-ptrraw/private-cipher-info

pub inline fun mbedtls-cipher-context-tc/private-cipher-info(^s: mbedtls-cipher-context-tc<s::S>): <> c-pointer<mbedtls-cipher-info-t-c>
  s.with-ptr(mbedtls-cipher-context-tp/private-cipher-info)

pub inline fun mbedtls-cipher-context-tcb/private-cipher-info(^s: mbedtls-cipher-context-tcb<s::S>): <> c-pointer<mbedtls-cipher-info-t-c>
  s.with-ptr(mbedtls-cipher-context-tp/private-cipher-info)

pub inline extern mbedtls-cipher-context-t-ptrraw/set-private-cipher-info(s: intptr_t, private-cipher-info: c-pointer<mbedtls-cipher-info-t-c>): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_cipher_info = (struct mbedtls_cipher_info_t*)#2"

pub inline fun mbedtls-cipher-context-tp/set-private-cipher-info(s: mbedtls-cipher-context-tp, private-cipher-info: c-pointer<mbedtls-cipher-info-t-c>): ()
  s.mbedtls-cipher-context-t-ptrraw/set-private-cipher-info(private-cipher-info)

pub inline fun mbedtls-cipher-context-tc/set-private-cipher-info(^s: mbedtls-cipher-context-tc<s::S>, private-cipher-info: c-pointer<mbedtls-cipher-info-t-c>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-cipher-info(private-cipher-info))

pub inline fun mbedtls-cipher-context-tcb/set-private-cipher-info(^s: mbedtls-cipher-context-tcb<s::S>, private-cipher-info: c-pointer<mbedtls-cipher-info-t-c>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-cipher-info(private-cipher-info))

pub inline extern mbedtls-cipher-context-t-ptrraw/private-key-bitlen(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_cipher_context_t*)#1)->private_key_bitlen)"

pub inline fun mbedtls-cipher-context-tp/private-key-bitlen(s: mbedtls-cipher-context-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-cipher-context-t-ptrraw/private-key-bitlen.int

pub inline fun mbedtls-cipher-context-tc/private-key-bitlen(^s: mbedtls-cipher-context-tc<s::S>): <> int
  s.with-ptr(mbedtls-cipher-context-tp/private-key-bitlen)

pub inline fun mbedtls-cipher-context-tcb/private-key-bitlen(^s: mbedtls-cipher-context-tcb<s::S>): <> int
  s.with-ptr(mbedtls-cipher-context-tp/private-key-bitlen)

pub inline extern mbedtls-cipher-context-t-ptrraw/set-private-key-bitlen(s: intptr_t, private-key-bitlen: int32): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_key_bitlen = (int)#2"

pub inline fun mbedtls-cipher-context-tp/set-private-key-bitlen(s: mbedtls-cipher-context-tp, private-key-bitlen: int): ()
  s.mbedtls-cipher-context-t-ptrraw/set-private-key-bitlen(private-key-bitlen.int32)

pub inline fun mbedtls-cipher-context-tc/set-private-key-bitlen(^s: mbedtls-cipher-context-tc<s::S>, private-key-bitlen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-key-bitlen(private-key-bitlen))

pub inline fun mbedtls-cipher-context-tcb/set-private-key-bitlen(^s: mbedtls-cipher-context-tcb<s::S>, private-key-bitlen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-key-bitlen(private-key-bitlen))

pub inline extern mbedtls-cipher-context-t-ptrraw/private-operation(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_cipher_context_t*)#1)->private_operation)"

pub inline fun mbedtls-cipher-context-tp/private-operation(s: mbedtls-cipher-context-tp): <exn> mbedtls-operation-t
  s.cextern/c-pointer/ptr.mbedtls-cipher-context-t-ptrraw/private-operation.int/mbedtls-operation-t

pub inline fun mbedtls-cipher-context-tc/private-operation(^s: mbedtls-cipher-context-tc<s::S>): <exn> mbedtls-operation-t
  s.with-ptr(mbedtls-cipher-context-tp/private-operation)

pub inline fun mbedtls-cipher-context-tcb/private-operation(^s: mbedtls-cipher-context-tcb<s::S>): <exn> mbedtls-operation-t
  s.with-ptr(mbedtls-cipher-context-tp/private-operation)

pub inline extern mbedtls-cipher-context-t-ptrraw/set-private-operation(s: intptr_t, private-operation: int32): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_operation = (int32_t)#2"

pub inline fun mbedtls-cipher-context-tp/set-private-operation(s: mbedtls-cipher-context-tp, private-operation: mbedtls-operation-t): ()
  s.mbedtls-cipher-context-t-ptrraw/set-private-operation(private-operation.mbedtls-operation-t/int)

pub inline fun mbedtls-cipher-context-tc/set-private-operation(^s: mbedtls-cipher-context-tc<s::S>, private-operation: mbedtls-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-operation(private-operation))

pub inline fun mbedtls-cipher-context-tcb/set-private-operation(^s: mbedtls-cipher-context-tcb<s::S>, private-operation: mbedtls-operation-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-operation(private-operation))

pub inline extern mbedtls-cipher-context-t-ptrraw/private-add-padding(s: intptr_t): c-pointer<intptr_t>
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_add_padding)"

pub inline fun mbedtls-cipher-context-tp/private-add-padding(s: mbedtls-cipher-context-tp): <> c-pointer<intptr_t>
  s.cextern/c-pointer/ptr.mbedtls-cipher-context-t-ptrraw/private-add-padding

pub inline fun mbedtls-cipher-context-tc/private-add-padding(^s: mbedtls-cipher-context-tc<s::S>): <> c-pointer<intptr_t>
  s.with-ptr(mbedtls-cipher-context-tp/private-add-padding)

pub inline fun mbedtls-cipher-context-tcb/private-add-padding(^s: mbedtls-cipher-context-tcb<s::S>): <> c-pointer<intptr_t>
  s.with-ptr(mbedtls-cipher-context-tp/private-add-padding)

pub inline extern mbedtls-cipher-context-t-ptrraw/set-private-add-padding(s: intptr_t, private-add-padding: c-pointer<intptr_t>): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_add_padding = (void (*)(unsigned char*, size_t, size_t))#2"

pub inline fun mbedtls-cipher-context-tp/set-private-add-padding(s: mbedtls-cipher-context-tp, private-add-padding: c-pointer<intptr_t>): ()
  s.mbedtls-cipher-context-t-ptrraw/set-private-add-padding(private-add-padding)

pub inline fun mbedtls-cipher-context-tc/set-private-add-padding(^s: mbedtls-cipher-context-tc<s::S>, private-add-padding: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-add-padding(private-add-padding))

pub inline fun mbedtls-cipher-context-tcb/set-private-add-padding(^s: mbedtls-cipher-context-tcb<s::S>, private-add-padding: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-add-padding(private-add-padding))

pub inline extern mbedtls-cipher-context-t-ptrraw/private-get-padding(s: intptr_t): c-pointer<intptr_t>
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_get_padding)"

pub inline fun mbedtls-cipher-context-tp/private-get-padding(s: mbedtls-cipher-context-tp): <> c-pointer<intptr_t>
  s.cextern/c-pointer/ptr.mbedtls-cipher-context-t-ptrraw/private-get-padding

pub inline fun mbedtls-cipher-context-tc/private-get-padding(^s: mbedtls-cipher-context-tc<s::S>): <> c-pointer<intptr_t>
  s.with-ptr(mbedtls-cipher-context-tp/private-get-padding)

pub inline fun mbedtls-cipher-context-tcb/private-get-padding(^s: mbedtls-cipher-context-tcb<s::S>): <> c-pointer<intptr_t>
  s.with-ptr(mbedtls-cipher-context-tp/private-get-padding)

pub inline extern mbedtls-cipher-context-t-ptrraw/set-private-get-padding(s: intptr_t, private-get-padding: c-pointer<intptr_t>): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_get_padding = (int (*)(unsigned char*, size_t, size_t*))#2"

pub inline fun mbedtls-cipher-context-tp/set-private-get-padding(s: mbedtls-cipher-context-tp, private-get-padding: c-pointer<intptr_t>): ()
  s.mbedtls-cipher-context-t-ptrraw/set-private-get-padding(private-get-padding)

pub inline fun mbedtls-cipher-context-tc/set-private-get-padding(^s: mbedtls-cipher-context-tc<s::S>, private-get-padding: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-get-padding(private-get-padding))

pub inline fun mbedtls-cipher-context-tcb/set-private-get-padding(^s: mbedtls-cipher-context-tcb<s::S>, private-get-padding: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-get-padding(private-get-padding))

pub inline extern mbedtls-cipher-context-t-ptrraw/private-unprocessed-data(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_unprocessed_data)"

pub inline fun mbedtls-cipher-context-tp/private-unprocessed-data(s: mbedtls-cipher-context-tp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-cipher-context-t-ptrraw/private-unprocessed-data.cextern/ptr/carray

pub inline fun mbedtls-cipher-context-tc/private-unprocessed-data(^s: mbedtls-cipher-context-tc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-cipher-context-tp/private-unprocessed-data)

pub inline fun mbedtls-cipher-context-tcb/private-unprocessed-data(^s: mbedtls-cipher-context-tcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-cipher-context-tp/private-unprocessed-data)

pub inline extern mbedtls-cipher-context-t-ptrraw/set-private-unprocessed-data(s: intptr_t, private-unprocessed-data: c-pointer<int>): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_unprocessed_data = (unsigned char*)#2"

pub inline fun mbedtls-cipher-context-tp/set-private-unprocessed-data(s: mbedtls-cipher-context-tp, private-unprocessed-data: c-array<int>): ()
  s.mbedtls-cipher-context-t-ptrraw/set-private-unprocessed-data(private-unprocessed-data.cextern/carray/ptr)

pub inline fun mbedtls-cipher-context-tc/set-private-unprocessed-data(^s: mbedtls-cipher-context-tc<s::S>, private-unprocessed-data: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-unprocessed-data(private-unprocessed-data))

pub inline fun mbedtls-cipher-context-tcb/set-private-unprocessed-data(^s: mbedtls-cipher-context-tcb<s::S>, private-unprocessed-data: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-unprocessed-data(private-unprocessed-data))

pub inline extern mbedtls-cipher-context-t-ptrraw/private-unprocessed-len(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_cipher_context_t*)#1)->private_unprocessed_len)"

pub inline fun mbedtls-cipher-context-tp/private-unprocessed-len(s: mbedtls-cipher-context-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-cipher-context-t-ptrraw/private-unprocessed-len.int

pub inline fun mbedtls-cipher-context-tc/private-unprocessed-len(^s: mbedtls-cipher-context-tc<s::S>): <> int
  s.with-ptr(mbedtls-cipher-context-tp/private-unprocessed-len)

pub inline fun mbedtls-cipher-context-tcb/private-unprocessed-len(^s: mbedtls-cipher-context-tcb<s::S>): <> int
  s.with-ptr(mbedtls-cipher-context-tp/private-unprocessed-len)

pub inline extern mbedtls-cipher-context-t-ptrraw/set-private-unprocessed-len(s: intptr_t, private-unprocessed-len: ssize_t): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_unprocessed_len = (size_t)#2"

pub inline fun mbedtls-cipher-context-tp/set-private-unprocessed-len(s: mbedtls-cipher-context-tp, private-unprocessed-len: int): ()
  s.mbedtls-cipher-context-t-ptrraw/set-private-unprocessed-len(private-unprocessed-len.ssize_t)

pub inline fun mbedtls-cipher-context-tc/set-private-unprocessed-len(^s: mbedtls-cipher-context-tc<s::S>, private-unprocessed-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-unprocessed-len(private-unprocessed-len))

pub inline fun mbedtls-cipher-context-tcb/set-private-unprocessed-len(^s: mbedtls-cipher-context-tcb<s::S>, private-unprocessed-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-unprocessed-len(private-unprocessed-len))

pub inline extern mbedtls-cipher-context-t-ptrraw/private-iv(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_iv)"

pub inline fun mbedtls-cipher-context-tp/private-iv(s: mbedtls-cipher-context-tp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-cipher-context-t-ptrraw/private-iv.cextern/ptr/carray

pub inline fun mbedtls-cipher-context-tc/private-iv(^s: mbedtls-cipher-context-tc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-cipher-context-tp/private-iv)

pub inline fun mbedtls-cipher-context-tcb/private-iv(^s: mbedtls-cipher-context-tcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-cipher-context-tp/private-iv)

pub inline extern mbedtls-cipher-context-t-ptrraw/set-private-iv(s: intptr_t, private-iv: c-pointer<int>): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_iv = (unsigned char*)#2"

pub inline fun mbedtls-cipher-context-tp/set-private-iv(s: mbedtls-cipher-context-tp, private-iv: c-array<int>): ()
  s.mbedtls-cipher-context-t-ptrraw/set-private-iv(private-iv.cextern/carray/ptr)

pub inline fun mbedtls-cipher-context-tc/set-private-iv(^s: mbedtls-cipher-context-tc<s::S>, private-iv: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-iv(private-iv))

pub inline fun mbedtls-cipher-context-tcb/set-private-iv(^s: mbedtls-cipher-context-tcb<s::S>, private-iv: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-iv(private-iv))

pub inline extern mbedtls-cipher-context-t-ptrraw/private-iv-size(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_cipher_context_t*)#1)->private_iv_size)"

pub inline fun mbedtls-cipher-context-tp/private-iv-size(s: mbedtls-cipher-context-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-cipher-context-t-ptrraw/private-iv-size.int

pub inline fun mbedtls-cipher-context-tc/private-iv-size(^s: mbedtls-cipher-context-tc<s::S>): <> int
  s.with-ptr(mbedtls-cipher-context-tp/private-iv-size)

pub inline fun mbedtls-cipher-context-tcb/private-iv-size(^s: mbedtls-cipher-context-tcb<s::S>): <> int
  s.with-ptr(mbedtls-cipher-context-tp/private-iv-size)

pub inline extern mbedtls-cipher-context-t-ptrraw/set-private-iv-size(s: intptr_t, private-iv-size: ssize_t): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_iv_size = (size_t)#2"

pub inline fun mbedtls-cipher-context-tp/set-private-iv-size(s: mbedtls-cipher-context-tp, private-iv-size: int): ()
  s.mbedtls-cipher-context-t-ptrraw/set-private-iv-size(private-iv-size.ssize_t)

pub inline fun mbedtls-cipher-context-tc/set-private-iv-size(^s: mbedtls-cipher-context-tc<s::S>, private-iv-size: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-iv-size(private-iv-size))

pub inline fun mbedtls-cipher-context-tcb/set-private-iv-size(^s: mbedtls-cipher-context-tcb<s::S>, private-iv-size: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-iv-size(private-iv-size))

pub inline extern mbedtls-cipher-context-t-ptrraw/private-cipher-ctx(s: intptr_t): c-pointer<()>
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_cipher_ctx)"

pub inline fun mbedtls-cipher-context-tp/private-cipher-ctx(s: mbedtls-cipher-context-tp): <> c-pointer<()>
  s.cextern/c-pointer/ptr.mbedtls-cipher-context-t-ptrraw/private-cipher-ctx

pub inline fun mbedtls-cipher-context-tc/private-cipher-ctx(^s: mbedtls-cipher-context-tc<s::S>): <> c-pointer<()>
  s.with-ptr(mbedtls-cipher-context-tp/private-cipher-ctx)

pub inline fun mbedtls-cipher-context-tcb/private-cipher-ctx(^s: mbedtls-cipher-context-tcb<s::S>): <> c-pointer<()>
  s.with-ptr(mbedtls-cipher-context-tp/private-cipher-ctx)

pub inline extern mbedtls-cipher-context-t-ptrraw/set-private-cipher-ctx(s: intptr_t, private-cipher-ctx: c-pointer<()>): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_cipher_ctx = (void*)#2"

pub inline fun mbedtls-cipher-context-tp/set-private-cipher-ctx(s: mbedtls-cipher-context-tp, private-cipher-ctx: c-pointer<()>): ()
  s.mbedtls-cipher-context-t-ptrraw/set-private-cipher-ctx(private-cipher-ctx)

pub inline fun mbedtls-cipher-context-tc/set-private-cipher-ctx(^s: mbedtls-cipher-context-tc<s::S>, private-cipher-ctx: c-pointer<()>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-cipher-ctx(private-cipher-ctx))

pub inline fun mbedtls-cipher-context-tcb/set-private-cipher-ctx(^s: mbedtls-cipher-context-tcb<s::S>, private-cipher-ctx: c-pointer<()>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-cipher-ctx(private-cipher-ctx))

pub inline extern mbedtls-cipher-context-t-ptrraw/private-cmac-ctx(s: intptr_t): c-pointer<mbedtls-cmac-context-t-c>
  c inline "(intptr_t)(((struct mbedtls_cipher_context_t*)#1)->private_cmac_ctx)"

pub inline fun mbedtls-cipher-context-tp/private-cmac-ctx(s: mbedtls-cipher-context-tp): <> c-pointer<mbedtls-cmac-context-t-c>
  s.cextern/c-pointer/ptr.mbedtls-cipher-context-t-ptrraw/private-cmac-ctx

pub inline fun mbedtls-cipher-context-tc/private-cmac-ctx(^s: mbedtls-cipher-context-tc<s::S>): <> c-pointer<mbedtls-cmac-context-t-c>
  s.with-ptr(mbedtls-cipher-context-tp/private-cmac-ctx)

pub inline fun mbedtls-cipher-context-tcb/private-cmac-ctx(^s: mbedtls-cipher-context-tcb<s::S>): <> c-pointer<mbedtls-cmac-context-t-c>
  s.with-ptr(mbedtls-cipher-context-tp/private-cmac-ctx)

pub inline extern mbedtls-cipher-context-t-ptrraw/set-private-cmac-ctx(s: intptr_t, private-cmac-ctx: c-pointer<mbedtls-cmac-context-t-c>): ()
  c inline "((struct mbedtls_cipher_context_t*)#1)->private_cmac_ctx = (struct mbedtls_cmac_context_t*)#2"

pub inline fun mbedtls-cipher-context-tp/set-private-cmac-ctx(s: mbedtls-cipher-context-tp, private-cmac-ctx: c-pointer<mbedtls-cmac-context-t-c>): ()
  s.mbedtls-cipher-context-t-ptrraw/set-private-cmac-ctx(private-cmac-ctx)

pub inline fun mbedtls-cipher-context-tc/set-private-cmac-ctx(^s: mbedtls-cipher-context-tc<s::S>, private-cmac-ctx: c-pointer<mbedtls-cmac-context-t-c>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-cmac-ctx(private-cmac-ctx))

pub inline fun mbedtls-cipher-context-tcb/set-private-cmac-ctx(^s: mbedtls-cipher-context-tcb<s::S>, private-cmac-ctx: c-pointer<mbedtls-cmac-context-t-c>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cipher-context-tp/set-private-cmac-ctx(private-cmac-ctx))

// Cipher information. Allows calling cipher functions
// in a generic way.
// 
// \note        The library does not support custom cipher info structures,
// only built-in structures returned by the functions
// mbedtls_cipher_info_from_string(),
// mbedtls_cipher_info_from_type(),
// mbedtls_cipher_info_from_values(),
// mbedtls_cipher_info_from_psa().
// 
// \note        Some fields store a value that has been right-shifted to save
// code-size, so should not be used directly. The accessor
// functions adjust for this and return the "natural" value.
pub struct mbedtls-cipher-info-t
pub type mbedtls-cipher-info-t-c
pub alias mbedtls-cipher-info-tp = c-pointer<mbedtls-cipher-info-t-c>
pub alias mbedtls-cipher-info-tc = owned-c<mbedtls-cipher-info-t-c>
pub alias mbedtls-cipher-info-tcb<s::S> = borrowed-c<s,mbedtls-cipher-info-t-c>
pub alias mbedtls-cipher-info-tca = owned-c<c-array<mbedtls-cipher-info-t-c>>

// The CMAC context structure.
pub struct mbedtls-cmac-context-t
pub type mbedtls-cmac-context-t-c
pub alias mbedtls-cmac-context-tp = c-pointer<mbedtls-cmac-context-t-c>
pub alias mbedtls-cmac-context-tc<s::S> = owned-c<mbedtls-cmac-context-t-c>
pub alias mbedtls-cmac-context-tcb<s::S> = borrowed-c<s,mbedtls-cmac-context-t-c>
pub alias mbedtls-cmac-context-tca<s::S> = owned-c<c-array<mbedtls-cmac-context-t-c>>

pub extern mbedtls-cmac-context-t/size-of(c: c-null<mbedtls-cmac-context-t-c>): int32
  c inline "sizeof(struct mbedtls_cmac_context_t)"

pub fun mbedtls-cmac-context-tc(): mbedtls-cmac-context-tc<s::S>
  malloc(?size-of=mbedtls-cmac-context-t/size-of)

pub fun mbedtls-cmac-context-tc-calloc(): mbedtls-cmac-context-tc<s::S>
  malloc-c(?size-of=mbedtls-cmac-context-t/size-of)

pub fun mbedtls-cmac-context-tc-array(n: int): mbedtls-cmac-context-tca<s::S>
  malloc(n.int32, ?size-of=mbedtls-cmac-context-t/size-of)

pub fun mbedtls-cmac-context-tc-array-calloc(n: int): mbedtls-cmac-context-tca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-cmac-context-t/size-of)

pub inline extern mbedtls-cmac-context-t-ptrraw/private-state(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_cmac_context_t*)#1)->private_state)"

pub inline fun mbedtls-cmac-context-tp/private-state(s: mbedtls-cmac-context-tp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-cmac-context-t-ptrraw/private-state.cextern/ptr/carray

pub inline fun mbedtls-cmac-context-tc/private-state(^s: mbedtls-cmac-context-tc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-cmac-context-tp/private-state)

pub inline fun mbedtls-cmac-context-tcb/private-state(^s: mbedtls-cmac-context-tcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-cmac-context-tp/private-state)

pub inline extern mbedtls-cmac-context-t-ptrraw/set-private-state(s: intptr_t, private-state: c-pointer<int>): ()
  c inline "((struct mbedtls_cmac_context_t*)#1)->private_state = (unsigned char*)#2"

pub inline fun mbedtls-cmac-context-tp/set-private-state(s: mbedtls-cmac-context-tp, private-state: c-array<int>): ()
  s.mbedtls-cmac-context-t-ptrraw/set-private-state(private-state.cextern/carray/ptr)

pub inline fun mbedtls-cmac-context-tc/set-private-state(^s: mbedtls-cmac-context-tc<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cmac-context-tp/set-private-state(private-state))

pub inline fun mbedtls-cmac-context-tcb/set-private-state(^s: mbedtls-cmac-context-tcb<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cmac-context-tp/set-private-state(private-state))

pub inline extern mbedtls-cmac-context-t-ptrraw/private-unprocessed-block(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_cmac_context_t*)#1)->private_unprocessed_block)"

pub inline fun mbedtls-cmac-context-tp/private-unprocessed-block(s: mbedtls-cmac-context-tp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-cmac-context-t-ptrraw/private-unprocessed-block.cextern/ptr/carray

pub inline fun mbedtls-cmac-context-tc/private-unprocessed-block(^s: mbedtls-cmac-context-tc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-cmac-context-tp/private-unprocessed-block)

pub inline fun mbedtls-cmac-context-tcb/private-unprocessed-block(^s: mbedtls-cmac-context-tcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-cmac-context-tp/private-unprocessed-block)

pub inline extern mbedtls-cmac-context-t-ptrraw/set-private-unprocessed-block(s: intptr_t, private-unprocessed-block: c-pointer<int>): ()
  c inline "((struct mbedtls_cmac_context_t*)#1)->private_unprocessed_block = (unsigned char*)#2"

pub inline fun mbedtls-cmac-context-tp/set-private-unprocessed-block(s: mbedtls-cmac-context-tp, private-unprocessed-block: c-array<int>): ()
  s.mbedtls-cmac-context-t-ptrraw/set-private-unprocessed-block(private-unprocessed-block.cextern/carray/ptr)

pub inline fun mbedtls-cmac-context-tc/set-private-unprocessed-block(^s: mbedtls-cmac-context-tc<s::S>, private-unprocessed-block: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cmac-context-tp/set-private-unprocessed-block(private-unprocessed-block))

pub inline fun mbedtls-cmac-context-tcb/set-private-unprocessed-block(^s: mbedtls-cmac-context-tcb<s::S>, private-unprocessed-block: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cmac-context-tp/set-private-unprocessed-block(private-unprocessed-block))

pub inline extern mbedtls-cmac-context-t-ptrraw/private-unprocessed-len(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_cmac_context_t*)#1)->private_unprocessed_len)"

pub inline fun mbedtls-cmac-context-tp/private-unprocessed-len(s: mbedtls-cmac-context-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-cmac-context-t-ptrraw/private-unprocessed-len.int

pub inline fun mbedtls-cmac-context-tc/private-unprocessed-len(^s: mbedtls-cmac-context-tc<s::S>): <> int
  s.with-ptr(mbedtls-cmac-context-tp/private-unprocessed-len)

pub inline fun mbedtls-cmac-context-tcb/private-unprocessed-len(^s: mbedtls-cmac-context-tcb<s::S>): <> int
  s.with-ptr(mbedtls-cmac-context-tp/private-unprocessed-len)

pub inline extern mbedtls-cmac-context-t-ptrraw/set-private-unprocessed-len(s: intptr_t, private-unprocessed-len: ssize_t): ()
  c inline "((struct mbedtls_cmac_context_t*)#1)->private_unprocessed_len = (size_t)#2"

pub inline fun mbedtls-cmac-context-tp/set-private-unprocessed-len(s: mbedtls-cmac-context-tp, private-unprocessed-len: int): ()
  s.mbedtls-cmac-context-t-ptrraw/set-private-unprocessed-len(private-unprocessed-len.ssize_t)

pub inline fun mbedtls-cmac-context-tc/set-private-unprocessed-len(^s: mbedtls-cmac-context-tc<s::S>, private-unprocessed-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cmac-context-tp/set-private-unprocessed-len(private-unprocessed-len))

pub inline fun mbedtls-cmac-context-tcb/set-private-unprocessed-len(^s: mbedtls-cmac-context-tcb<s::S>, private-unprocessed-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-cmac-context-tp/set-private-unprocessed-len(private-unprocessed-len))

type mbedtls-chachapoly-mode-t
  // < The mode value for performing encryption.
  MBEDTLS_CHACHAPOLY_ENCRYPT
  // < The mode value for performing decryption.
  MBEDTLS_CHACHAPOLY_DECRYPT

pub fun mbedtls-chachapoly-mode-t/int(i: mbedtls-chachapoly-mode-t): int32
  match i
    MBEDTLS_CHACHAPOLY_ENCRYPT -> 0.int32
    MBEDTLS_CHACHAPOLY_DECRYPT -> 1.int32

pub fun int/mbedtls-chachapoly-mode-t(i: int32): exn mbedtls-chachapoly-mode-t
  match i.int
    0 -> MBEDTLS_CHACHAPOLY_ENCRYPT
    1 -> MBEDTLS_CHACHAPOLY_DECRYPT

// Roles in the EC J-PAKE exchange
type mbedtls-ecjpake-role
  // < Client
  MBEDTLS_ECJPAKE_CLIENT
  // < Server
  MBEDTLS_ECJPAKE_SERVER
  // < Undefined
  MBEDTLS_ECJPAKE_NONE

pub fun mbedtls-ecjpake-role/int(i: mbedtls-ecjpake-role): int32
  match i
    MBEDTLS_ECJPAKE_CLIENT -> 0.int32
    MBEDTLS_ECJPAKE_SERVER -> 1.int32
    MBEDTLS_ECJPAKE_NONE -> 2.int32

pub fun int/mbedtls-ecjpake-role(i: int32): exn mbedtls-ecjpake-role
  match i.int
    0 -> MBEDTLS_ECJPAKE_CLIENT
    1 -> MBEDTLS_ECJPAKE_SERVER
    2 -> MBEDTLS_ECJPAKE_NONE

pub struct psa-driver-mac-context-t
pub type psa-driver-mac-context-t-c
pub alias psa-driver-mac-context-tp = c-pointer<psa-driver-mac-context-t-c>
pub alias psa-driver-mac-context-tc = owned-c<psa-driver-mac-context-t-c>
pub alias psa-driver-mac-context-tcb<s::S> = borrowed-c<s,psa-driver-mac-context-t-c>
pub alias psa-driver-mac-context-tca = owned-c<c-array<psa-driver-mac-context-t-c>>

pub value struct mbedtls-psa-mac-operation-t
  private-alg: int
  private-ctx: unnamed-union3-c

pub type mbedtls-psa-mac-operation-t-c
pub alias mbedtls-psa-mac-operation-tp = c-pointer<mbedtls-psa-mac-operation-t-c>
pub alias mbedtls-psa-mac-operation-tc = owned-c<mbedtls-psa-mac-operation-t-c>
pub alias mbedtls-psa-mac-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-mac-operation-t-c>
pub alias mbedtls-psa-mac-operation-tca = owned-c<c-array<mbedtls-psa-mac-operation-t-c>>

pub extern mbedtls-psa-mac-operation-t/size-of(c: c-null<mbedtls-psa-mac-operation-t-c>): int32
  c inline "sizeof(mbedtls_psa_mac_operation_t)"

pub fun mbedtls-psa-mac-operation-tc(): mbedtls-psa-mac-operation-tc
  malloc(?size-of=mbedtls-psa-mac-operation-t/size-of)

pub fun mbedtls-psa-mac-operation-tc-calloc(): mbedtls-psa-mac-operation-tc
  malloc-c(?size-of=mbedtls-psa-mac-operation-t/size-of)

pub fun mbedtls-psa-mac-operation-tc-array(n: int): mbedtls-psa-mac-operation-tca
  malloc(n.int32, ?size-of=mbedtls-psa-mac-operation-t/size-of)

pub fun mbedtls-psa-mac-operation-tc-array-calloc(n: int): mbedtls-psa-mac-operation-tca
  malloc-c(n.int32, ?size-of=mbedtls-psa-mac-operation-t/size-of)

pub inline extern mbedtls-psa-mac-operation-t-ptrraw/private-alg(s: intptr_t): int32
  c inline "(psa_algorithm_t)(((mbedtls_psa_mac_operation_t*)#1)->private_alg)"

pub inline fun mbedtls-psa-mac-operation-tp/private-alg(s: mbedtls-psa-mac-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-mac-operation-t-ptrraw/private-alg.int

pub inline fun mbedtls-psa-mac-operation-tc/private-alg(^s: mbedtls-psa-mac-operation-tc): <> int
  s.with-ptr(mbedtls-psa-mac-operation-tp/private-alg)

pub inline fun mbedtls-psa-mac-operation-tcb/private-alg(^s: mbedtls-psa-mac-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-mac-operation-tp/private-alg)

pub inline extern mbedtls-psa-mac-operation-t-ptrraw/set-private-alg(s: intptr_t, private-alg: int32): ()
  c inline "((mbedtls_psa_mac_operation_t*)#1)->private_alg = (psa_algorithm_t)#2"

pub inline fun mbedtls-psa-mac-operation-tp/set-private-alg(s: mbedtls-psa-mac-operation-tp, private-alg: int): ()
  s.mbedtls-psa-mac-operation-t-ptrraw/set-private-alg(private-alg.int32)

pub inline fun mbedtls-psa-mac-operation-tc/set-private-alg(^s: mbedtls-psa-mac-operation-tc, private-alg: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-mac-operation-tp/set-private-alg(private-alg))

pub inline fun mbedtls-psa-mac-operation-tcb/set-private-alg(^s: mbedtls-psa-mac-operation-tcb<s::S>, private-alg: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-mac-operation-tp/set-private-alg(private-alg))

pub struct unnamed-union3
pub type unnamed-union3-c
pub alias unnamed-union3p = c-pointer<unnamed-union3-c>
pub alias unnamed-union3c = owned-c<unnamed-union3-c>
pub alias unnamed-union3cb<s::S> = borrowed-c<s,unnamed-union3-c>
pub alias unnamed-union3ca = owned-c<c-array<unnamed-union3-c>>

pub struct mbedtls-psa-hmac-operation-t
pub type mbedtls-psa-hmac-operation-t-c
pub alias mbedtls-psa-hmac-operation-tp = c-pointer<mbedtls-psa-hmac-operation-t-c>
pub alias mbedtls-psa-hmac-operation-tc<s::S> = owned-c<mbedtls-psa-hmac-operation-t-c>
pub alias mbedtls-psa-hmac-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-hmac-operation-t-c>
pub alias mbedtls-psa-hmac-operation-tca<s::S> = owned-c<c-array<mbedtls-psa-hmac-operation-t-c>>

pub extern mbedtls-psa-hmac-operation-t/size-of(c: c-null<mbedtls-psa-hmac-operation-t-c>): int32
  c inline "sizeof(mbedtls_psa_hmac_operation_t)"

pub fun mbedtls-psa-hmac-operation-tc(): mbedtls-psa-hmac-operation-tc<s::S>
  malloc(?size-of=mbedtls-psa-hmac-operation-t/size-of)

pub fun mbedtls-psa-hmac-operation-tc-calloc(): mbedtls-psa-hmac-operation-tc<s::S>
  malloc-c(?size-of=mbedtls-psa-hmac-operation-t/size-of)

pub fun mbedtls-psa-hmac-operation-tc-array(n: int): mbedtls-psa-hmac-operation-tca<s::S>
  malloc(n.int32, ?size-of=mbedtls-psa-hmac-operation-t/size-of)

pub fun mbedtls-psa-hmac-operation-tc-array-calloc(n: int): mbedtls-psa-hmac-operation-tca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-psa-hmac-operation-t/size-of)

pub inline extern mbedtls-psa-hmac-operation-t-ptrraw/private-alg(s: intptr_t): int32
  c inline "(psa_algorithm_t)(((mbedtls_psa_hmac_operation_t*)#1)->private_alg)"

pub inline fun mbedtls-psa-hmac-operation-tp/private-alg(s: mbedtls-psa-hmac-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-hmac-operation-t-ptrraw/private-alg.int

pub inline fun mbedtls-psa-hmac-operation-tc/private-alg(^s: mbedtls-psa-hmac-operation-tc<s::S>): <> int
  s.with-ptr(mbedtls-psa-hmac-operation-tp/private-alg)

pub inline fun mbedtls-psa-hmac-operation-tcb/private-alg(^s: mbedtls-psa-hmac-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-hmac-operation-tp/private-alg)

pub inline extern mbedtls-psa-hmac-operation-t-ptrraw/set-private-alg(s: intptr_t, private-alg: int32): ()
  c inline "((mbedtls_psa_hmac_operation_t*)#1)->private_alg = (psa_algorithm_t)#2"

pub inline fun mbedtls-psa-hmac-operation-tp/set-private-alg(s: mbedtls-psa-hmac-operation-tp, private-alg: int): ()
  s.mbedtls-psa-hmac-operation-t-ptrraw/set-private-alg(private-alg.int32)

pub inline fun mbedtls-psa-hmac-operation-tc/set-private-alg(^s: mbedtls-psa-hmac-operation-tc<s::S>, private-alg: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-tp/set-private-alg(private-alg))

pub inline fun mbedtls-psa-hmac-operation-tcb/set-private-alg(^s: mbedtls-psa-hmac-operation-tcb<s::S>, private-alg: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-tp/set-private-alg(private-alg))

pub inline extern mbedtls-psa-hmac-operation-t-ptrraw/private-opad(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((mbedtls_psa_hmac_operation_t*)#1)->private_opad)"

pub inline fun mbedtls-psa-hmac-operation-tp/private-opad(s: mbedtls-psa-hmac-operation-tp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-psa-hmac-operation-t-ptrraw/private-opad.cextern/ptr/carray

pub inline fun mbedtls-psa-hmac-operation-tc/private-opad(^s: mbedtls-psa-hmac-operation-tc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-psa-hmac-operation-tp/private-opad)

pub inline fun mbedtls-psa-hmac-operation-tcb/private-opad(^s: mbedtls-psa-hmac-operation-tcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-psa-hmac-operation-tp/private-opad)

pub inline extern mbedtls-psa-hmac-operation-t-ptrraw/set-private-opad(s: intptr_t, private-opad: c-pointer<int>): ()
  c inline "((mbedtls_psa_hmac_operation_t*)#1)->private_opad = (uint8_t*)#2"

pub inline fun mbedtls-psa-hmac-operation-tp/set-private-opad(s: mbedtls-psa-hmac-operation-tp, private-opad: c-array<int>): ()
  s.mbedtls-psa-hmac-operation-t-ptrraw/set-private-opad(private-opad.cextern/carray/ptr)

pub inline fun mbedtls-psa-hmac-operation-tc/set-private-opad(^s: mbedtls-psa-hmac-operation-tc<s::S>, private-opad: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-tp/set-private-opad(private-opad))

pub inline fun mbedtls-psa-hmac-operation-tcb/set-private-opad(^s: mbedtls-psa-hmac-operation-tcb<s::S>, private-opad: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-hmac-operation-tp/set-private-opad(private-opad))

pub value struct psa-hash-operation-s
  // Unique ID indicating which driver got assigned to do the
  // operation. Since driver contexts are driver-specific, swapping
  // drivers halfway through the operation is not supported.
  // ID values are auto-generated in psa_driver_wrappers.h.
  // ID value zero means the context is not valid or not assigned to
  // any driver (i.e. the driver context is not active, in use).
  private-id: int
  private-ctx: psa-driver-hash-context-t-c

pub type psa-hash-operation-s-c
pub alias psa-hash-operation-sp = c-pointer<psa-hash-operation-s-c>
pub alias psa-hash-operation-sc = owned-c<psa-hash-operation-s-c>
pub alias psa-hash-operation-scb<s::S> = borrowed-c<s,psa-hash-operation-s-c>
pub alias psa-hash-operation-sca = owned-c<c-array<psa-hash-operation-s-c>>

pub extern psa-hash-operation-s/size-of(c: c-null<psa-hash-operation-s-c>): int32
  c inline "sizeof(struct psa_hash_operation_s)"

pub fun psa-hash-operation-sc(): psa-hash-operation-sc
  malloc(?size-of=psa-hash-operation-s/size-of)

pub fun psa-hash-operation-sc-calloc(): psa-hash-operation-sc
  malloc-c(?size-of=psa-hash-operation-s/size-of)

pub fun psa-hash-operation-sc-array(n: int): psa-hash-operation-sca
  malloc(n.int32, ?size-of=psa-hash-operation-s/size-of)

pub fun psa-hash-operation-sc-array-calloc(n: int): psa-hash-operation-sca
  malloc-c(n.int32, ?size-of=psa-hash-operation-s/size-of)

pub inline extern psa-hash-operation-s-ptrraw/private-id(s: intptr_t): int32
  c inline "(unsigned int)(((struct psa_hash_operation_s*)#1)->private_id)"

pub inline fun psa-hash-operation-sp/private-id(s: psa-hash-operation-sp): <> int
  s.cextern/c-pointer/ptr.psa-hash-operation-s-ptrraw/private-id.int

pub inline fun psa-hash-operation-sc/private-id(^s: psa-hash-operation-sc): <> int
  s.with-ptr(psa-hash-operation-sp/private-id)

pub inline fun psa-hash-operation-scb/private-id(^s: psa-hash-operation-scb<s::S>): <> int
  s.with-ptr(psa-hash-operation-sp/private-id)

pub inline extern psa-hash-operation-s-ptrraw/set-private-id(s: intptr_t, private-id: int32): ()
  c inline "((struct psa_hash_operation_s*)#1)->private_id = (unsigned int)#2"

pub inline fun psa-hash-operation-sp/set-private-id(s: psa-hash-operation-sp, private-id: int): ()
  s.psa-hash-operation-s-ptrraw/set-private-id(private-id.int32)

pub inline fun psa-hash-operation-sc/set-private-id(^s: psa-hash-operation-sc, private-id: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-hash-operation-sp/set-private-id(private-id))

pub inline fun psa-hash-operation-scb/set-private-id(^s: psa-hash-operation-scb<s::S>, private-id: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-hash-operation-sp/set-private-id(private-id))

pub struct psa-driver-aead-context-t
pub type psa-driver-aead-context-t-c
pub alias psa-driver-aead-context-tp = c-pointer<psa-driver-aead-context-t-c>
pub alias psa-driver-aead-context-tc = owned-c<psa-driver-aead-context-t-c>
pub alias psa-driver-aead-context-tcb<s::S> = borrowed-c<s,psa-driver-aead-context-t-c>
pub alias psa-driver-aead-context-tca = owned-c<c-array<psa-driver-aead-context-t-c>>

pub struct psa-driver-sign-hash-interruptible-context-t
pub type psa-driver-sign-hash-interruptible-context-t-c
pub alias psa-driver-sign-hash-interruptible-context-tp = c-pointer<psa-driver-sign-hash-interruptible-context-t-c>
pub alias psa-driver-sign-hash-interruptible-context-tc = owned-c<psa-driver-sign-hash-interruptible-context-t-c>
pub alias psa-driver-sign-hash-interruptible-context-tcb<s::S> = borrowed-c<s,psa-driver-sign-hash-interruptible-context-t-c>
pub alias psa-driver-sign-hash-interruptible-context-tca = owned-c<c-array<psa-driver-sign-hash-interruptible-context-t-c>>

pub value struct mbedtls-psa-sign-hash-interruptible-operation-t
  private-dummy: int

pub type mbedtls-psa-sign-hash-interruptible-operation-t-c
pub alias mbedtls-psa-sign-hash-interruptible-operation-tp = c-pointer<mbedtls-psa-sign-hash-interruptible-operation-t-c>
pub alias mbedtls-psa-sign-hash-interruptible-operation-tc = owned-c<mbedtls-psa-sign-hash-interruptible-operation-t-c>
pub alias mbedtls-psa-sign-hash-interruptible-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-sign-hash-interruptible-operation-t-c>
pub alias mbedtls-psa-sign-hash-interruptible-operation-tca = owned-c<c-array<mbedtls-psa-sign-hash-interruptible-operation-t-c>>

pub extern mbedtls-psa-sign-hash-interruptible-operation-t/size-of(c: c-null<mbedtls-psa-sign-hash-interruptible-operation-t-c>): int32
  c inline "sizeof(mbedtls_psa_sign_hash_interruptible_operation_t)"

pub fun mbedtls-psa-sign-hash-interruptible-operation-tc(): mbedtls-psa-sign-hash-interruptible-operation-tc
  malloc(?size-of=mbedtls-psa-sign-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-sign-hash-interruptible-operation-tc-calloc(): mbedtls-psa-sign-hash-interruptible-operation-tc
  malloc-c(?size-of=mbedtls-psa-sign-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-sign-hash-interruptible-operation-tc-array(n: int): mbedtls-psa-sign-hash-interruptible-operation-tca
  malloc(n.int32, ?size-of=mbedtls-psa-sign-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-sign-hash-interruptible-operation-tc-array-calloc(n: int): mbedtls-psa-sign-hash-interruptible-operation-tca
  malloc-c(n.int32, ?size-of=mbedtls-psa-sign-hash-interruptible-operation-t/size-of)

pub inline extern mbedtls-psa-sign-hash-interruptible-operation-t-ptrraw/private-dummy(s: intptr_t): int32
  c inline "(unsigned int)(((mbedtls_psa_sign_hash_interruptible_operation_t*)#1)->private_dummy)"

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tp/private-dummy(s: mbedtls-psa-sign-hash-interruptible-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-sign-hash-interruptible-operation-t-ptrraw/private-dummy.int

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tc/private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tc): <> int
  s.with-ptr(mbedtls-psa-sign-hash-interruptible-operation-tp/private-dummy)

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tcb/private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-sign-hash-interruptible-operation-tp/private-dummy)

pub inline extern mbedtls-psa-sign-hash-interruptible-operation-t-ptrraw/set-private-dummy(s: intptr_t, private-dummy: int32): ()
  c inline "((mbedtls_psa_sign_hash_interruptible_operation_t*)#1)->private_dummy = (unsigned int)#2"

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tp/set-private-dummy(s: mbedtls-psa-sign-hash-interruptible-operation-tp, private-dummy: int): ()
  s.mbedtls-psa-sign-hash-interruptible-operation-t-ptrraw/set-private-dummy(private-dummy.int32)

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tc/set-private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tc, private-dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-sign-hash-interruptible-operation-tp/set-private-dummy(private-dummy))

pub inline fun mbedtls-psa-sign-hash-interruptible-operation-tcb/set-private-dummy(^s: mbedtls-psa-sign-hash-interruptible-operation-tcb<s::S>, private-dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-sign-hash-interruptible-operation-tp/set-private-dummy(private-dummy))

pub struct psa-driver-verify-hash-interruptible-context-t
pub type psa-driver-verify-hash-interruptible-context-t-c
pub alias psa-driver-verify-hash-interruptible-context-tp = c-pointer<psa-driver-verify-hash-interruptible-context-t-c>
pub alias psa-driver-verify-hash-interruptible-context-tc = owned-c<psa-driver-verify-hash-interruptible-context-t-c>
pub alias psa-driver-verify-hash-interruptible-context-tcb<s::S> = borrowed-c<s,psa-driver-verify-hash-interruptible-context-t-c>
pub alias psa-driver-verify-hash-interruptible-context-tca = owned-c<c-array<psa-driver-verify-hash-interruptible-context-t-c>>

pub value struct mbedtls-psa-verify-hash-interruptible-operation-t
  private-dummy: int

pub type mbedtls-psa-verify-hash-interruptible-operation-t-c
pub alias mbedtls-psa-verify-hash-interruptible-operation-tp = c-pointer<mbedtls-psa-verify-hash-interruptible-operation-t-c>
pub alias mbedtls-psa-verify-hash-interruptible-operation-tc = owned-c<mbedtls-psa-verify-hash-interruptible-operation-t-c>
pub alias mbedtls-psa-verify-hash-interruptible-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-verify-hash-interruptible-operation-t-c>
pub alias mbedtls-psa-verify-hash-interruptible-operation-tca = owned-c<c-array<mbedtls-psa-verify-hash-interruptible-operation-t-c>>

pub extern mbedtls-psa-verify-hash-interruptible-operation-t/size-of(c: c-null<mbedtls-psa-verify-hash-interruptible-operation-t-c>): int32
  c inline "sizeof(mbedtls_psa_verify_hash_interruptible_operation_t)"

pub fun mbedtls-psa-verify-hash-interruptible-operation-tc(): mbedtls-psa-verify-hash-interruptible-operation-tc
  malloc(?size-of=mbedtls-psa-verify-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-verify-hash-interruptible-operation-tc-calloc(): mbedtls-psa-verify-hash-interruptible-operation-tc
  malloc-c(?size-of=mbedtls-psa-verify-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-verify-hash-interruptible-operation-tc-array(n: int): mbedtls-psa-verify-hash-interruptible-operation-tca
  malloc(n.int32, ?size-of=mbedtls-psa-verify-hash-interruptible-operation-t/size-of)

pub fun mbedtls-psa-verify-hash-interruptible-operation-tc-array-calloc(n: int): mbedtls-psa-verify-hash-interruptible-operation-tca
  malloc-c(n.int32, ?size-of=mbedtls-psa-verify-hash-interruptible-operation-t/size-of)

pub inline extern mbedtls-psa-verify-hash-interruptible-operation-t-ptrraw/private-dummy(s: intptr_t): int32
  c inline "(unsigned int)(((mbedtls_psa_verify_hash_interruptible_operation_t*)#1)->private_dummy)"

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tp/private-dummy(s: mbedtls-psa-verify-hash-interruptible-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-verify-hash-interruptible-operation-t-ptrraw/private-dummy.int

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tc/private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tc): <> int
  s.with-ptr(mbedtls-psa-verify-hash-interruptible-operation-tp/private-dummy)

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tcb/private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-verify-hash-interruptible-operation-tp/private-dummy)

pub inline extern mbedtls-psa-verify-hash-interruptible-operation-t-ptrraw/set-private-dummy(s: intptr_t, private-dummy: int32): ()
  c inline "((mbedtls_psa_verify_hash_interruptible_operation_t*)#1)->private_dummy = (unsigned int)#2"

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tp/set-private-dummy(s: mbedtls-psa-verify-hash-interruptible-operation-tp, private-dummy: int): ()
  s.mbedtls-psa-verify-hash-interruptible-operation-t-ptrraw/set-private-dummy(private-dummy.int32)

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tc/set-private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tc, private-dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-verify-hash-interruptible-operation-tp/set-private-dummy(private-dummy))

pub inline fun mbedtls-psa-verify-hash-interruptible-operation-tcb/set-private-dummy(^s: mbedtls-psa-verify-hash-interruptible-operation-tcb<s::S>, private-dummy: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-verify-hash-interruptible-operation-tp/set-private-dummy(private-dummy))

pub struct psa-driver-pake-context-t
pub type psa-driver-pake-context-t-c
pub alias psa-driver-pake-context-tp = c-pointer<psa-driver-pake-context-t-c>
pub alias psa-driver-pake-context-tc = owned-c<psa-driver-pake-context-t-c>
pub alias psa-driver-pake-context-tcb<s::S> = borrowed-c<s,psa-driver-pake-context-t-c>
pub alias psa-driver-pake-context-tca = owned-c<c-array<psa-driver-pake-context-t-c>>

pub struct mbedtls-psa-pake-operation-t
pub type mbedtls-psa-pake-operation-t-c
pub alias mbedtls-psa-pake-operation-tp = c-pointer<mbedtls-psa-pake-operation-t-c>
pub alias mbedtls-psa-pake-operation-tc<s::S> = owned-c<mbedtls-psa-pake-operation-t-c>
pub alias mbedtls-psa-pake-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-pake-operation-t-c>
pub alias mbedtls-psa-pake-operation-tca<s::S> = owned-c<c-array<mbedtls-psa-pake-operation-t-c>>

pub extern mbedtls-psa-pake-operation-t/size-of(c: c-null<mbedtls-psa-pake-operation-t-c>): int32
  c inline "sizeof(mbedtls_psa_pake_operation_t)"

pub fun mbedtls-psa-pake-operation-tc(): mbedtls-psa-pake-operation-tc<s::S>
  malloc(?size-of=mbedtls-psa-pake-operation-t/size-of)

pub fun mbedtls-psa-pake-operation-tc-calloc(): mbedtls-psa-pake-operation-tc<s::S>
  malloc-c(?size-of=mbedtls-psa-pake-operation-t/size-of)

pub fun mbedtls-psa-pake-operation-tc-array(n: int): mbedtls-psa-pake-operation-tca<s::S>
  malloc(n.int32, ?size-of=mbedtls-psa-pake-operation-t/size-of)

pub fun mbedtls-psa-pake-operation-tc-array-calloc(n: int): mbedtls-psa-pake-operation-tca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-psa-pake-operation-t/size-of)

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/private-alg(s: intptr_t): int32
  c inline "(psa_algorithm_t)(((mbedtls_psa_pake_operation_t*)#1)->private_alg)"

pub inline fun mbedtls-psa-pake-operation-tp/private-alg(s: mbedtls-psa-pake-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-pake-operation-t-ptrraw/private-alg.int

pub inline fun mbedtls-psa-pake-operation-tc/private-alg(^s: mbedtls-psa-pake-operation-tc<s::S>): <> int
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-alg)

pub inline fun mbedtls-psa-pake-operation-tcb/private-alg(^s: mbedtls-psa-pake-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-alg)

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/set-private-alg(s: intptr_t, private-alg: int32): ()
  c inline "((mbedtls_psa_pake_operation_t*)#1)->private_alg = (psa_algorithm_t)#2"

pub inline fun mbedtls-psa-pake-operation-tp/set-private-alg(s: mbedtls-psa-pake-operation-tp, private-alg: int): ()
  s.mbedtls-psa-pake-operation-t-ptrraw/set-private-alg(private-alg.int32)

pub inline fun mbedtls-psa-pake-operation-tc/set-private-alg(^s: mbedtls-psa-pake-operation-tc<s::S>, private-alg: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-alg(private-alg))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private-alg(^s: mbedtls-psa-pake-operation-tcb<s::S>, private-alg: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-alg(private-alg))

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/private-password(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((mbedtls_psa_pake_operation_t*)#1)->private_password)"

pub inline fun mbedtls-psa-pake-operation-tp/private-password(s: mbedtls-psa-pake-operation-tp): <> c-pointer<int>
  s.cextern/c-pointer/ptr.mbedtls-psa-pake-operation-t-ptrraw/private-password

pub inline fun mbedtls-psa-pake-operation-tc/private-password(^s: mbedtls-psa-pake-operation-tc<s::S>): <> c-pointer<int>
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-password)

pub inline fun mbedtls-psa-pake-operation-tcb/private-password(^s: mbedtls-psa-pake-operation-tcb<s::S>): <> c-pointer<int>
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-password)

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/set-private-password(s: intptr_t, private-password: c-pointer<int>): ()
  c inline "((mbedtls_psa_pake_operation_t*)#1)->private_password = (uint8_t*)#2"

pub inline fun mbedtls-psa-pake-operation-tp/set-private-password(s: mbedtls-psa-pake-operation-tp, private-password: c-pointer<int>): ()
  s.mbedtls-psa-pake-operation-t-ptrraw/set-private-password(private-password)

pub inline fun mbedtls-psa-pake-operation-tc/set-private-password(^s: mbedtls-psa-pake-operation-tc<s::S>, private-password: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-password(private-password))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private-password(^s: mbedtls-psa-pake-operation-tcb<s::S>, private-password: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-password(private-password))

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/private-password-len(s: intptr_t): ssize_t
  c inline "(size_t)(((mbedtls_psa_pake_operation_t*)#1)->private_password_len)"

pub inline fun mbedtls-psa-pake-operation-tp/private-password-len(s: mbedtls-psa-pake-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-pake-operation-t-ptrraw/private-password-len.int

pub inline fun mbedtls-psa-pake-operation-tc/private-password-len(^s: mbedtls-psa-pake-operation-tc<s::S>): <> int
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-password-len)

pub inline fun mbedtls-psa-pake-operation-tcb/private-password-len(^s: mbedtls-psa-pake-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-password-len)

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/set-private-password-len(s: intptr_t, private-password-len: ssize_t): ()
  c inline "((mbedtls_psa_pake_operation_t*)#1)->private_password_len = (size_t)#2"

pub inline fun mbedtls-psa-pake-operation-tp/set-private-password-len(s: mbedtls-psa-pake-operation-tp, private-password-len: int): ()
  s.mbedtls-psa-pake-operation-t-ptrraw/set-private-password-len(private-password-len.ssize_t)

pub inline fun mbedtls-psa-pake-operation-tc/set-private-password-len(^s: mbedtls-psa-pake-operation-tc<s::S>, private-password-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-password-len(private-password-len))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private-password-len(^s: mbedtls-psa-pake-operation-tcb<s::S>, private-password-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-password-len(private-password-len))

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/private-role(s: intptr_t): int32
  c inline "(int32_t)(((mbedtls_psa_pake_operation_t*)#1)->private_role)"

pub inline fun mbedtls-psa-pake-operation-tp/private-role(s: mbedtls-psa-pake-operation-tp): <exn> mbedtls-ecjpake-role
  s.cextern/c-pointer/ptr.mbedtls-psa-pake-operation-t-ptrraw/private-role.int/mbedtls-ecjpake-role

pub inline fun mbedtls-psa-pake-operation-tc/private-role(^s: mbedtls-psa-pake-operation-tc<s::S>): <exn> mbedtls-ecjpake-role
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-role)

pub inline fun mbedtls-psa-pake-operation-tcb/private-role(^s: mbedtls-psa-pake-operation-tcb<s::S>): <exn> mbedtls-ecjpake-role
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-role)

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/set-private-role(s: intptr_t, private-role: int32): ()
  c inline "((mbedtls_psa_pake_operation_t*)#1)->private_role = (int32_t)#2"

pub inline fun mbedtls-psa-pake-operation-tp/set-private-role(s: mbedtls-psa-pake-operation-tp, private-role: mbedtls-ecjpake-role): ()
  s.mbedtls-psa-pake-operation-t-ptrraw/set-private-role(private-role.mbedtls-ecjpake-role/int)

pub inline fun mbedtls-psa-pake-operation-tc/set-private-role(^s: mbedtls-psa-pake-operation-tc<s::S>, private-role: mbedtls-ecjpake-role): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-role(private-role))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private-role(^s: mbedtls-psa-pake-operation-tcb<s::S>, private-role: mbedtls-ecjpake-role): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-role(private-role))

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/private-buffer(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((mbedtls_psa_pake_operation_t*)#1)->private_buffer)"

pub inline fun mbedtls-psa-pake-operation-tp/private-buffer(s: mbedtls-psa-pake-operation-tp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-psa-pake-operation-t-ptrraw/private-buffer.cextern/ptr/carray

pub inline fun mbedtls-psa-pake-operation-tc/private-buffer(^s: mbedtls-psa-pake-operation-tc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-buffer)

pub inline fun mbedtls-psa-pake-operation-tcb/private-buffer(^s: mbedtls-psa-pake-operation-tcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-buffer)

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/set-private-buffer(s: intptr_t, private-buffer: c-pointer<int>): ()
  c inline "((mbedtls_psa_pake_operation_t*)#1)->private_buffer = (uint8_t*)#2"

pub inline fun mbedtls-psa-pake-operation-tp/set-private-buffer(s: mbedtls-psa-pake-operation-tp, private-buffer: c-array<int>): ()
  s.mbedtls-psa-pake-operation-t-ptrraw/set-private-buffer(private-buffer.cextern/carray/ptr)

pub inline fun mbedtls-psa-pake-operation-tc/set-private-buffer(^s: mbedtls-psa-pake-operation-tc<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-buffer(private-buffer))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private-buffer(^s: mbedtls-psa-pake-operation-tcb<s::S>, private-buffer: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-buffer(private-buffer))

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/private-buffer-length(s: intptr_t): ssize_t
  c inline "(size_t)(((mbedtls_psa_pake_operation_t*)#1)->private_buffer_length)"

pub inline fun mbedtls-psa-pake-operation-tp/private-buffer-length(s: mbedtls-psa-pake-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-pake-operation-t-ptrraw/private-buffer-length.int

pub inline fun mbedtls-psa-pake-operation-tc/private-buffer-length(^s: mbedtls-psa-pake-operation-tc<s::S>): <> int
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-buffer-length)

pub inline fun mbedtls-psa-pake-operation-tcb/private-buffer-length(^s: mbedtls-psa-pake-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-buffer-length)

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/set-private-buffer-length(s: intptr_t, private-buffer-length: ssize_t): ()
  c inline "((mbedtls_psa_pake_operation_t*)#1)->private_buffer_length = (size_t)#2"

pub inline fun mbedtls-psa-pake-operation-tp/set-private-buffer-length(s: mbedtls-psa-pake-operation-tp, private-buffer-length: int): ()
  s.mbedtls-psa-pake-operation-t-ptrraw/set-private-buffer-length(private-buffer-length.ssize_t)

pub inline fun mbedtls-psa-pake-operation-tc/set-private-buffer-length(^s: mbedtls-psa-pake-operation-tc<s::S>, private-buffer-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-buffer-length(private-buffer-length))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private-buffer-length(^s: mbedtls-psa-pake-operation-tcb<s::S>, private-buffer-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-buffer-length(private-buffer-length))

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/private-buffer-offset(s: intptr_t): ssize_t
  c inline "(size_t)(((mbedtls_psa_pake_operation_t*)#1)->private_buffer_offset)"

pub inline fun mbedtls-psa-pake-operation-tp/private-buffer-offset(s: mbedtls-psa-pake-operation-tp): <> int
  s.cextern/c-pointer/ptr.mbedtls-psa-pake-operation-t-ptrraw/private-buffer-offset.int

pub inline fun mbedtls-psa-pake-operation-tc/private-buffer-offset(^s: mbedtls-psa-pake-operation-tc<s::S>): <> int
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-buffer-offset)

pub inline fun mbedtls-psa-pake-operation-tcb/private-buffer-offset(^s: mbedtls-psa-pake-operation-tcb<s::S>): <> int
  s.with-ptr(mbedtls-psa-pake-operation-tp/private-buffer-offset)

pub inline extern mbedtls-psa-pake-operation-t-ptrraw/set-private-buffer-offset(s: intptr_t, private-buffer-offset: ssize_t): ()
  c inline "((mbedtls_psa_pake_operation_t*)#1)->private_buffer_offset = (size_t)#2"

pub inline fun mbedtls-psa-pake-operation-tp/set-private-buffer-offset(s: mbedtls-psa-pake-operation-tp, private-buffer-offset: int): ()
  s.mbedtls-psa-pake-operation-t-ptrraw/set-private-buffer-offset(private-buffer-offset.ssize_t)

pub inline fun mbedtls-psa-pake-operation-tc/set-private-buffer-offset(^s: mbedtls-psa-pake-operation-tc<s::S>, private-buffer-offset: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-buffer-offset(private-buffer-offset))

pub inline fun mbedtls-psa-pake-operation-tcb/set-private-buffer-offset(^s: mbedtls-psa-pake-operation-tcb<s::S>, private-buffer-offset: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-psa-pake-operation-tp/set-private-buffer-offset(private-buffer-offset))

pub struct unnamed-union5
pub type unnamed-union5-c
pub alias unnamed-union5p = c-pointer<unnamed-union5-c>
pub alias unnamed-union5c = owned-c<unnamed-union5-c>
pub alias unnamed-union5cb<s::S> = borrowed-c<s,unnamed-union5-c>
pub alias unnamed-union5ca = owned-c<c-array<unnamed-union5-c>>

// EC J-PAKE context structure.
// 
// J-PAKE is a symmetric protocol, except for the identifiers used in
// Zero-Knowledge Proofs, and the serialization of the second message
// (KeyExchange) as defined by the Thread spec.
// 
// In order to benefit from this symmetry, we choose a different naming
// convention from the Thread v1.0 spec. Correspondence is indicated in the
// description as a pair C: client name, S: server name
pub struct mbedtls-ecjpake-context
  // < Hash to use
  private-md-type: int
  // < Elliptic curve
  private-grp: mbedtls-ecp-group-c
  // < Are we client or server?
  private-role: int
  // < Format for point export
  private-point-format: int
  // < My public key 1   C: X1, S: X3
  private-xm1: mbedtls-ecp-point-c
  // < My public key 2   C: X2, S: X4
  private-xm2: mbedtls-ecp-point-c
  // < Peer public key 1 C: X3, S: X1
  private-xp1: mbedtls-ecp-point-c
  // < Peer public key 2 C: X4, S: X2
  private-xp2: mbedtls-ecp-point-c
  // < Peer public key   C: Xs, S: Xc
  private-xp: mbedtls-ecp-point-c
  // < My private key 1  C: x1, S: x3
  private-xm11: mbedtls-mpi-c
  // < My private key 2  C: x2, S: x4
  private-xm21: mbedtls-mpi-c
  // < Pre-shared secret (passphrase)
  private-s: mbedtls-mpi-c

pub type mbedtls-ecjpake-context-c
pub alias mbedtls-ecjpake-contextp = c-pointer<mbedtls-ecjpake-context-c>
pub alias mbedtls-ecjpake-contextc = owned-c<mbedtls-ecjpake-context-c>
pub alias mbedtls-ecjpake-contextcb<s::S> = borrowed-c<s,mbedtls-ecjpake-context-c>
pub alias mbedtls-ecjpake-contextca = owned-c<c-array<mbedtls-ecjpake-context-c>>

pub extern mbedtls-ecjpake-context/size-of(c: c-null<mbedtls-ecjpake-context-c>): int32
  c inline "sizeof(struct mbedtls_ecjpake_context)"

pub fun mbedtls-ecjpake-contextc(): mbedtls-ecjpake-contextc
  malloc(?size-of=mbedtls-ecjpake-context/size-of)

pub fun mbedtls-ecjpake-contextc-calloc(): mbedtls-ecjpake-contextc
  malloc-c(?size-of=mbedtls-ecjpake-context/size-of)

pub fun mbedtls-ecjpake-contextc-array(n: int): mbedtls-ecjpake-contextca
  malloc(n.int32, ?size-of=mbedtls-ecjpake-context/size-of)

pub fun mbedtls-ecjpake-contextc-array-calloc(n: int): mbedtls-ecjpake-contextca
  malloc-c(n.int32, ?size-of=mbedtls-ecjpake-context/size-of)

pub inline extern mbedtls-ecjpake-context-ptrraw/private-md-type(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_ecjpake_context*)#1)->private_md_type)"

pub inline fun mbedtls-ecjpake-contextp/private-md-type(s: mbedtls-ecjpake-contextp): <exn> mbedtls-md-type-t
  s.cextern/c-pointer/ptr.mbedtls-ecjpake-context-ptrraw/private-md-type.int/mbedtls-md-type-t

pub inline fun mbedtls-ecjpake-contextc/private-md-type(^s: mbedtls-ecjpake-contextc): <exn> mbedtls-md-type-t
  s.with-ptr(mbedtls-ecjpake-contextp/private-md-type)

pub inline fun mbedtls-ecjpake-contextcb/private-md-type(^s: mbedtls-ecjpake-contextcb<s::S>): <exn> mbedtls-md-type-t
  s.with-ptr(mbedtls-ecjpake-contextp/private-md-type)

pub inline extern mbedtls-ecjpake-context-ptrraw/set-private-md-type(s: intptr_t, private-md-type: int32): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_md_type = (int32_t)#2"

pub inline fun mbedtls-ecjpake-contextp/set-private-md-type(s: mbedtls-ecjpake-contextp, private-md-type: mbedtls-md-type-t): ()
  s.mbedtls-ecjpake-context-ptrraw/set-private-md-type(private-md-type.mbedtls-md-type-t/int)

pub inline fun mbedtls-ecjpake-contextc/set-private-md-type(^s: mbedtls-ecjpake-contextc, private-md-type: mbedtls-md-type-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-contextp/set-private-md-type(private-md-type))

pub inline fun mbedtls-ecjpake-contextcb/set-private-md-type(^s: mbedtls-ecjpake-contextcb<s::S>, private-md-type: mbedtls-md-type-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-contextp/set-private-md-type(private-md-type))

pub inline extern mbedtls-ecjpake-context-ptrraw/private-role(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_ecjpake_context*)#1)->private_role)"

pub inline fun mbedtls-ecjpake-contextp/private-role(s: mbedtls-ecjpake-contextp): <exn> mbedtls-ecjpake-role
  s.cextern/c-pointer/ptr.mbedtls-ecjpake-context-ptrraw/private-role.int/mbedtls-ecjpake-role

pub inline fun mbedtls-ecjpake-contextc/private-role(^s: mbedtls-ecjpake-contextc): <exn> mbedtls-ecjpake-role
  s.with-ptr(mbedtls-ecjpake-contextp/private-role)

pub inline fun mbedtls-ecjpake-contextcb/private-role(^s: mbedtls-ecjpake-contextcb<s::S>): <exn> mbedtls-ecjpake-role
  s.with-ptr(mbedtls-ecjpake-contextp/private-role)

pub inline extern mbedtls-ecjpake-context-ptrraw/set-private-role(s: intptr_t, private-role: int32): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_role = (int32_t)#2"

pub inline fun mbedtls-ecjpake-contextp/set-private-role(s: mbedtls-ecjpake-contextp, private-role: mbedtls-ecjpake-role): ()
  s.mbedtls-ecjpake-context-ptrraw/set-private-role(private-role.mbedtls-ecjpake-role/int)

pub inline fun mbedtls-ecjpake-contextc/set-private-role(^s: mbedtls-ecjpake-contextc, private-role: mbedtls-ecjpake-role): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-contextp/set-private-role(private-role))

pub inline fun mbedtls-ecjpake-contextcb/set-private-role(^s: mbedtls-ecjpake-contextcb<s::S>, private-role: mbedtls-ecjpake-role): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-contextp/set-private-role(private-role))

pub inline extern mbedtls-ecjpake-context-ptrraw/private-point-format(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_ecjpake_context*)#1)->private_point_format)"

pub inline fun mbedtls-ecjpake-contextp/private-point-format(s: mbedtls-ecjpake-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ecjpake-context-ptrraw/private-point-format.int

pub inline fun mbedtls-ecjpake-contextc/private-point-format(^s: mbedtls-ecjpake-contextc): <> int
  s.with-ptr(mbedtls-ecjpake-contextp/private-point-format)

pub inline fun mbedtls-ecjpake-contextcb/private-point-format(^s: mbedtls-ecjpake-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-ecjpake-contextp/private-point-format)

pub inline extern mbedtls-ecjpake-context-ptrraw/set-private-point-format(s: intptr_t, private-point-format: int32): ()
  c inline "((struct mbedtls_ecjpake_context*)#1)->private_point_format = (int)#2"

pub inline fun mbedtls-ecjpake-contextp/set-private-point-format(s: mbedtls-ecjpake-contextp, private-point-format: int): ()
  s.mbedtls-ecjpake-context-ptrraw/set-private-point-format(private-point-format.int32)

pub inline fun mbedtls-ecjpake-contextc/set-private-point-format(^s: mbedtls-ecjpake-contextc, private-point-format: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-contextp/set-private-point-format(private-point-format))

pub inline fun mbedtls-ecjpake-contextcb/set-private-point-format(^s: mbedtls-ecjpake-contextcb<s::S>, private-point-format: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecjpake-contextp/set-private-point-format(private-point-format))

// \brief           The ECP group structure.
// 
// We consider two types of curve equations:
// <ul><li>Short Weierstrass: <code>y^2 = x^3 + A x + B mod P</code>
// (SEC1 + RFC-4492)</li>
// <li>Montgomery: <code>y^2 = x^3 + A x^2 + x mod P</code> (Curve25519,
// Curve448)</li></ul>
// In both cases, the generator (\p G) for a prime-order subgroup is fixed.
// 
// For Short Weierstrass, this subgroup is the whole curve, and its
// cardinality is denoted by \p N. Our code requires that \p N is an
// odd prime as mbedtls_ecp_mul() requires an odd number, and
// mbedtls_ecdsa_sign() requires that it is prime for blinding purposes.
// 
// The default implementation only initializes \p A without setting it to the
// authentic value for curves with <code>A = -3</code>(SECP256R1, etc), in which
// case you need to load \p A by yourself when using domain parameters directly,
// for example:
// \code
// mbedtls_mpi_init(&A);
// mbedtls_ecp_group_init(&grp);
// CHECK_RETURN(mbedtls_ecp_group_load(&grp, grp_id));
// if (mbedtls_ecp_group_a_is_minus_3(&grp)) {
// CHECK_RETURN(mbedtls_mpi_sub_int(&A, &grp.P, 3));
// } else {
// CHECK_RETURN(mbedtls_mpi_copy(&A, &grp.A));
// }
// 
// do_something_with_a(&A);
// 
// cleanup:
// mbedtls_mpi_free(&A);
// mbedtls_ecp_group_free(&grp);
// \endcode
// 
// For Montgomery curves, we do not store \p A, but <code>(A + 2) / 4</code>,
// which is the quantity used in the formulas. Additionally, \p nbits is
// not the size of \p N but the required size for private keys.
// 
// If \p modp is NULL, reduction modulo \p P is done using a generic algorithm.
// Otherwise, \p modp must point to a function that takes an \p mbedtls_mpi in the
// range of <code>0..2^(2*pbits)-1</code>, and transforms it in-place to an integer
// which is congruent mod \p P to the given MPI, and is close enough to \p pbits
// in size, so that it may be efficiently brought in the 0..P-1 range by a few
// additions or subtractions. Therefore, it is only an approximative modular
// reduction. It must return 0 on success and non-zero on failure.
// 
// \note        Alternative implementations of the ECP module must obey the
// following constraints.
// * Group IDs must be distinct: if two group structures have
// the same ID, then they must be identical.
// * The fields \c id, \c P, \c A, \c B, \c G, \c N,
// \c pbits and \c nbits must have the same type and semantics
// as in the built-in implementation.
// They must be available for reading, but direct modification
// of these fields does not need to be supported.
// They do not need to be at the same offset in the structure.
pub struct mbedtls-ecp-group
  // !< An internal group identifier.
  id: int
  // !< The prime modulus of the base field.
  p: mbedtls-mpi-c
  // !< For Short Weierstrass: \p A in the equation. Note that
  // \p A is not set to the authentic value in some cases.
  // Refer to detailed description of ::mbedtls_ecp_group if
  // using domain parameters in the structure.
  // For Montgomery curves: <code>(A + 2) / 4</code>.
  a: mbedtls-mpi-c
  // !< For Short Weierstrass: \p B in the equation.
  // For Montgomery curves: unused.
  b: mbedtls-mpi-c
  // !< The generator of the subgroup used.
  g: mbedtls-ecp-point-c
  // !< The order of \p G.
  n: mbedtls-mpi-c
  // !< The number of bits in \p P.
  pbits: int
  // !< For Short Weierstrass: The number of bits in \p P.
  // For Montgomery curves: the number of bits in the
  // private keys.
  nbits: int
  // !< \internal 1 if the constants are static.
  private-h: int
  // !< The function for fast pseudo-reduction
  // mod \p P (see above).
  private-modp: c-pointer<intptr_t>
  // !< Unused.
  private-t-pre: c-pointer<intptr_t>
  // !< Unused.
  private-t-post: c-pointer<intptr_t>
  // !< Unused.
  private-t-data: c-pointer<()>
  // !< Pre-computed points for ecp_mul_comb().
  private-t: mbedtls-ecp-point-c
  // !< The number of dynamic allocated pre-computed points.
  private-t-size: int

pub type mbedtls-ecp-group-c
pub alias mbedtls-ecp-groupp = c-pointer<mbedtls-ecp-group-c>
pub alias mbedtls-ecp-groupc = owned-c<mbedtls-ecp-group-c>
pub alias mbedtls-ecp-groupcb<s::S> = borrowed-c<s,mbedtls-ecp-group-c>
pub alias mbedtls-ecp-groupca = owned-c<c-array<mbedtls-ecp-group-c>>

pub extern mbedtls-ecp-group/size-of(c: c-null<mbedtls-ecp-group-c>): int32
  c inline "sizeof(struct mbedtls_ecp_group)"

pub fun mbedtls-ecp-groupc(): mbedtls-ecp-groupc
  malloc(?size-of=mbedtls-ecp-group/size-of)

pub fun mbedtls-ecp-groupc-calloc(): mbedtls-ecp-groupc
  malloc-c(?size-of=mbedtls-ecp-group/size-of)

pub fun mbedtls-ecp-groupc-array(n: int): mbedtls-ecp-groupca
  malloc(n.int32, ?size-of=mbedtls-ecp-group/size-of)

pub fun mbedtls-ecp-groupc-array-calloc(n: int): mbedtls-ecp-groupca
  malloc-c(n.int32, ?size-of=mbedtls-ecp-group/size-of)

pub inline extern mbedtls-ecp-group-ptrraw/id(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_ecp_group*)#1)->id)"

pub inline fun mbedtls-ecp-groupp/id(s: mbedtls-ecp-groupp): <exn> mbedtls-ecp-group-id
  s.cextern/c-pointer/ptr.mbedtls-ecp-group-ptrraw/id.int/mbedtls-ecp-group-id

pub inline fun mbedtls-ecp-groupc/id(^s: mbedtls-ecp-groupc): <exn> mbedtls-ecp-group-id
  s.with-ptr(mbedtls-ecp-groupp/id)

pub inline fun mbedtls-ecp-groupcb/id(^s: mbedtls-ecp-groupcb<s::S>): <exn> mbedtls-ecp-group-id
  s.with-ptr(mbedtls-ecp-groupp/id)

pub inline extern mbedtls-ecp-group-ptrraw/set-id(s: intptr_t, id: int32): ()
  c inline "((struct mbedtls_ecp_group*)#1)->id = (int32_t)#2"

pub inline fun mbedtls-ecp-groupp/set-id(s: mbedtls-ecp-groupp, id: mbedtls-ecp-group-id): ()
  s.mbedtls-ecp-group-ptrraw/set-id(id.mbedtls-ecp-group-id/int)

pub inline fun mbedtls-ecp-groupc/set-id(^s: mbedtls-ecp-groupc, id: mbedtls-ecp-group-id): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-id(id))

pub inline fun mbedtls-ecp-groupcb/set-id(^s: mbedtls-ecp-groupcb<s::S>, id: mbedtls-ecp-group-id): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-id(id))

pub inline extern mbedtls-ecp-group-ptrraw/pbits(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_ecp_group*)#1)->pbits)"

pub inline fun mbedtls-ecp-groupp/pbits(s: mbedtls-ecp-groupp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ecp-group-ptrraw/pbits.int

pub inline fun mbedtls-ecp-groupc/pbits(^s: mbedtls-ecp-groupc): <> int
  s.with-ptr(mbedtls-ecp-groupp/pbits)

pub inline fun mbedtls-ecp-groupcb/pbits(^s: mbedtls-ecp-groupcb<s::S>): <> int
  s.with-ptr(mbedtls-ecp-groupp/pbits)

pub inline extern mbedtls-ecp-group-ptrraw/set-pbits(s: intptr_t, pbits: ssize_t): ()
  c inline "((struct mbedtls_ecp_group*)#1)->pbits = (size_t)#2"

pub inline fun mbedtls-ecp-groupp/set-pbits(s: mbedtls-ecp-groupp, pbits: int): ()
  s.mbedtls-ecp-group-ptrraw/set-pbits(pbits.ssize_t)

pub inline fun mbedtls-ecp-groupc/set-pbits(^s: mbedtls-ecp-groupc, pbits: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-pbits(pbits))

pub inline fun mbedtls-ecp-groupcb/set-pbits(^s: mbedtls-ecp-groupcb<s::S>, pbits: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-pbits(pbits))

pub inline extern mbedtls-ecp-group-ptrraw/nbits(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_ecp_group*)#1)->nbits)"

pub inline fun mbedtls-ecp-groupp/nbits(s: mbedtls-ecp-groupp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ecp-group-ptrraw/nbits.int

pub inline fun mbedtls-ecp-groupc/nbits(^s: mbedtls-ecp-groupc): <> int
  s.with-ptr(mbedtls-ecp-groupp/nbits)

pub inline fun mbedtls-ecp-groupcb/nbits(^s: mbedtls-ecp-groupcb<s::S>): <> int
  s.with-ptr(mbedtls-ecp-groupp/nbits)

pub inline extern mbedtls-ecp-group-ptrraw/set-nbits(s: intptr_t, nbits: ssize_t): ()
  c inline "((struct mbedtls_ecp_group*)#1)->nbits = (size_t)#2"

pub inline fun mbedtls-ecp-groupp/set-nbits(s: mbedtls-ecp-groupp, nbits: int): ()
  s.mbedtls-ecp-group-ptrraw/set-nbits(nbits.ssize_t)

pub inline fun mbedtls-ecp-groupc/set-nbits(^s: mbedtls-ecp-groupc, nbits: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-nbits(nbits))

pub inline fun mbedtls-ecp-groupcb/set-nbits(^s: mbedtls-ecp-groupcb<s::S>, nbits: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-nbits(nbits))

pub inline extern mbedtls-ecp-group-ptrraw/private-h(s: intptr_t): int32
  c inline "(unsigned int)(((struct mbedtls_ecp_group*)#1)->private_h)"

pub inline fun mbedtls-ecp-groupp/private-h(s: mbedtls-ecp-groupp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ecp-group-ptrraw/private-h.int

pub inline fun mbedtls-ecp-groupc/private-h(^s: mbedtls-ecp-groupc): <> int
  s.with-ptr(mbedtls-ecp-groupp/private-h)

pub inline fun mbedtls-ecp-groupcb/private-h(^s: mbedtls-ecp-groupcb<s::S>): <> int
  s.with-ptr(mbedtls-ecp-groupp/private-h)

pub inline extern mbedtls-ecp-group-ptrraw/set-private-h(s: intptr_t, private-h: int32): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_h = (unsigned int)#2"

pub inline fun mbedtls-ecp-groupp/set-private-h(s: mbedtls-ecp-groupp, private-h: int): ()
  s.mbedtls-ecp-group-ptrraw/set-private-h(private-h.int32)

pub inline fun mbedtls-ecp-groupc/set-private-h(^s: mbedtls-ecp-groupc, private-h: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-h(private-h))

pub inline fun mbedtls-ecp-groupcb/set-private-h(^s: mbedtls-ecp-groupcb<s::S>, private-h: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-h(private-h))

pub inline extern mbedtls-ecp-group-ptrraw/private-modp(s: intptr_t): c-pointer<intptr_t>
  c inline "(intptr_t)(((struct mbedtls_ecp_group*)#1)->private_modp)"

pub inline fun mbedtls-ecp-groupp/private-modp(s: mbedtls-ecp-groupp): <> c-pointer<intptr_t>
  s.cextern/c-pointer/ptr.mbedtls-ecp-group-ptrraw/private-modp

pub inline fun mbedtls-ecp-groupc/private-modp(^s: mbedtls-ecp-groupc): <> c-pointer<intptr_t>
  s.with-ptr(mbedtls-ecp-groupp/private-modp)

pub inline fun mbedtls-ecp-groupcb/private-modp(^s: mbedtls-ecp-groupcb<s::S>): <> c-pointer<intptr_t>
  s.with-ptr(mbedtls-ecp-groupp/private-modp)

pub inline extern mbedtls-ecp-group-ptrraw/set-private-modp(s: intptr_t, private-modp: c-pointer<intptr_t>): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_modp = (int (*)(struct mbedtls_mpi*))#2"

pub inline fun mbedtls-ecp-groupp/set-private-modp(s: mbedtls-ecp-groupp, private-modp: c-pointer<intptr_t>): ()
  s.mbedtls-ecp-group-ptrraw/set-private-modp(private-modp)

pub inline fun mbedtls-ecp-groupc/set-private-modp(^s: mbedtls-ecp-groupc, private-modp: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-modp(private-modp))

pub inline fun mbedtls-ecp-groupcb/set-private-modp(^s: mbedtls-ecp-groupcb<s::S>, private-modp: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-modp(private-modp))

pub inline extern mbedtls-ecp-group-ptrraw/private-t-pre(s: intptr_t): c-pointer<intptr_t>
  c inline "(intptr_t)(((struct mbedtls_ecp_group*)#1)->private_t_pre)"

pub inline fun mbedtls-ecp-groupp/private-t-pre(s: mbedtls-ecp-groupp): <> c-pointer<intptr_t>
  s.cextern/c-pointer/ptr.mbedtls-ecp-group-ptrraw/private-t-pre

pub inline fun mbedtls-ecp-groupc/private-t-pre(^s: mbedtls-ecp-groupc): <> c-pointer<intptr_t>
  s.with-ptr(mbedtls-ecp-groupp/private-t-pre)

pub inline fun mbedtls-ecp-groupcb/private-t-pre(^s: mbedtls-ecp-groupcb<s::S>): <> c-pointer<intptr_t>
  s.with-ptr(mbedtls-ecp-groupp/private-t-pre)

pub inline extern mbedtls-ecp-group-ptrraw/set-private-t-pre(s: intptr_t, private-t-pre: c-pointer<intptr_t>): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_t_pre = (int (*)(struct mbedtls_ecp_point*, void*))#2"

pub inline fun mbedtls-ecp-groupp/set-private-t-pre(s: mbedtls-ecp-groupp, private-t-pre: c-pointer<intptr_t>): ()
  s.mbedtls-ecp-group-ptrraw/set-private-t-pre(private-t-pre)

pub inline fun mbedtls-ecp-groupc/set-private-t-pre(^s: mbedtls-ecp-groupc, private-t-pre: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-t-pre(private-t-pre))

pub inline fun mbedtls-ecp-groupcb/set-private-t-pre(^s: mbedtls-ecp-groupcb<s::S>, private-t-pre: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-t-pre(private-t-pre))

pub inline extern mbedtls-ecp-group-ptrraw/private-t-post(s: intptr_t): c-pointer<intptr_t>
  c inline "(intptr_t)(((struct mbedtls_ecp_group*)#1)->private_t_post)"

pub inline fun mbedtls-ecp-groupp/private-t-post(s: mbedtls-ecp-groupp): <> c-pointer<intptr_t>
  s.cextern/c-pointer/ptr.mbedtls-ecp-group-ptrraw/private-t-post

pub inline fun mbedtls-ecp-groupc/private-t-post(^s: mbedtls-ecp-groupc): <> c-pointer<intptr_t>
  s.with-ptr(mbedtls-ecp-groupp/private-t-post)

pub inline fun mbedtls-ecp-groupcb/private-t-post(^s: mbedtls-ecp-groupcb<s::S>): <> c-pointer<intptr_t>
  s.with-ptr(mbedtls-ecp-groupp/private-t-post)

pub inline extern mbedtls-ecp-group-ptrraw/set-private-t-post(s: intptr_t, private-t-post: c-pointer<intptr_t>): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_t_post = (int (*)(struct mbedtls_ecp_point*, void*))#2"

pub inline fun mbedtls-ecp-groupp/set-private-t-post(s: mbedtls-ecp-groupp, private-t-post: c-pointer<intptr_t>): ()
  s.mbedtls-ecp-group-ptrraw/set-private-t-post(private-t-post)

pub inline fun mbedtls-ecp-groupc/set-private-t-post(^s: mbedtls-ecp-groupc, private-t-post: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-t-post(private-t-post))

pub inline fun mbedtls-ecp-groupcb/set-private-t-post(^s: mbedtls-ecp-groupcb<s::S>, private-t-post: c-pointer<intptr_t>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-t-post(private-t-post))

pub inline extern mbedtls-ecp-group-ptrraw/private-t-data(s: intptr_t): c-pointer<()>
  c inline "(intptr_t)(((struct mbedtls_ecp_group*)#1)->private_t_data)"

pub inline fun mbedtls-ecp-groupp/private-t-data(s: mbedtls-ecp-groupp): <> c-pointer<()>
  s.cextern/c-pointer/ptr.mbedtls-ecp-group-ptrraw/private-t-data

pub inline fun mbedtls-ecp-groupc/private-t-data(^s: mbedtls-ecp-groupc): <> c-pointer<()>
  s.with-ptr(mbedtls-ecp-groupp/private-t-data)

pub inline fun mbedtls-ecp-groupcb/private-t-data(^s: mbedtls-ecp-groupcb<s::S>): <> c-pointer<()>
  s.with-ptr(mbedtls-ecp-groupp/private-t-data)

pub inline extern mbedtls-ecp-group-ptrraw/set-private-t-data(s: intptr_t, private-t-data: c-pointer<()>): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_t_data = (void*)#2"

pub inline fun mbedtls-ecp-groupp/set-private-t-data(s: mbedtls-ecp-groupp, private-t-data: c-pointer<()>): ()
  s.mbedtls-ecp-group-ptrraw/set-private-t-data(private-t-data)

pub inline fun mbedtls-ecp-groupc/set-private-t-data(^s: mbedtls-ecp-groupc, private-t-data: c-pointer<()>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-t-data(private-t-data))

pub inline fun mbedtls-ecp-groupcb/set-private-t-data(^s: mbedtls-ecp-groupcb<s::S>, private-t-data: c-pointer<()>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-t-data(private-t-data))

pub inline extern mbedtls-ecp-group-ptrraw/private-t(s: intptr_t): c-pointer<mbedtls-ecp-point-c>
  c inline "(intptr_t)(((struct mbedtls_ecp_group*)#1)->private_T)"

pub inline fun mbedtls-ecp-groupp/private-t(s: mbedtls-ecp-groupp): <> c-pointer<mbedtls-ecp-point-c>
  s.cextern/c-pointer/ptr.mbedtls-ecp-group-ptrraw/private-t

pub inline fun mbedtls-ecp-groupc/private-t(^s: mbedtls-ecp-groupc): <> c-pointer<mbedtls-ecp-point-c>
  s.with-ptr(mbedtls-ecp-groupp/private-t)

pub inline fun mbedtls-ecp-groupcb/private-t(^s: mbedtls-ecp-groupcb<s::S>): <> c-pointer<mbedtls-ecp-point-c>
  s.with-ptr(mbedtls-ecp-groupp/private-t)

pub inline extern mbedtls-ecp-group-ptrraw/set-private-t(s: intptr_t, private-t: c-pointer<mbedtls-ecp-point-c>): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_T = (struct mbedtls_ecp_point*)#2"

pub inline fun mbedtls-ecp-groupp/set-private-t(s: mbedtls-ecp-groupp, private-t: c-pointer<mbedtls-ecp-point-c>): ()
  s.mbedtls-ecp-group-ptrraw/set-private-t(private-t)

pub inline fun mbedtls-ecp-groupc/set-private-t(^s: mbedtls-ecp-groupc, private-t: c-pointer<mbedtls-ecp-point-c>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-t(private-t))

pub inline fun mbedtls-ecp-groupcb/set-private-t(^s: mbedtls-ecp-groupcb<s::S>, private-t: c-pointer<mbedtls-ecp-point-c>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-t(private-t))

pub inline extern mbedtls-ecp-group-ptrraw/private-t-size(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_ecp_group*)#1)->private_T_size)"

pub inline fun mbedtls-ecp-groupp/private-t-size(s: mbedtls-ecp-groupp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ecp-group-ptrraw/private-t-size.int

pub inline fun mbedtls-ecp-groupc/private-t-size(^s: mbedtls-ecp-groupc): <> int
  s.with-ptr(mbedtls-ecp-groupp/private-t-size)

pub inline fun mbedtls-ecp-groupcb/private-t-size(^s: mbedtls-ecp-groupcb<s::S>): <> int
  s.with-ptr(mbedtls-ecp-groupp/private-t-size)

pub inline extern mbedtls-ecp-group-ptrraw/set-private-t-size(s: intptr_t, private-t-size: ssize_t): ()
  c inline "((struct mbedtls_ecp_group*)#1)->private_T_size = (size_t)#2"

pub inline fun mbedtls-ecp-groupp/set-private-t-size(s: mbedtls-ecp-groupp, private-t-size: int): ()
  s.mbedtls-ecp-group-ptrraw/set-private-t-size(private-t-size.ssize_t)

pub inline fun mbedtls-ecp-groupc/set-private-t-size(^s: mbedtls-ecp-groupc, private-t-size: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-t-size(private-t-size))

pub inline fun mbedtls-ecp-groupcb/set-private-t-size(^s: mbedtls-ecp-groupcb<s::S>, private-t-size: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ecp-groupp/set-private-t-size(private-t-size))

// \brief          MPI structure
pub value struct mbedtls-mpi
  // Pointer to limbs.
  // 
  // This may be \c NULL if \c n is 0.
  private-p: c-pointer<int>
  // Sign: -1 if the mpi is negative, 1 otherwise.
  // 
  // The number 0 must be represented with `s = +1`. Although many library
  // functions treat all-limbs-zero as equivalent to a valid representation
  // of 0 regardless of the sign bit, there are exceptions, so bignum
  // functions and external callers must always set \c s to +1 for the
  // number zero.
  // 
  // Note that this implies that calloc() or `... = {0}` does not create
  // a valid MPI representation. You must call mbedtls_mpi_init().
  private-s: int
  // Total number of limbs in \c p.
  private-n: int

pub type mbedtls-mpi-c
pub alias mbedtls-mpip = c-pointer<mbedtls-mpi-c>
pub alias mbedtls-mpic = owned-c<mbedtls-mpi-c>
pub alias mbedtls-mpicb<s::S> = borrowed-c<s,mbedtls-mpi-c>
pub alias mbedtls-mpica = owned-c<c-array<mbedtls-mpi-c>>

pub extern mbedtls-mpi/size-of(c: c-null<mbedtls-mpi-c>): int32
  c inline "sizeof(struct mbedtls_mpi)"

pub fun mbedtls-mpic(): mbedtls-mpic
  malloc(?size-of=mbedtls-mpi/size-of)

pub fun mbedtls-mpic-calloc(): mbedtls-mpic
  malloc-c(?size-of=mbedtls-mpi/size-of)

pub fun mbedtls-mpic-array(n: int): mbedtls-mpica
  malloc(n.int32, ?size-of=mbedtls-mpi/size-of)

pub fun mbedtls-mpic-array-calloc(n: int): mbedtls-mpica
  malloc-c(n.int32, ?size-of=mbedtls-mpi/size-of)

pub inline extern mbedtls-mpi-ptrraw/private-p(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_mpi*)#1)->private_p)"

pub inline fun mbedtls-mpip/private-p(s: mbedtls-mpip): <> c-pointer<int>
  s.cextern/c-pointer/ptr.mbedtls-mpi-ptrraw/private-p

pub inline fun mbedtls-mpic/private-p(^s: mbedtls-mpic): <> c-pointer<int>
  s.with-ptr(mbedtls-mpip/private-p)

pub inline fun mbedtls-mpicb/private-p(^s: mbedtls-mpicb<s::S>): <> c-pointer<int>
  s.with-ptr(mbedtls-mpip/private-p)

pub inline extern mbedtls-mpi-ptrraw/set-private-p(s: intptr_t, private-p: c-pointer<int>): ()
  c inline "((struct mbedtls_mpi*)#1)->private_p = (mbedtls_mpi_uint*)#2"

pub inline fun mbedtls-mpip/set-private-p(s: mbedtls-mpip, private-p: c-pointer<int>): ()
  s.mbedtls-mpi-ptrraw/set-private-p(private-p)

pub inline fun mbedtls-mpic/set-private-p(^s: mbedtls-mpic, private-p: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpip/set-private-p(private-p))

pub inline fun mbedtls-mpicb/set-private-p(^s: mbedtls-mpicb<s::S>, private-p: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpip/set-private-p(private-p))

pub inline extern mbedtls-mpi-ptrraw/private-s(s: intptr_t): int16
  c inline "(short)(((struct mbedtls_mpi*)#1)->private_s)"

pub inline fun mbedtls-mpip/private-s(s: mbedtls-mpip): <> int
  s.cextern/c-pointer/ptr.mbedtls-mpi-ptrraw/private-s.int

pub inline fun mbedtls-mpic/private-s(^s: mbedtls-mpic): <> int
  s.with-ptr(mbedtls-mpip/private-s)

pub inline fun mbedtls-mpicb/private-s(^s: mbedtls-mpicb<s::S>): <> int
  s.with-ptr(mbedtls-mpip/private-s)

pub inline extern mbedtls-mpi-ptrraw/set-private-s(s: intptr_t, private-s: int16): ()
  c inline "((struct mbedtls_mpi*)#1)->private_s = (short)#2"

pub inline fun mbedtls-mpip/set-private-s(s: mbedtls-mpip, private-s: int): ()
  s.mbedtls-mpi-ptrraw/set-private-s(private-s.int16)

pub inline fun mbedtls-mpic/set-private-s(^s: mbedtls-mpic, private-s: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpip/set-private-s(private-s))

pub inline fun mbedtls-mpicb/set-private-s(^s: mbedtls-mpicb<s::S>, private-s: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpip/set-private-s(private-s))

pub inline extern mbedtls-mpi-ptrraw/private-n(s: intptr_t): int16
  c inline "(unsigned short)(((struct mbedtls_mpi*)#1)->private_n)"

pub inline fun mbedtls-mpip/private-n(s: mbedtls-mpip): <> int
  s.cextern/c-pointer/ptr.mbedtls-mpi-ptrraw/private-n.int

pub inline fun mbedtls-mpic/private-n(^s: mbedtls-mpic): <> int
  s.with-ptr(mbedtls-mpip/private-n)

pub inline fun mbedtls-mpicb/private-n(^s: mbedtls-mpicb<s::S>): <> int
  s.with-ptr(mbedtls-mpip/private-n)

pub inline extern mbedtls-mpi-ptrraw/set-private-n(s: intptr_t, private-n: int16): ()
  c inline "((struct mbedtls_mpi*)#1)->private_n = (unsigned short)#2"

pub inline fun mbedtls-mpip/set-private-n(s: mbedtls-mpip, private-n: int): ()
  s.mbedtls-mpi-ptrraw/set-private-n(private-n.int16)

pub inline fun mbedtls-mpic/set-private-n(^s: mbedtls-mpic, private-n: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpip/set-private-n(private-n))

pub inline fun mbedtls-mpicb/set-private-n(^s: mbedtls-mpicb<s::S>, private-n: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-mpip/set-private-n(private-n))

alias mbedtls-mpi-uint = int
// \brief           The ECP point structure, in Jacobian coordinates.
// 
// \note            All functions expect and return points satisfying
// the following condition: <code>Z == 0</code> or
// <code>Z == 1</code>. Other values of \p Z are
// used only by internal functions.
// The point is zero, or "at infinity", if <code>Z == 0</code>.
// Otherwise, \p X and \p Y are its standard (affine)
// coordinates.
pub value struct mbedtls-ecp-point
  // !< The X coordinate of the ECP point.
  private-x: mbedtls-mpi-c
  // !< The Y coordinate of the ECP point.
  private-y: mbedtls-mpi-c
  // !< The Z coordinate of the ECP point.
  private-z: mbedtls-mpi-c

pub type mbedtls-ecp-point-c
pub alias mbedtls-ecp-pointp = c-pointer<mbedtls-ecp-point-c>
pub alias mbedtls-ecp-pointc = owned-c<mbedtls-ecp-point-c>
pub alias mbedtls-ecp-pointcb<s::S> = borrowed-c<s,mbedtls-ecp-point-c>
pub alias mbedtls-ecp-pointca = owned-c<c-array<mbedtls-ecp-point-c>>

pub extern mbedtls-ecp-point/size-of(c: c-null<mbedtls-ecp-point-c>): int32
  c inline "sizeof(struct mbedtls_ecp_point)"

pub fun mbedtls-ecp-pointc(): mbedtls-ecp-pointc
  malloc(?size-of=mbedtls-ecp-point/size-of)

pub fun mbedtls-ecp-pointc-calloc(): mbedtls-ecp-pointc
  malloc-c(?size-of=mbedtls-ecp-point/size-of)

pub fun mbedtls-ecp-pointc-array(n: int): mbedtls-ecp-pointca
  malloc(n.int32, ?size-of=mbedtls-ecp-point/size-of)

pub fun mbedtls-ecp-pointc-array-calloc(n: int): mbedtls-ecp-pointca
  malloc-c(n.int32, ?size-of=mbedtls-ecp-point/size-of)

type psa-tls12-prf-key-derivation-state-t
  PSA_TLS12_PRF_STATE_INIT
  PSA_TLS12_PRF_STATE_SEED_SET
  PSA_TLS12_PRF_STATE_OTHER_KEY_SET
  PSA_TLS12_PRF_STATE_KEY_SET
  PSA_TLS12_PRF_STATE_LABEL_SET
  PSA_TLS12_PRF_STATE_OUTPUT

pub fun psa-tls12-prf-key-derivation-state-t/int(i: psa-tls12-prf-key-derivation-state-t): int32
  match i
    PSA_TLS12_PRF_STATE_INIT -> 0.int32
    PSA_TLS12_PRF_STATE_SEED_SET -> 1.int32
    PSA_TLS12_PRF_STATE_OTHER_KEY_SET -> 2.int32
    PSA_TLS12_PRF_STATE_KEY_SET -> 3.int32
    PSA_TLS12_PRF_STATE_LABEL_SET -> 4.int32
    PSA_TLS12_PRF_STATE_OUTPUT -> 5.int32

pub fun int/psa-tls12-prf-key-derivation-state-t(i: int32): exn psa-tls12-prf-key-derivation-state-t
  match i.int
    0 -> PSA_TLS12_PRF_STATE_INIT
    1 -> PSA_TLS12_PRF_STATE_SEED_SET
    2 -> PSA_TLS12_PRF_STATE_OTHER_KEY_SET
    3 -> PSA_TLS12_PRF_STATE_KEY_SET
    4 -> PSA_TLS12_PRF_STATE_LABEL_SET
    5 -> PSA_TLS12_PRF_STATE_OUTPUT

pub struct psa-driver-key-derivation-context-t
pub type psa-driver-key-derivation-context-t-c
pub alias psa-driver-key-derivation-context-tp = c-pointer<psa-driver-key-derivation-context-t-c>
pub alias psa-driver-key-derivation-context-tc = owned-c<psa-driver-key-derivation-context-t-c>
pub alias psa-driver-key-derivation-context-tcb<s::S> = borrowed-c<s,psa-driver-key-derivation-context-t-c>
pub alias psa-driver-key-derivation-context-tca = owned-c<c-array<psa-driver-key-derivation-context-t-c>>

type psa-crypto-driver-pake-step
  PSA_JPAKE_STEP_INVALID
  PSA_JPAKE_X1_STEP_KEY_SHARE
  PSA_JPAKE_X1_STEP_ZK_PUBLIC
  PSA_JPAKE_X1_STEP_ZK_PROOF
  PSA_JPAKE_X2_STEP_KEY_SHARE
  PSA_JPAKE_X2_STEP_ZK_PUBLIC
  PSA_JPAKE_X2_STEP_ZK_PROOF
  PSA_JPAKE_X2S_STEP_KEY_SHARE
  PSA_JPAKE_X2S_STEP_ZK_PUBLIC
  PSA_JPAKE_X2S_STEP_ZK_PROOF
  PSA_JPAKE_X4S_STEP_KEY_SHARE
  PSA_JPAKE_X4S_STEP_ZK_PUBLIC
  PSA_JPAKE_X4S_STEP_ZK_PROOF

pub fun psa-crypto-driver-pake-step/int(i: psa-crypto-driver-pake-step): int32
  match i
    PSA_JPAKE_STEP_INVALID -> 0.int32
    PSA_JPAKE_X1_STEP_KEY_SHARE -> 1.int32
    PSA_JPAKE_X1_STEP_ZK_PUBLIC -> 2.int32
    PSA_JPAKE_X1_STEP_ZK_PROOF -> 3.int32
    PSA_JPAKE_X2_STEP_KEY_SHARE -> 4.int32
    PSA_JPAKE_X2_STEP_ZK_PUBLIC -> 5.int32
    PSA_JPAKE_X2_STEP_ZK_PROOF -> 6.int32
    PSA_JPAKE_X2S_STEP_KEY_SHARE -> 7.int32
    PSA_JPAKE_X2S_STEP_ZK_PUBLIC -> 8.int32
    PSA_JPAKE_X2S_STEP_ZK_PROOF -> 9.int32
    PSA_JPAKE_X4S_STEP_KEY_SHARE -> 10.int32
    PSA_JPAKE_X4S_STEP_ZK_PUBLIC -> 11.int32
    PSA_JPAKE_X4S_STEP_ZK_PROOF -> 12.int32

pub fun int/psa-crypto-driver-pake-step(i: int32): exn psa-crypto-driver-pake-step
  match i.int
    0 -> PSA_JPAKE_STEP_INVALID
    1 -> PSA_JPAKE_X1_STEP_KEY_SHARE
    2 -> PSA_JPAKE_X1_STEP_ZK_PUBLIC
    3 -> PSA_JPAKE_X1_STEP_ZK_PROOF
    4 -> PSA_JPAKE_X2_STEP_KEY_SHARE
    5 -> PSA_JPAKE_X2_STEP_ZK_PUBLIC
    6 -> PSA_JPAKE_X2_STEP_ZK_PROOF
    7 -> PSA_JPAKE_X2S_STEP_KEY_SHARE
    8 -> PSA_JPAKE_X2S_STEP_ZK_PUBLIC
    9 -> PSA_JPAKE_X2S_STEP_ZK_PROOF
    10 -> PSA_JPAKE_X4S_STEP_KEY_SHARE
    11 -> PSA_JPAKE_X4S_STEP_ZK_PUBLIC
    12 -> PSA_JPAKE_X4S_STEP_ZK_PROOF

type psa-jpake-round
  PSA_JPAKE_FIRST
  PSA_JPAKE_SECOND
  PSA_JPAKE_FINISHED

pub fun psa-jpake-round/int(i: psa-jpake-round): int32
  match i
    PSA_JPAKE_FIRST -> 0.int32
    PSA_JPAKE_SECOND -> 1.int32
    PSA_JPAKE_FINISHED -> 2.int32

pub fun int/psa-jpake-round(i: int32): exn psa-jpake-round
  match i.int
    0 -> PSA_JPAKE_FIRST
    1 -> PSA_JPAKE_SECOND
    2 -> PSA_JPAKE_FINISHED

type psa-jpake-io-mode
  PSA_JPAKE_INPUT
  PSA_JPAKE_OUTPUT

pub fun psa-jpake-io-mode/int(i: psa-jpake-io-mode): int32
  match i
    PSA_JPAKE_INPUT -> 0.int32
    PSA_JPAKE_OUTPUT -> 1.int32

pub fun int/psa-jpake-io-mode(i: int32): exn psa-jpake-io-mode
  match i.int
    0 -> PSA_JPAKE_INPUT
    1 -> PSA_JPAKE_OUTPUT

// \brief          Public key types
type mbedtls-pk-type-t
  MBEDTLS_PK_NONE
  MBEDTLS_PK_RSA
  MBEDTLS_PK_ECKEY
  MBEDTLS_PK_ECKEY_DH
  MBEDTLS_PK_ECDSA
  MBEDTLS_PK_RSA_ALT
  MBEDTLS_PK_RSASSA_PSS
  MBEDTLS_PK_OPAQUE

pub fun mbedtls-pk-type-t/int(i: mbedtls-pk-type-t): int32
  match i
    MBEDTLS_PK_NONE -> 0.int32
    MBEDTLS_PK_RSA -> 1.int32
    MBEDTLS_PK_ECKEY -> 2.int32
    MBEDTLS_PK_ECKEY_DH -> 3.int32
    MBEDTLS_PK_ECDSA -> 4.int32
    MBEDTLS_PK_RSA_ALT -> 5.int32
    MBEDTLS_PK_RSASSA_PSS -> 6.int32
    MBEDTLS_PK_OPAQUE -> 7.int32

pub fun int/mbedtls-pk-type-t(i: int32): exn mbedtls-pk-type-t
  match i.int
    0 -> MBEDTLS_PK_NONE
    1 -> MBEDTLS_PK_RSA
    2 -> MBEDTLS_PK_ECKEY
    3 -> MBEDTLS_PK_ECKEY_DH
    4 -> MBEDTLS_PK_ECDSA
    5 -> MBEDTLS_PK_RSA_ALT
    6 -> MBEDTLS_PK_RSASSA_PSS
    7 -> MBEDTLS_PK_OPAQUE

// \brief           Types for interfacing with the debug module
type mbedtls-pk-debug-type
  MBEDTLS_PK_DEBUG_NONE
  MBEDTLS_PK_DEBUG_MPI
  MBEDTLS_PK_DEBUG_ECP
  MBEDTLS_PK_DEBUG_PSA_EC

pub fun mbedtls-pk-debug-type/int(i: mbedtls-pk-debug-type): int32
  match i
    MBEDTLS_PK_DEBUG_NONE -> 0.int32
    MBEDTLS_PK_DEBUG_MPI -> 1.int32
    MBEDTLS_PK_DEBUG_ECP -> 2.int32
    MBEDTLS_PK_DEBUG_PSA_EC -> 3.int32

pub fun int/mbedtls-pk-debug-type(i: int32): exn mbedtls-pk-debug-type
  match i.int
    0 -> MBEDTLS_PK_DEBUG_NONE
    1 -> MBEDTLS_PK_DEBUG_MPI
    2 -> MBEDTLS_PK_DEBUG_ECP
    3 -> MBEDTLS_PK_DEBUG_PSA_EC

pub struct psa-mac-operation-s
pub type psa-mac-operation-s-c
pub alias psa-mac-operation-sp = c-pointer<psa-mac-operation-s-c>
pub alias psa-mac-operation-sc = owned-c<psa-mac-operation-s-c>
pub alias psa-mac-operation-scb<s::S> = borrowed-c<s,psa-mac-operation-s-c>
pub alias psa-mac-operation-sca = owned-c<c-array<psa-mac-operation-s-c>>

// \brief          The GCM context structure.
pub struct mbedtls-gcm-context
pub type mbedtls-gcm-context-c
pub alias mbedtls-gcm-contextp = c-pointer<mbedtls-gcm-context-c>
pub alias mbedtls-gcm-contextc<s::S> = owned-c<mbedtls-gcm-context-c>
pub alias mbedtls-gcm-contextcb<s::S> = borrowed-c<s,mbedtls-gcm-context-c>
pub alias mbedtls-gcm-contextca<s::S> = owned-c<c-array<mbedtls-gcm-context-c>>

pub extern mbedtls-gcm-context/size-of(c: c-null<mbedtls-gcm-context-c>): int32
  c inline "sizeof(struct mbedtls_gcm_context)"

pub fun mbedtls-gcm-contextc(): mbedtls-gcm-contextc<s::S>
  malloc(?size-of=mbedtls-gcm-context/size-of)

pub fun mbedtls-gcm-contextc-calloc(): mbedtls-gcm-contextc<s::S>
  malloc-c(?size-of=mbedtls-gcm-context/size-of)

pub fun mbedtls-gcm-contextc-array(n: int): mbedtls-gcm-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-gcm-context/size-of)

pub fun mbedtls-gcm-contextc-array-calloc(n: int): mbedtls-gcm-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-gcm-context/size-of)

pub inline extern mbedtls-gcm-context-ptrraw/private-h(s: intptr_t): c-pointer<c-array<int>>
  c inline "(intptr_t)(((struct mbedtls_gcm_context*)#1)->private_H)"

pub inline fun mbedtls-gcm-contextp/private-h(s: mbedtls-gcm-contextp): <> c-array<c-array<int>>
  s.cextern/c-pointer/ptr.mbedtls-gcm-context-ptrraw/private-h.cextern/ptr/carray

pub inline fun mbedtls-gcm-contextc/private-h(^s: mbedtls-gcm-contextc<s::S>): <> c-array<c-array<int>>
  s.with-ptr(mbedtls-gcm-contextp/private-h)

pub inline fun mbedtls-gcm-contextcb/private-h(^s: mbedtls-gcm-contextcb<s::S>): <> c-array<c-array<int>>
  s.with-ptr(mbedtls-gcm-contextp/private-h)

pub inline extern mbedtls-gcm-context-ptrraw/set-private-h(s: intptr_t, private-h: c-pointer<c-array<int>>): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_H = (int64_t**)#2"

pub inline fun mbedtls-gcm-contextp/set-private-h(s: mbedtls-gcm-contextp, private-h: c-array<c-array<int>>): ()
  s.mbedtls-gcm-context-ptrraw/set-private-h(private-h.cextern/carray/ptr)

pub inline fun mbedtls-gcm-contextc/set-private-h(^s: mbedtls-gcm-contextc<s::S>, private-h: c-array<c-array<int>>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-h(private-h))

pub inline fun mbedtls-gcm-contextcb/set-private-h(^s: mbedtls-gcm-contextcb<s::S>, private-h: c-array<c-array<int>>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-h(private-h))

pub inline extern mbedtls-gcm-context-ptrraw/private-len(s: intptr_t): int64
  c inline "(int64_t)(((struct mbedtls_gcm_context*)#1)->private_len)"

pub inline fun mbedtls-gcm-contextp/private-len(s: mbedtls-gcm-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-gcm-context-ptrraw/private-len.int

pub inline fun mbedtls-gcm-contextc/private-len(^s: mbedtls-gcm-contextc<s::S>): <> int
  s.with-ptr(mbedtls-gcm-contextp/private-len)

pub inline fun mbedtls-gcm-contextcb/private-len(^s: mbedtls-gcm-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-gcm-contextp/private-len)

pub inline extern mbedtls-gcm-context-ptrraw/set-private-len(s: intptr_t, private-len: int64): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_len = (int64_t)#2"

pub inline fun mbedtls-gcm-contextp/set-private-len(s: mbedtls-gcm-contextp, private-len: int): ()
  s.mbedtls-gcm-context-ptrraw/set-private-len(private-len.int64)

pub inline fun mbedtls-gcm-contextc/set-private-len(^s: mbedtls-gcm-contextc<s::S>, private-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-len(private-len))

pub inline fun mbedtls-gcm-contextcb/set-private-len(^s: mbedtls-gcm-contextcb<s::S>, private-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-len(private-len))

pub inline extern mbedtls-gcm-context-ptrraw/private-add-len(s: intptr_t): int64
  c inline "(int64_t)(((struct mbedtls_gcm_context*)#1)->private_add_len)"

pub inline fun mbedtls-gcm-contextp/private-add-len(s: mbedtls-gcm-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-gcm-context-ptrraw/private-add-len.int

pub inline fun mbedtls-gcm-contextc/private-add-len(^s: mbedtls-gcm-contextc<s::S>): <> int
  s.with-ptr(mbedtls-gcm-contextp/private-add-len)

pub inline fun mbedtls-gcm-contextcb/private-add-len(^s: mbedtls-gcm-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-gcm-contextp/private-add-len)

pub inline extern mbedtls-gcm-context-ptrraw/set-private-add-len(s: intptr_t, private-add-len: int64): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_add_len = (int64_t)#2"

pub inline fun mbedtls-gcm-contextp/set-private-add-len(s: mbedtls-gcm-contextp, private-add-len: int): ()
  s.mbedtls-gcm-context-ptrraw/set-private-add-len(private-add-len.int64)

pub inline fun mbedtls-gcm-contextc/set-private-add-len(^s: mbedtls-gcm-contextc<s::S>, private-add-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-add-len(private-add-len))

pub inline fun mbedtls-gcm-contextcb/set-private-add-len(^s: mbedtls-gcm-contextcb<s::S>, private-add-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-add-len(private-add-len))

pub inline extern mbedtls-gcm-context-ptrraw/private-base-ectr(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_gcm_context*)#1)->private_base_ectr)"

pub inline fun mbedtls-gcm-contextp/private-base-ectr(s: mbedtls-gcm-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-gcm-context-ptrraw/private-base-ectr.cextern/ptr/carray

pub inline fun mbedtls-gcm-contextc/private-base-ectr(^s: mbedtls-gcm-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-gcm-contextp/private-base-ectr)

pub inline fun mbedtls-gcm-contextcb/private-base-ectr(^s: mbedtls-gcm-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-gcm-contextp/private-base-ectr)

pub inline extern mbedtls-gcm-context-ptrraw/set-private-base-ectr(s: intptr_t, private-base-ectr: c-pointer<int>): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_base_ectr = (unsigned char*)#2"

pub inline fun mbedtls-gcm-contextp/set-private-base-ectr(s: mbedtls-gcm-contextp, private-base-ectr: c-array<int>): ()
  s.mbedtls-gcm-context-ptrraw/set-private-base-ectr(private-base-ectr.cextern/carray/ptr)

pub inline fun mbedtls-gcm-contextc/set-private-base-ectr(^s: mbedtls-gcm-contextc<s::S>, private-base-ectr: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-base-ectr(private-base-ectr))

pub inline fun mbedtls-gcm-contextcb/set-private-base-ectr(^s: mbedtls-gcm-contextcb<s::S>, private-base-ectr: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-base-ectr(private-base-ectr))

pub inline extern mbedtls-gcm-context-ptrraw/private-y(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_gcm_context*)#1)->private_y)"

pub inline fun mbedtls-gcm-contextp/private-y(s: mbedtls-gcm-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-gcm-context-ptrraw/private-y.cextern/ptr/carray

pub inline fun mbedtls-gcm-contextc/private-y(^s: mbedtls-gcm-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-gcm-contextp/private-y)

pub inline fun mbedtls-gcm-contextcb/private-y(^s: mbedtls-gcm-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-gcm-contextp/private-y)

pub inline extern mbedtls-gcm-context-ptrraw/set-private-y(s: intptr_t, private-y: c-pointer<int>): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_y = (unsigned char*)#2"

pub inline fun mbedtls-gcm-contextp/set-private-y(s: mbedtls-gcm-contextp, private-y: c-array<int>): ()
  s.mbedtls-gcm-context-ptrraw/set-private-y(private-y.cextern/carray/ptr)

pub inline fun mbedtls-gcm-contextc/set-private-y(^s: mbedtls-gcm-contextc<s::S>, private-y: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-y(private-y))

pub inline fun mbedtls-gcm-contextcb/set-private-y(^s: mbedtls-gcm-contextcb<s::S>, private-y: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-y(private-y))

pub inline extern mbedtls-gcm-context-ptrraw/private-buf(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_gcm_context*)#1)->private_buf)"

pub inline fun mbedtls-gcm-contextp/private-buf(s: mbedtls-gcm-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-gcm-context-ptrraw/private-buf.cextern/ptr/carray

pub inline fun mbedtls-gcm-contextc/private-buf(^s: mbedtls-gcm-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-gcm-contextp/private-buf)

pub inline fun mbedtls-gcm-contextcb/private-buf(^s: mbedtls-gcm-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-gcm-contextp/private-buf)

pub inline extern mbedtls-gcm-context-ptrraw/set-private-buf(s: intptr_t, private-buf: c-pointer<int>): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_buf = (unsigned char*)#2"

pub inline fun mbedtls-gcm-contextp/set-private-buf(s: mbedtls-gcm-contextp, private-buf: c-array<int>): ()
  s.mbedtls-gcm-context-ptrraw/set-private-buf(private-buf.cextern/carray/ptr)

pub inline fun mbedtls-gcm-contextc/set-private-buf(^s: mbedtls-gcm-contextc<s::S>, private-buf: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-buf(private-buf))

pub inline fun mbedtls-gcm-contextcb/set-private-buf(^s: mbedtls-gcm-contextcb<s::S>, private-buf: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-buf(private-buf))

pub inline extern mbedtls-gcm-context-ptrraw/private-mode(s: intptr_t): int8
  c inline "(unsigned char)(((struct mbedtls_gcm_context*)#1)->private_mode)"

pub inline fun mbedtls-gcm-contextp/private-mode(s: mbedtls-gcm-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-gcm-context-ptrraw/private-mode.int

pub inline fun mbedtls-gcm-contextc/private-mode(^s: mbedtls-gcm-contextc<s::S>): <> int
  s.with-ptr(mbedtls-gcm-contextp/private-mode)

pub inline fun mbedtls-gcm-contextcb/private-mode(^s: mbedtls-gcm-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-gcm-contextp/private-mode)

pub inline extern mbedtls-gcm-context-ptrraw/set-private-mode(s: intptr_t, private-mode: int8): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_mode = (unsigned char)#2"

pub inline fun mbedtls-gcm-contextp/set-private-mode(s: mbedtls-gcm-contextp, private-mode: int): ()
  s.mbedtls-gcm-context-ptrraw/set-private-mode(private-mode.int8)

pub inline fun mbedtls-gcm-contextc/set-private-mode(^s: mbedtls-gcm-contextc<s::S>, private-mode: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-mode(private-mode))

pub inline fun mbedtls-gcm-contextcb/set-private-mode(^s: mbedtls-gcm-contextcb<s::S>, private-mode: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-mode(private-mode))

pub inline extern mbedtls-gcm-context-ptrraw/private-acceleration(s: intptr_t): int8
  c inline "(unsigned char)(((struct mbedtls_gcm_context*)#1)->private_acceleration)"

pub inline fun mbedtls-gcm-contextp/private-acceleration(s: mbedtls-gcm-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-gcm-context-ptrraw/private-acceleration.int

pub inline fun mbedtls-gcm-contextc/private-acceleration(^s: mbedtls-gcm-contextc<s::S>): <> int
  s.with-ptr(mbedtls-gcm-contextp/private-acceleration)

pub inline fun mbedtls-gcm-contextcb/private-acceleration(^s: mbedtls-gcm-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-gcm-contextp/private-acceleration)

pub inline extern mbedtls-gcm-context-ptrraw/set-private-acceleration(s: intptr_t, private-acceleration: int8): ()
  c inline "((struct mbedtls_gcm_context*)#1)->private_acceleration = (unsigned char)#2"

pub inline fun mbedtls-gcm-contextp/set-private-acceleration(s: mbedtls-gcm-contextp, private-acceleration: int): ()
  s.mbedtls-gcm-context-ptrraw/set-private-acceleration(private-acceleration.int8)

pub inline fun mbedtls-gcm-contextc/set-private-acceleration(^s: mbedtls-gcm-contextc<s::S>, private-acceleration: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-acceleration(private-acceleration))

pub inline fun mbedtls-gcm-contextcb/set-private-acceleration(^s: mbedtls-gcm-contextcb<s::S>, private-acceleration: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-gcm-contextp/set-private-acceleration(private-acceleration))

// \brief    The CCM context-type definition. The CCM context is passed
// to the APIs called.
pub struct mbedtls-ccm-context
pub type mbedtls-ccm-context-c
pub alias mbedtls-ccm-contextp = c-pointer<mbedtls-ccm-context-c>
pub alias mbedtls-ccm-contextc<s::S> = owned-c<mbedtls-ccm-context-c>
pub alias mbedtls-ccm-contextcb<s::S> = borrowed-c<s,mbedtls-ccm-context-c>
pub alias mbedtls-ccm-contextca<s::S> = owned-c<c-array<mbedtls-ccm-context-c>>

pub extern mbedtls-ccm-context/size-of(c: c-null<mbedtls-ccm-context-c>): int32
  c inline "sizeof(struct mbedtls_ccm_context)"

pub fun mbedtls-ccm-contextc(): mbedtls-ccm-contextc<s::S>
  malloc(?size-of=mbedtls-ccm-context/size-of)

pub fun mbedtls-ccm-contextc-calloc(): mbedtls-ccm-contextc<s::S>
  malloc-c(?size-of=mbedtls-ccm-context/size-of)

pub fun mbedtls-ccm-contextc-array(n: int): mbedtls-ccm-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-ccm-context/size-of)

pub fun mbedtls-ccm-contextc-array-calloc(n: int): mbedtls-ccm-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-ccm-context/size-of)

pub inline extern mbedtls-ccm-context-ptrraw/private-y(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_ccm_context*)#1)->private_y)"

pub inline fun mbedtls-ccm-contextp/private-y(s: mbedtls-ccm-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-ccm-context-ptrraw/private-y.cextern/ptr/carray

pub inline fun mbedtls-ccm-contextc/private-y(^s: mbedtls-ccm-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-ccm-contextp/private-y)

pub inline fun mbedtls-ccm-contextcb/private-y(^s: mbedtls-ccm-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-ccm-contextp/private-y)

pub inline extern mbedtls-ccm-context-ptrraw/set-private-y(s: intptr_t, private-y: c-pointer<int>): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_y = (unsigned char*)#2"

pub inline fun mbedtls-ccm-contextp/set-private-y(s: mbedtls-ccm-contextp, private-y: c-array<int>): ()
  s.mbedtls-ccm-context-ptrraw/set-private-y(private-y.cextern/carray/ptr)

pub inline fun mbedtls-ccm-contextc/set-private-y(^s: mbedtls-ccm-contextc<s::S>, private-y: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-y(private-y))

pub inline fun mbedtls-ccm-contextcb/set-private-y(^s: mbedtls-ccm-contextcb<s::S>, private-y: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-y(private-y))

pub inline extern mbedtls-ccm-context-ptrraw/private-ctr(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_ccm_context*)#1)->private_ctr)"

pub inline fun mbedtls-ccm-contextp/private-ctr(s: mbedtls-ccm-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-ccm-context-ptrraw/private-ctr.cextern/ptr/carray

pub inline fun mbedtls-ccm-contextc/private-ctr(^s: mbedtls-ccm-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-ccm-contextp/private-ctr)

pub inline fun mbedtls-ccm-contextcb/private-ctr(^s: mbedtls-ccm-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-ccm-contextp/private-ctr)

pub inline extern mbedtls-ccm-context-ptrraw/set-private-ctr(s: intptr_t, private-ctr: c-pointer<int>): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_ctr = (unsigned char*)#2"

pub inline fun mbedtls-ccm-contextp/set-private-ctr(s: mbedtls-ccm-contextp, private-ctr: c-array<int>): ()
  s.mbedtls-ccm-context-ptrraw/set-private-ctr(private-ctr.cextern/carray/ptr)

pub inline fun mbedtls-ccm-contextc/set-private-ctr(^s: mbedtls-ccm-contextc<s::S>, private-ctr: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-ctr(private-ctr))

pub inline fun mbedtls-ccm-contextcb/set-private-ctr(^s: mbedtls-ccm-contextcb<s::S>, private-ctr: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-ctr(private-ctr))

pub inline extern mbedtls-ccm-context-ptrraw/private-plaintext-len(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_ccm_context*)#1)->private_plaintext_len)"

pub inline fun mbedtls-ccm-contextp/private-plaintext-len(s: mbedtls-ccm-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ccm-context-ptrraw/private-plaintext-len.int

pub inline fun mbedtls-ccm-contextc/private-plaintext-len(^s: mbedtls-ccm-contextc<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-plaintext-len)

pub inline fun mbedtls-ccm-contextcb/private-plaintext-len(^s: mbedtls-ccm-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-plaintext-len)

pub inline extern mbedtls-ccm-context-ptrraw/set-private-plaintext-len(s: intptr_t, private-plaintext-len: ssize_t): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_plaintext_len = (size_t)#2"

pub inline fun mbedtls-ccm-contextp/set-private-plaintext-len(s: mbedtls-ccm-contextp, private-plaintext-len: int): ()
  s.mbedtls-ccm-context-ptrraw/set-private-plaintext-len(private-plaintext-len.ssize_t)

pub inline fun mbedtls-ccm-contextc/set-private-plaintext-len(^s: mbedtls-ccm-contextc<s::S>, private-plaintext-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-plaintext-len(private-plaintext-len))

pub inline fun mbedtls-ccm-contextcb/set-private-plaintext-len(^s: mbedtls-ccm-contextcb<s::S>, private-plaintext-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-plaintext-len(private-plaintext-len))

pub inline extern mbedtls-ccm-context-ptrraw/private-add-len(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_ccm_context*)#1)->private_add_len)"

pub inline fun mbedtls-ccm-contextp/private-add-len(s: mbedtls-ccm-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ccm-context-ptrraw/private-add-len.int

pub inline fun mbedtls-ccm-contextc/private-add-len(^s: mbedtls-ccm-contextc<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-add-len)

pub inline fun mbedtls-ccm-contextcb/private-add-len(^s: mbedtls-ccm-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-add-len)

pub inline extern mbedtls-ccm-context-ptrraw/set-private-add-len(s: intptr_t, private-add-len: ssize_t): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_add_len = (size_t)#2"

pub inline fun mbedtls-ccm-contextp/set-private-add-len(s: mbedtls-ccm-contextp, private-add-len: int): ()
  s.mbedtls-ccm-context-ptrraw/set-private-add-len(private-add-len.ssize_t)

pub inline fun mbedtls-ccm-contextc/set-private-add-len(^s: mbedtls-ccm-contextc<s::S>, private-add-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-add-len(private-add-len))

pub inline fun mbedtls-ccm-contextcb/set-private-add-len(^s: mbedtls-ccm-contextcb<s::S>, private-add-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-add-len(private-add-len))

pub inline extern mbedtls-ccm-context-ptrraw/private-tag-len(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_ccm_context*)#1)->private_tag_len)"

pub inline fun mbedtls-ccm-contextp/private-tag-len(s: mbedtls-ccm-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ccm-context-ptrraw/private-tag-len.int

pub inline fun mbedtls-ccm-contextc/private-tag-len(^s: mbedtls-ccm-contextc<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-tag-len)

pub inline fun mbedtls-ccm-contextcb/private-tag-len(^s: mbedtls-ccm-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-tag-len)

pub inline extern mbedtls-ccm-context-ptrraw/set-private-tag-len(s: intptr_t, private-tag-len: ssize_t): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_tag_len = (size_t)#2"

pub inline fun mbedtls-ccm-contextp/set-private-tag-len(s: mbedtls-ccm-contextp, private-tag-len: int): ()
  s.mbedtls-ccm-context-ptrraw/set-private-tag-len(private-tag-len.ssize_t)

pub inline fun mbedtls-ccm-contextc/set-private-tag-len(^s: mbedtls-ccm-contextc<s::S>, private-tag-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-tag-len(private-tag-len))

pub inline fun mbedtls-ccm-contextcb/set-private-tag-len(^s: mbedtls-ccm-contextcb<s::S>, private-tag-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-tag-len(private-tag-len))

pub inline extern mbedtls-ccm-context-ptrraw/private-processed(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_ccm_context*)#1)->private_processed)"

pub inline fun mbedtls-ccm-contextp/private-processed(s: mbedtls-ccm-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ccm-context-ptrraw/private-processed.int

pub inline fun mbedtls-ccm-contextc/private-processed(^s: mbedtls-ccm-contextc<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-processed)

pub inline fun mbedtls-ccm-contextcb/private-processed(^s: mbedtls-ccm-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-processed)

pub inline extern mbedtls-ccm-context-ptrraw/set-private-processed(s: intptr_t, private-processed: ssize_t): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_processed = (size_t)#2"

pub inline fun mbedtls-ccm-contextp/set-private-processed(s: mbedtls-ccm-contextp, private-processed: int): ()
  s.mbedtls-ccm-context-ptrraw/set-private-processed(private-processed.ssize_t)

pub inline fun mbedtls-ccm-contextc/set-private-processed(^s: mbedtls-ccm-contextc<s::S>, private-processed: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-processed(private-processed))

pub inline fun mbedtls-ccm-contextcb/set-private-processed(^s: mbedtls-ccm-contextcb<s::S>, private-processed: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-processed(private-processed))

pub inline extern mbedtls-ccm-context-ptrraw/private-q(s: intptr_t): int32
  c inline "(unsigned int)(((struct mbedtls_ccm_context*)#1)->private_q)"

pub inline fun mbedtls-ccm-contextp/private-q(s: mbedtls-ccm-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ccm-context-ptrraw/private-q.int

pub inline fun mbedtls-ccm-contextc/private-q(^s: mbedtls-ccm-contextc<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-q)

pub inline fun mbedtls-ccm-contextcb/private-q(^s: mbedtls-ccm-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-q)

pub inline extern mbedtls-ccm-context-ptrraw/set-private-q(s: intptr_t, private-q: int32): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_q = (unsigned int)#2"

pub inline fun mbedtls-ccm-contextp/set-private-q(s: mbedtls-ccm-contextp, private-q: int): ()
  s.mbedtls-ccm-context-ptrraw/set-private-q(private-q.int32)

pub inline fun mbedtls-ccm-contextc/set-private-q(^s: mbedtls-ccm-contextc<s::S>, private-q: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-q(private-q))

pub inline fun mbedtls-ccm-contextcb/set-private-q(^s: mbedtls-ccm-contextcb<s::S>, private-q: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-q(private-q))

pub inline extern mbedtls-ccm-context-ptrraw/private-mode(s: intptr_t): int32
  c inline "(unsigned int)(((struct mbedtls_ccm_context*)#1)->private_mode)"

pub inline fun mbedtls-ccm-contextp/private-mode(s: mbedtls-ccm-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ccm-context-ptrraw/private-mode.int

pub inline fun mbedtls-ccm-contextc/private-mode(^s: mbedtls-ccm-contextc<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-mode)

pub inline fun mbedtls-ccm-contextcb/private-mode(^s: mbedtls-ccm-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-mode)

pub inline extern mbedtls-ccm-context-ptrraw/set-private-mode(s: intptr_t, private-mode: int32): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_mode = (unsigned int)#2"

pub inline fun mbedtls-ccm-contextp/set-private-mode(s: mbedtls-ccm-contextp, private-mode: int): ()
  s.mbedtls-ccm-context-ptrraw/set-private-mode(private-mode.int32)

pub inline fun mbedtls-ccm-contextc/set-private-mode(^s: mbedtls-ccm-contextc<s::S>, private-mode: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-mode(private-mode))

pub inline fun mbedtls-ccm-contextcb/set-private-mode(^s: mbedtls-ccm-contextcb<s::S>, private-mode: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-mode(private-mode))

pub inline extern mbedtls-ccm-context-ptrraw/private-state(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_ccm_context*)#1)->private_state)"

pub inline fun mbedtls-ccm-contextp/private-state(s: mbedtls-ccm-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-ccm-context-ptrraw/private-state.int

pub inline fun mbedtls-ccm-contextc/private-state(^s: mbedtls-ccm-contextc<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-state)

pub inline fun mbedtls-ccm-contextcb/private-state(^s: mbedtls-ccm-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-ccm-contextp/private-state)

pub inline extern mbedtls-ccm-context-ptrraw/set-private-state(s: intptr_t, private-state: int32): ()
  c inline "((struct mbedtls_ccm_context*)#1)->private_state = (int)#2"

pub inline fun mbedtls-ccm-contextp/set-private-state(s: mbedtls-ccm-contextp, private-state: int): ()
  s.mbedtls-ccm-context-ptrraw/set-private-state(private-state.int32)

pub inline fun mbedtls-ccm-contextc/set-private-state(^s: mbedtls-ccm-contextc<s::S>, private-state: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-state(private-state))

pub inline fun mbedtls-ccm-contextcb/set-private-state(^s: mbedtls-ccm-contextcb<s::S>, private-state: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-ccm-contextp/set-private-state(private-state))

pub struct mbedtls-poly1305-context
pub type mbedtls-poly1305-context-c
pub alias mbedtls-poly1305-contextp = c-pointer<mbedtls-poly1305-context-c>
pub alias mbedtls-poly1305-contextc<s::S> = owned-c<mbedtls-poly1305-context-c>
pub alias mbedtls-poly1305-contextcb<s::S> = borrowed-c<s,mbedtls-poly1305-context-c>
pub alias mbedtls-poly1305-contextca<s::S> = owned-c<c-array<mbedtls-poly1305-context-c>>

pub extern mbedtls-poly1305-context/size-of(c: c-null<mbedtls-poly1305-context-c>): int32
  c inline "sizeof(struct mbedtls_poly1305_context)"

pub fun mbedtls-poly1305-contextc(): mbedtls-poly1305-contextc<s::S>
  malloc(?size-of=mbedtls-poly1305-context/size-of)

pub fun mbedtls-poly1305-contextc-calloc(): mbedtls-poly1305-contextc<s::S>
  malloc-c(?size-of=mbedtls-poly1305-context/size-of)

pub fun mbedtls-poly1305-contextc-array(n: int): mbedtls-poly1305-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-poly1305-context/size-of)

pub fun mbedtls-poly1305-contextc-array-calloc(n: int): mbedtls-poly1305-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-poly1305-context/size-of)

pub inline extern mbedtls-poly1305-context-ptrraw/private-r(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_poly1305_context*)#1)->private_r)"

pub inline fun mbedtls-poly1305-contextp/private-r(s: mbedtls-poly1305-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-poly1305-context-ptrraw/private-r.cextern/ptr/carray

pub inline fun mbedtls-poly1305-contextc/private-r(^s: mbedtls-poly1305-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-poly1305-contextp/private-r)

pub inline fun mbedtls-poly1305-contextcb/private-r(^s: mbedtls-poly1305-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-poly1305-contextp/private-r)

pub inline extern mbedtls-poly1305-context-ptrraw/set-private-r(s: intptr_t, private-r: c-pointer<int>): ()
  c inline "((struct mbedtls_poly1305_context*)#1)->private_r = (int32_t*)#2"

pub inline fun mbedtls-poly1305-contextp/set-private-r(s: mbedtls-poly1305-contextp, private-r: c-array<int>): ()
  s.mbedtls-poly1305-context-ptrraw/set-private-r(private-r.cextern/carray/ptr)

pub inline fun mbedtls-poly1305-contextc/set-private-r(^s: mbedtls-poly1305-contextc<s::S>, private-r: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-contextp/set-private-r(private-r))

pub inline fun mbedtls-poly1305-contextcb/set-private-r(^s: mbedtls-poly1305-contextcb<s::S>, private-r: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-contextp/set-private-r(private-r))

pub inline extern mbedtls-poly1305-context-ptrraw/private-s(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_poly1305_context*)#1)->private_s)"

pub inline fun mbedtls-poly1305-contextp/private-s(s: mbedtls-poly1305-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-poly1305-context-ptrraw/private-s.cextern/ptr/carray

pub inline fun mbedtls-poly1305-contextc/private-s(^s: mbedtls-poly1305-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-poly1305-contextp/private-s)

pub inline fun mbedtls-poly1305-contextcb/private-s(^s: mbedtls-poly1305-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-poly1305-contextp/private-s)

pub inline extern mbedtls-poly1305-context-ptrraw/set-private-s(s: intptr_t, private-s: c-pointer<int>): ()
  c inline "((struct mbedtls_poly1305_context*)#1)->private_s = (int32_t*)#2"

pub inline fun mbedtls-poly1305-contextp/set-private-s(s: mbedtls-poly1305-contextp, private-s: c-array<int>): ()
  s.mbedtls-poly1305-context-ptrraw/set-private-s(private-s.cextern/carray/ptr)

pub inline fun mbedtls-poly1305-contextc/set-private-s(^s: mbedtls-poly1305-contextc<s::S>, private-s: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-contextp/set-private-s(private-s))

pub inline fun mbedtls-poly1305-contextcb/set-private-s(^s: mbedtls-poly1305-contextcb<s::S>, private-s: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-contextp/set-private-s(private-s))

pub inline extern mbedtls-poly1305-context-ptrraw/private-acc(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_poly1305_context*)#1)->private_acc)"

pub inline fun mbedtls-poly1305-contextp/private-acc(s: mbedtls-poly1305-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-poly1305-context-ptrraw/private-acc.cextern/ptr/carray

pub inline fun mbedtls-poly1305-contextc/private-acc(^s: mbedtls-poly1305-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-poly1305-contextp/private-acc)

pub inline fun mbedtls-poly1305-contextcb/private-acc(^s: mbedtls-poly1305-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-poly1305-contextp/private-acc)

pub inline extern mbedtls-poly1305-context-ptrraw/set-private-acc(s: intptr_t, private-acc: c-pointer<int>): ()
  c inline "((struct mbedtls_poly1305_context*)#1)->private_acc = (int32_t*)#2"

pub inline fun mbedtls-poly1305-contextp/set-private-acc(s: mbedtls-poly1305-contextp, private-acc: c-array<int>): ()
  s.mbedtls-poly1305-context-ptrraw/set-private-acc(private-acc.cextern/carray/ptr)

pub inline fun mbedtls-poly1305-contextc/set-private-acc(^s: mbedtls-poly1305-contextc<s::S>, private-acc: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-contextp/set-private-acc(private-acc))

pub inline fun mbedtls-poly1305-contextcb/set-private-acc(^s: mbedtls-poly1305-contextcb<s::S>, private-acc: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-contextp/set-private-acc(private-acc))

pub inline extern mbedtls-poly1305-context-ptrraw/private-queue(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_poly1305_context*)#1)->private_queue)"

pub inline fun mbedtls-poly1305-contextp/private-queue(s: mbedtls-poly1305-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-poly1305-context-ptrraw/private-queue.cextern/ptr/carray

pub inline fun mbedtls-poly1305-contextc/private-queue(^s: mbedtls-poly1305-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-poly1305-contextp/private-queue)

pub inline fun mbedtls-poly1305-contextcb/private-queue(^s: mbedtls-poly1305-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-poly1305-contextp/private-queue)

pub inline extern mbedtls-poly1305-context-ptrraw/set-private-queue(s: intptr_t, private-queue: c-pointer<int>): ()
  c inline "((struct mbedtls_poly1305_context*)#1)->private_queue = (uint8_t*)#2"

pub inline fun mbedtls-poly1305-contextp/set-private-queue(s: mbedtls-poly1305-contextp, private-queue: c-array<int>): ()
  s.mbedtls-poly1305-context-ptrraw/set-private-queue(private-queue.cextern/carray/ptr)

pub inline fun mbedtls-poly1305-contextc/set-private-queue(^s: mbedtls-poly1305-contextc<s::S>, private-queue: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-contextp/set-private-queue(private-queue))

pub inline fun mbedtls-poly1305-contextcb/set-private-queue(^s: mbedtls-poly1305-contextcb<s::S>, private-queue: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-contextp/set-private-queue(private-queue))

pub inline extern mbedtls-poly1305-context-ptrraw/private-queue-len(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_poly1305_context*)#1)->private_queue_len)"

pub inline fun mbedtls-poly1305-contextp/private-queue-len(s: mbedtls-poly1305-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-poly1305-context-ptrraw/private-queue-len.int

pub inline fun mbedtls-poly1305-contextc/private-queue-len(^s: mbedtls-poly1305-contextc<s::S>): <> int
  s.with-ptr(mbedtls-poly1305-contextp/private-queue-len)

pub inline fun mbedtls-poly1305-contextcb/private-queue-len(^s: mbedtls-poly1305-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-poly1305-contextp/private-queue-len)

pub inline extern mbedtls-poly1305-context-ptrraw/set-private-queue-len(s: intptr_t, private-queue-len: ssize_t): ()
  c inline "((struct mbedtls_poly1305_context*)#1)->private_queue_len = (size_t)#2"

pub inline fun mbedtls-poly1305-contextp/set-private-queue-len(s: mbedtls-poly1305-contextp, private-queue-len: int): ()
  s.mbedtls-poly1305-context-ptrraw/set-private-queue-len(private-queue-len.ssize_t)

pub inline fun mbedtls-poly1305-contextc/set-private-queue-len(^s: mbedtls-poly1305-contextc<s::S>, private-queue-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-contextp/set-private-queue-len(private-queue-len))

pub inline fun mbedtls-poly1305-contextcb/set-private-queue-len(^s: mbedtls-poly1305-contextcb<s::S>, private-queue-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-poly1305-contextp/set-private-queue-len(private-queue-len))

pub struct mbedtls-chacha20-context
pub type mbedtls-chacha20-context-c
pub alias mbedtls-chacha20-contextp = c-pointer<mbedtls-chacha20-context-c>
pub alias mbedtls-chacha20-contextc<s::S> = owned-c<mbedtls-chacha20-context-c>
pub alias mbedtls-chacha20-contextcb<s::S> = borrowed-c<s,mbedtls-chacha20-context-c>
pub alias mbedtls-chacha20-contextca<s::S> = owned-c<c-array<mbedtls-chacha20-context-c>>

pub extern mbedtls-chacha20-context/size-of(c: c-null<mbedtls-chacha20-context-c>): int32
  c inline "sizeof(struct mbedtls_chacha20_context)"

pub fun mbedtls-chacha20-contextc(): mbedtls-chacha20-contextc<s::S>
  malloc(?size-of=mbedtls-chacha20-context/size-of)

pub fun mbedtls-chacha20-contextc-calloc(): mbedtls-chacha20-contextc<s::S>
  malloc-c(?size-of=mbedtls-chacha20-context/size-of)

pub fun mbedtls-chacha20-contextc-array(n: int): mbedtls-chacha20-contextca<s::S>
  malloc(n.int32, ?size-of=mbedtls-chacha20-context/size-of)

pub fun mbedtls-chacha20-contextc-array-calloc(n: int): mbedtls-chacha20-contextca<s::S>
  malloc-c(n.int32, ?size-of=mbedtls-chacha20-context/size-of)

pub inline extern mbedtls-chacha20-context-ptrraw/private-state(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_chacha20_context*)#1)->private_state)"

pub inline fun mbedtls-chacha20-contextp/private-state(s: mbedtls-chacha20-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-chacha20-context-ptrraw/private-state.cextern/ptr/carray

pub inline fun mbedtls-chacha20-contextc/private-state(^s: mbedtls-chacha20-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-chacha20-contextp/private-state)

pub inline fun mbedtls-chacha20-contextcb/private-state(^s: mbedtls-chacha20-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-chacha20-contextp/private-state)

pub inline extern mbedtls-chacha20-context-ptrraw/set-private-state(s: intptr_t, private-state: c-pointer<int>): ()
  c inline "((struct mbedtls_chacha20_context*)#1)->private_state = (int32_t*)#2"

pub inline fun mbedtls-chacha20-contextp/set-private-state(s: mbedtls-chacha20-contextp, private-state: c-array<int>): ()
  s.mbedtls-chacha20-context-ptrraw/set-private-state(private-state.cextern/carray/ptr)

pub inline fun mbedtls-chacha20-contextc/set-private-state(^s: mbedtls-chacha20-contextc<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chacha20-contextp/set-private-state(private-state))

pub inline fun mbedtls-chacha20-contextcb/set-private-state(^s: mbedtls-chacha20-contextcb<s::S>, private-state: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chacha20-contextp/set-private-state(private-state))

pub inline extern mbedtls-chacha20-context-ptrraw/private-keystream8(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct mbedtls_chacha20_context*)#1)->private_keystream8)"

pub inline fun mbedtls-chacha20-contextp/private-keystream8(s: mbedtls-chacha20-contextp): <> c-array<int>
  s.cextern/c-pointer/ptr.mbedtls-chacha20-context-ptrraw/private-keystream8.cextern/ptr/carray

pub inline fun mbedtls-chacha20-contextc/private-keystream8(^s: mbedtls-chacha20-contextc<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-chacha20-contextp/private-keystream8)

pub inline fun mbedtls-chacha20-contextcb/private-keystream8(^s: mbedtls-chacha20-contextcb<s::S>): <> c-array<int>
  s.with-ptr(mbedtls-chacha20-contextp/private-keystream8)

pub inline extern mbedtls-chacha20-context-ptrraw/set-private-keystream8(s: intptr_t, private-keystream8: c-pointer<int>): ()
  c inline "((struct mbedtls_chacha20_context*)#1)->private_keystream8 = (uint8_t*)#2"

pub inline fun mbedtls-chacha20-contextp/set-private-keystream8(s: mbedtls-chacha20-contextp, private-keystream8: c-array<int>): ()
  s.mbedtls-chacha20-context-ptrraw/set-private-keystream8(private-keystream8.cextern/carray/ptr)

pub inline fun mbedtls-chacha20-contextc/set-private-keystream8(^s: mbedtls-chacha20-contextc<s::S>, private-keystream8: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chacha20-contextp/set-private-keystream8(private-keystream8))

pub inline fun mbedtls-chacha20-contextcb/set-private-keystream8(^s: mbedtls-chacha20-contextcb<s::S>, private-keystream8: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chacha20-contextp/set-private-keystream8(private-keystream8))

pub inline extern mbedtls-chacha20-context-ptrraw/private-keystream-bytes-used(s: intptr_t): ssize_t
  c inline "(size_t)(((struct mbedtls_chacha20_context*)#1)->private_keystream_bytes_used)"

pub inline fun mbedtls-chacha20-contextp/private-keystream-bytes-used(s: mbedtls-chacha20-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-chacha20-context-ptrraw/private-keystream-bytes-used.int

pub inline fun mbedtls-chacha20-contextc/private-keystream-bytes-used(^s: mbedtls-chacha20-contextc<s::S>): <> int
  s.with-ptr(mbedtls-chacha20-contextp/private-keystream-bytes-used)

pub inline fun mbedtls-chacha20-contextcb/private-keystream-bytes-used(^s: mbedtls-chacha20-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-chacha20-contextp/private-keystream-bytes-used)

pub inline extern mbedtls-chacha20-context-ptrraw/set-private-keystream-bytes-used(s: intptr_t, private-keystream-bytes-used: ssize_t): ()
  c inline "((struct mbedtls_chacha20_context*)#1)->private_keystream_bytes_used = (size_t)#2"

pub inline fun mbedtls-chacha20-contextp/set-private-keystream-bytes-used(s: mbedtls-chacha20-contextp, private-keystream-bytes-used: int): ()
  s.mbedtls-chacha20-context-ptrraw/set-private-keystream-bytes-used(private-keystream-bytes-used.ssize_t)

pub inline fun mbedtls-chacha20-contextc/set-private-keystream-bytes-used(^s: mbedtls-chacha20-contextc<s::S>, private-keystream-bytes-used: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chacha20-contextp/set-private-keystream-bytes-used(private-keystream-bytes-used))

pub inline fun mbedtls-chacha20-contextcb/set-private-keystream-bytes-used(^s: mbedtls-chacha20-contextcb<s::S>, private-keystream-bytes-used: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chacha20-contextp/set-private-keystream-bytes-used(private-keystream-bytes-used))

pub struct mbedtls-chachapoly-context
  // < The ChaCha20 context.
  private-chacha20-ctx: mbedtls-chacha20-context-c
  // < The Poly1305 context.
  private-poly1305-ctx: mbedtls-poly1305-context-c
  // < The length (bytes) of the Additional Authenticated Data.
  private-aad-len: int
  // < The length (bytes) of the ciphertext.
  private-ciphertext-len: int
  // < The current state of the context.
  private-state: int
  // < Cipher mode (encrypt or decrypt).
  private-mode: int

pub type mbedtls-chachapoly-context-c
pub alias mbedtls-chachapoly-contextp = c-pointer<mbedtls-chachapoly-context-c>
pub alias mbedtls-chachapoly-contextc = owned-c<mbedtls-chachapoly-context-c>
pub alias mbedtls-chachapoly-contextcb<s::S> = borrowed-c<s,mbedtls-chachapoly-context-c>
pub alias mbedtls-chachapoly-contextca = owned-c<c-array<mbedtls-chachapoly-context-c>>

pub extern mbedtls-chachapoly-context/size-of(c: c-null<mbedtls-chachapoly-context-c>): int32
  c inline "sizeof(struct mbedtls_chachapoly_context)"

pub fun mbedtls-chachapoly-contextc(): mbedtls-chachapoly-contextc
  malloc(?size-of=mbedtls-chachapoly-context/size-of)

pub fun mbedtls-chachapoly-contextc-calloc(): mbedtls-chachapoly-contextc
  malloc-c(?size-of=mbedtls-chachapoly-context/size-of)

pub fun mbedtls-chachapoly-contextc-array(n: int): mbedtls-chachapoly-contextca
  malloc(n.int32, ?size-of=mbedtls-chachapoly-context/size-of)

pub fun mbedtls-chachapoly-contextc-array-calloc(n: int): mbedtls-chachapoly-contextca
  malloc-c(n.int32, ?size-of=mbedtls-chachapoly-context/size-of)

pub inline extern mbedtls-chachapoly-context-ptrraw/private-aad-len(s: intptr_t): int64
  c inline "(int64_t)(((struct mbedtls_chachapoly_context*)#1)->private_aad_len)"

pub inline fun mbedtls-chachapoly-contextp/private-aad-len(s: mbedtls-chachapoly-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-chachapoly-context-ptrraw/private-aad-len.int

pub inline fun mbedtls-chachapoly-contextc/private-aad-len(^s: mbedtls-chachapoly-contextc): <> int
  s.with-ptr(mbedtls-chachapoly-contextp/private-aad-len)

pub inline fun mbedtls-chachapoly-contextcb/private-aad-len(^s: mbedtls-chachapoly-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-chachapoly-contextp/private-aad-len)

pub inline extern mbedtls-chachapoly-context-ptrraw/set-private-aad-len(s: intptr_t, private-aad-len: int64): ()
  c inline "((struct mbedtls_chachapoly_context*)#1)->private_aad_len = (int64_t)#2"

pub inline fun mbedtls-chachapoly-contextp/set-private-aad-len(s: mbedtls-chachapoly-contextp, private-aad-len: int): ()
  s.mbedtls-chachapoly-context-ptrraw/set-private-aad-len(private-aad-len.int64)

pub inline fun mbedtls-chachapoly-contextc/set-private-aad-len(^s: mbedtls-chachapoly-contextc, private-aad-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-contextp/set-private-aad-len(private-aad-len))

pub inline fun mbedtls-chachapoly-contextcb/set-private-aad-len(^s: mbedtls-chachapoly-contextcb<s::S>, private-aad-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-contextp/set-private-aad-len(private-aad-len))

pub inline extern mbedtls-chachapoly-context-ptrraw/private-ciphertext-len(s: intptr_t): int64
  c inline "(int64_t)(((struct mbedtls_chachapoly_context*)#1)->private_ciphertext_len)"

pub inline fun mbedtls-chachapoly-contextp/private-ciphertext-len(s: mbedtls-chachapoly-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-chachapoly-context-ptrraw/private-ciphertext-len.int

pub inline fun mbedtls-chachapoly-contextc/private-ciphertext-len(^s: mbedtls-chachapoly-contextc): <> int
  s.with-ptr(mbedtls-chachapoly-contextp/private-ciphertext-len)

pub inline fun mbedtls-chachapoly-contextcb/private-ciphertext-len(^s: mbedtls-chachapoly-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-chachapoly-contextp/private-ciphertext-len)

pub inline extern mbedtls-chachapoly-context-ptrraw/set-private-ciphertext-len(s: intptr_t, private-ciphertext-len: int64): ()
  c inline "((struct mbedtls_chachapoly_context*)#1)->private_ciphertext_len = (int64_t)#2"

pub inline fun mbedtls-chachapoly-contextp/set-private-ciphertext-len(s: mbedtls-chachapoly-contextp, private-ciphertext-len: int): ()
  s.mbedtls-chachapoly-context-ptrraw/set-private-ciphertext-len(private-ciphertext-len.int64)

pub inline fun mbedtls-chachapoly-contextc/set-private-ciphertext-len(^s: mbedtls-chachapoly-contextc, private-ciphertext-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-contextp/set-private-ciphertext-len(private-ciphertext-len))

pub inline fun mbedtls-chachapoly-contextcb/set-private-ciphertext-len(^s: mbedtls-chachapoly-contextcb<s::S>, private-ciphertext-len: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-contextp/set-private-ciphertext-len(private-ciphertext-len))

pub inline extern mbedtls-chachapoly-context-ptrraw/private-state(s: intptr_t): int32
  c inline "(int)(((struct mbedtls_chachapoly_context*)#1)->private_state)"

pub inline fun mbedtls-chachapoly-contextp/private-state(s: mbedtls-chachapoly-contextp): <> int
  s.cextern/c-pointer/ptr.mbedtls-chachapoly-context-ptrraw/private-state.int

pub inline fun mbedtls-chachapoly-contextc/private-state(^s: mbedtls-chachapoly-contextc): <> int
  s.with-ptr(mbedtls-chachapoly-contextp/private-state)

pub inline fun mbedtls-chachapoly-contextcb/private-state(^s: mbedtls-chachapoly-contextcb<s::S>): <> int
  s.with-ptr(mbedtls-chachapoly-contextp/private-state)

pub inline extern mbedtls-chachapoly-context-ptrraw/set-private-state(s: intptr_t, private-state: int32): ()
  c inline "((struct mbedtls_chachapoly_context*)#1)->private_state = (int)#2"

pub inline fun mbedtls-chachapoly-contextp/set-private-state(s: mbedtls-chachapoly-contextp, private-state: int): ()
  s.mbedtls-chachapoly-context-ptrraw/set-private-state(private-state.int32)

pub inline fun mbedtls-chachapoly-contextc/set-private-state(^s: mbedtls-chachapoly-contextc, private-state: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-contextp/set-private-state(private-state))

pub inline fun mbedtls-chachapoly-contextcb/set-private-state(^s: mbedtls-chachapoly-contextcb<s::S>, private-state: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-contextp/set-private-state(private-state))

pub inline extern mbedtls-chachapoly-context-ptrraw/private-mode(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_chachapoly_context*)#1)->private_mode)"

pub inline fun mbedtls-chachapoly-contextp/private-mode(s: mbedtls-chachapoly-contextp): <exn> mbedtls-chachapoly-mode-t
  s.cextern/c-pointer/ptr.mbedtls-chachapoly-context-ptrraw/private-mode.int/mbedtls-chachapoly-mode-t

pub inline fun mbedtls-chachapoly-contextc/private-mode(^s: mbedtls-chachapoly-contextc): <exn> mbedtls-chachapoly-mode-t
  s.with-ptr(mbedtls-chachapoly-contextp/private-mode)

pub inline fun mbedtls-chachapoly-contextcb/private-mode(^s: mbedtls-chachapoly-contextcb<s::S>): <exn> mbedtls-chachapoly-mode-t
  s.with-ptr(mbedtls-chachapoly-contextp/private-mode)

pub inline extern mbedtls-chachapoly-context-ptrraw/set-private-mode(s: intptr_t, private-mode: int32): ()
  c inline "((struct mbedtls_chachapoly_context*)#1)->private_mode = (int32_t)#2"

pub inline fun mbedtls-chachapoly-contextp/set-private-mode(s: mbedtls-chachapoly-contextp, private-mode: mbedtls-chachapoly-mode-t): ()
  s.mbedtls-chachapoly-context-ptrraw/set-private-mode(private-mode.mbedtls-chachapoly-mode-t/int)

pub inline fun mbedtls-chachapoly-contextc/set-private-mode(^s: mbedtls-chachapoly-contextc, private-mode: mbedtls-chachapoly-mode-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-contextp/set-private-mode(private-mode))

pub inline fun mbedtls-chachapoly-contextcb/set-private-mode(^s: mbedtls-chachapoly-contextcb<s::S>, private-mode: mbedtls-chachapoly-mode-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-chachapoly-contextp/set-private-mode(private-mode))

pub struct mbedtls-psa-aead-operation-t
pub type mbedtls-psa-aead-operation-t-c
pub alias mbedtls-psa-aead-operation-tp = c-pointer<mbedtls-psa-aead-operation-t-c>
pub alias mbedtls-psa-aead-operation-tc = owned-c<mbedtls-psa-aead-operation-t-c>
pub alias mbedtls-psa-aead-operation-tcb<s::S> = borrowed-c<s,mbedtls-psa-aead-operation-t-c>
pub alias mbedtls-psa-aead-operation-tca = owned-c<c-array<mbedtls-psa-aead-operation-t-c>>

pub struct psa-hkdf-key-derivation-t
pub type psa-hkdf-key-derivation-t-c
pub alias psa-hkdf-key-derivation-tp = c-pointer<psa-hkdf-key-derivation-t-c>
pub alias psa-hkdf-key-derivation-tc = owned-c<psa-hkdf-key-derivation-t-c>
pub alias psa-hkdf-key-derivation-tcb<s::S> = borrowed-c<s,psa-hkdf-key-derivation-t-c>
pub alias psa-hkdf-key-derivation-tca = owned-c<c-array<psa-hkdf-key-derivation-t-c>>

pub struct psa-tls12-ecjpake-to-pms-t
pub type psa-tls12-ecjpake-to-pms-t-c
pub alias psa-tls12-ecjpake-to-pms-tp = c-pointer<psa-tls12-ecjpake-to-pms-t-c>
pub alias psa-tls12-ecjpake-to-pms-tc<s::S> = owned-c<psa-tls12-ecjpake-to-pms-t-c>
pub alias psa-tls12-ecjpake-to-pms-tcb<s::S> = borrowed-c<s,psa-tls12-ecjpake-to-pms-t-c>
pub alias psa-tls12-ecjpake-to-pms-tca<s::S> = owned-c<c-array<psa-tls12-ecjpake-to-pms-t-c>>

pub extern psa-tls12-ecjpake-to-pms-t/size-of(c: c-null<psa-tls12-ecjpake-to-pms-t-c>): int32
  c inline "sizeof(psa_tls12_ecjpake_to_pms_t)"

pub fun psa-tls12-ecjpake-to-pms-tc(): psa-tls12-ecjpake-to-pms-tc<s::S>
  malloc(?size-of=psa-tls12-ecjpake-to-pms-t/size-of)

pub fun psa-tls12-ecjpake-to-pms-tc-calloc(): psa-tls12-ecjpake-to-pms-tc<s::S>
  malloc-c(?size-of=psa-tls12-ecjpake-to-pms-t/size-of)

pub fun psa-tls12-ecjpake-to-pms-tc-array(n: int): psa-tls12-ecjpake-to-pms-tca<s::S>
  malloc(n.int32, ?size-of=psa-tls12-ecjpake-to-pms-t/size-of)

pub fun psa-tls12-ecjpake-to-pms-tc-array-calloc(n: int): psa-tls12-ecjpake-to-pms-tca<s::S>
  malloc-c(n.int32, ?size-of=psa-tls12-ecjpake-to-pms-t/size-of)

pub inline extern psa-tls12-ecjpake-to-pms-t-ptrraw/private-data(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((psa_tls12_ecjpake_to_pms_t*)#1)->private_data)"

pub inline fun psa-tls12-ecjpake-to-pms-tp/private-data(s: psa-tls12-ecjpake-to-pms-tp): <> c-array<int>
  s.cextern/c-pointer/ptr.psa-tls12-ecjpake-to-pms-t-ptrraw/private-data.cextern/ptr/carray

pub inline fun psa-tls12-ecjpake-to-pms-tc/private-data(^s: psa-tls12-ecjpake-to-pms-tc<s::S>): <> c-array<int>
  s.with-ptr(psa-tls12-ecjpake-to-pms-tp/private-data)

pub inline fun psa-tls12-ecjpake-to-pms-tcb/private-data(^s: psa-tls12-ecjpake-to-pms-tcb<s::S>): <> c-array<int>
  s.with-ptr(psa-tls12-ecjpake-to-pms-tp/private-data)

pub inline extern psa-tls12-ecjpake-to-pms-t-ptrraw/set-private-data(s: intptr_t, private-data: c-pointer<int>): ()
  c inline "((psa_tls12_ecjpake_to_pms_t*)#1)->private_data = (uint8_t*)#2"

pub inline fun psa-tls12-ecjpake-to-pms-tp/set-private-data(s: psa-tls12-ecjpake-to-pms-tp, private-data: c-array<int>): ()
  s.psa-tls12-ecjpake-to-pms-t-ptrraw/set-private-data(private-data.cextern/carray/ptr)

pub inline fun psa-tls12-ecjpake-to-pms-tc/set-private-data(^s: psa-tls12-ecjpake-to-pms-tc<s::S>, private-data: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-ecjpake-to-pms-tp/set-private-data(private-data))

pub inline fun psa-tls12-ecjpake-to-pms-tcb/set-private-data(^s: psa-tls12-ecjpake-to-pms-tcb<s::S>, private-data: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-ecjpake-to-pms-tp/set-private-data(private-data))

pub struct psa-tls12-prf-key-derivation-s
pub type psa-tls12-prf-key-derivation-s-c
pub alias psa-tls12-prf-key-derivation-sp = c-pointer<psa-tls12-prf-key-derivation-s-c>
pub alias psa-tls12-prf-key-derivation-sc<s::S> = owned-c<psa-tls12-prf-key-derivation-s-c>
pub alias psa-tls12-prf-key-derivation-scb<s::S> = borrowed-c<s,psa-tls12-prf-key-derivation-s-c>
pub alias psa-tls12-prf-key-derivation-sca<s::S> = owned-c<c-array<psa-tls12-prf-key-derivation-s-c>>

pub extern psa-tls12-prf-key-derivation-s/size-of(c: c-null<psa-tls12-prf-key-derivation-s-c>): int32
  c inline "sizeof(struct psa_tls12_prf_key_derivation_s)"

pub fun psa-tls12-prf-key-derivation-sc(): psa-tls12-prf-key-derivation-sc<s::S>
  malloc(?size-of=psa-tls12-prf-key-derivation-s/size-of)

pub fun psa-tls12-prf-key-derivation-sc-calloc(): psa-tls12-prf-key-derivation-sc<s::S>
  malloc-c(?size-of=psa-tls12-prf-key-derivation-s/size-of)

pub fun psa-tls12-prf-key-derivation-sc-array(n: int): psa-tls12-prf-key-derivation-sca<s::S>
  malloc(n.int32, ?size-of=psa-tls12-prf-key-derivation-s/size-of)

pub fun psa-tls12-prf-key-derivation-sc-array-calloc(n: int): psa-tls12-prf-key-derivation-sca<s::S>
  malloc-c(n.int32, ?size-of=psa-tls12-prf-key-derivation-s/size-of)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-left-in-block(s: intptr_t): int8
  c inline "(uint8_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_left_in_block)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-left-in-block(s: psa-tls12-prf-key-derivation-sp): <> int
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-left-in-block.int

pub inline fun psa-tls12-prf-key-derivation-sc/private-left-in-block(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-left-in-block)

pub inline fun psa-tls12-prf-key-derivation-scb/private-left-in-block(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-left-in-block)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-left-in-block(s: intptr_t, private-left-in-block: int8): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_left_in_block = (uint8_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-left-in-block(s: psa-tls12-prf-key-derivation-sp, private-left-in-block: int): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-left-in-block(private-left-in-block.int8)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-left-in-block(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-left-in-block: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-left-in-block(private-left-in-block))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-left-in-block(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-left-in-block: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-left-in-block(private-left-in-block))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-block-number(s: intptr_t): int8
  c inline "(uint8_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_block_number)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-block-number(s: psa-tls12-prf-key-derivation-sp): <> int
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-block-number.int

pub inline fun psa-tls12-prf-key-derivation-sc/private-block-number(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-block-number)

pub inline fun psa-tls12-prf-key-derivation-scb/private-block-number(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-block-number)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-block-number(s: intptr_t, private-block-number: int8): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_block_number = (uint8_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-block-number(s: psa-tls12-prf-key-derivation-sp, private-block-number: int): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-block-number(private-block-number.int8)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-block-number(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-block-number: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-block-number(private-block-number))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-block-number(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-block-number: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-block-number(private-block-number))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-state(s: intptr_t): int32
  c inline "(int32_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_state)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-state(s: psa-tls12-prf-key-derivation-sp): <exn> psa-tls12-prf-key-derivation-state-t
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-state.int/psa-tls12-prf-key-derivation-state-t

pub inline fun psa-tls12-prf-key-derivation-sc/private-state(^s: psa-tls12-prf-key-derivation-sc<s::S>): <exn> psa-tls12-prf-key-derivation-state-t
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-state)

pub inline fun psa-tls12-prf-key-derivation-scb/private-state(^s: psa-tls12-prf-key-derivation-scb<s::S>): <exn> psa-tls12-prf-key-derivation-state-t
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-state)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-state(s: intptr_t, private-state: int32): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_state = (int32_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-state(s: psa-tls12-prf-key-derivation-sp, private-state: psa-tls12-prf-key-derivation-state-t): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-state(private-state.psa-tls12-prf-key-derivation-state-t/int)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-state(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-state: psa-tls12-prf-key-derivation-state-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-state(private-state))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-state(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-state: psa-tls12-prf-key-derivation-state-t): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-state(private-state))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-secret(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_secret)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-secret(s: psa-tls12-prf-key-derivation-sp): <> c-pointer<int>
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-secret

pub inline fun psa-tls12-prf-key-derivation-sc/private-secret(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> c-pointer<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-secret)

pub inline fun psa-tls12-prf-key-derivation-scb/private-secret(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> c-pointer<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-secret)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-secret(s: intptr_t, private-secret: c-pointer<int>): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_secret = (uint8_t*)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-secret(s: psa-tls12-prf-key-derivation-sp, private-secret: c-pointer<int>): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-secret(private-secret)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-secret(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-secret: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-secret(private-secret))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-secret(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-secret: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-secret(private-secret))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-secret-length(s: intptr_t): ssize_t
  c inline "(size_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_secret_length)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-secret-length(s: psa-tls12-prf-key-derivation-sp): <> int
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-secret-length.int

pub inline fun psa-tls12-prf-key-derivation-sc/private-secret-length(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-secret-length)

pub inline fun psa-tls12-prf-key-derivation-scb/private-secret-length(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-secret-length)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-secret-length(s: intptr_t, private-secret-length: ssize_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_secret_length = (size_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-secret-length(s: psa-tls12-prf-key-derivation-sp, private-secret-length: int): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-secret-length(private-secret-length.ssize_t)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-secret-length(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-secret-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-secret-length(private-secret-length))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-secret-length(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-secret-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-secret-length(private-secret-length))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-seed(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_seed)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-seed(s: psa-tls12-prf-key-derivation-sp): <> c-pointer<int>
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-seed

pub inline fun psa-tls12-prf-key-derivation-sc/private-seed(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> c-pointer<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-seed)

pub inline fun psa-tls12-prf-key-derivation-scb/private-seed(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> c-pointer<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-seed)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-seed(s: intptr_t, private-seed: c-pointer<int>): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_seed = (uint8_t*)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-seed(s: psa-tls12-prf-key-derivation-sp, private-seed: c-pointer<int>): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-seed(private-seed)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-seed(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-seed: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-seed(private-seed))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-seed(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-seed: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-seed(private-seed))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-seed-length(s: intptr_t): ssize_t
  c inline "(size_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_seed_length)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-seed-length(s: psa-tls12-prf-key-derivation-sp): <> int
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-seed-length.int

pub inline fun psa-tls12-prf-key-derivation-sc/private-seed-length(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-seed-length)

pub inline fun psa-tls12-prf-key-derivation-scb/private-seed-length(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-seed-length)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-seed-length(s: intptr_t, private-seed-length: ssize_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_seed_length = (size_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-seed-length(s: psa-tls12-prf-key-derivation-sp, private-seed-length: int): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-seed-length(private-seed-length.ssize_t)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-seed-length(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-seed-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-seed-length(private-seed-length))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-seed-length(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-seed-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-seed-length(private-seed-length))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-label(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_label)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-label(s: psa-tls12-prf-key-derivation-sp): <> c-pointer<int>
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-label

pub inline fun psa-tls12-prf-key-derivation-sc/private-label(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> c-pointer<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-label)

pub inline fun psa-tls12-prf-key-derivation-scb/private-label(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> c-pointer<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-label)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-label(s: intptr_t, private-label: c-pointer<int>): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_label = (uint8_t*)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-label(s: psa-tls12-prf-key-derivation-sp, private-label: c-pointer<int>): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-label(private-label)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-label(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-label: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-label(private-label))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-label(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-label: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-label(private-label))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-label-length(s: intptr_t): ssize_t
  c inline "(size_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_label_length)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-label-length(s: psa-tls12-prf-key-derivation-sp): <> int
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-label-length.int

pub inline fun psa-tls12-prf-key-derivation-sc/private-label-length(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-label-length)

pub inline fun psa-tls12-prf-key-derivation-scb/private-label-length(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-label-length)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-label-length(s: intptr_t, private-label-length: ssize_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_label_length = (size_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-label-length(s: psa-tls12-prf-key-derivation-sp, private-label-length: int): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-label-length(private-label-length.ssize_t)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-label-length(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-label-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-label-length(private-label-length))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-label-length(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-label-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-label-length(private-label-length))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-other-secret(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_other_secret)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-other-secret(s: psa-tls12-prf-key-derivation-sp): <> c-pointer<int>
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-other-secret

pub inline fun psa-tls12-prf-key-derivation-sc/private-other-secret(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> c-pointer<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-other-secret)

pub inline fun psa-tls12-prf-key-derivation-scb/private-other-secret(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> c-pointer<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-other-secret)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-other-secret(s: intptr_t, private-other-secret: c-pointer<int>): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_other_secret = (uint8_t*)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-other-secret(s: psa-tls12-prf-key-derivation-sp, private-other-secret: c-pointer<int>): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-other-secret(private-other-secret)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-other-secret(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-other-secret: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-other-secret(private-other-secret))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-other-secret(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-other-secret: c-pointer<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-other-secret(private-other-secret))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-other-secret-length(s: intptr_t): ssize_t
  c inline "(size_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_other_secret_length)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-other-secret-length(s: psa-tls12-prf-key-derivation-sp): <> int
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-other-secret-length.int

pub inline fun psa-tls12-prf-key-derivation-sc/private-other-secret-length(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-other-secret-length)

pub inline fun psa-tls12-prf-key-derivation-scb/private-other-secret-length(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> int
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-other-secret-length)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-other-secret-length(s: intptr_t, private-other-secret-length: ssize_t): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_other_secret_length = (size_t)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-other-secret-length(s: psa-tls12-prf-key-derivation-sp, private-other-secret-length: int): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-other-secret-length(private-other-secret-length.ssize_t)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-other-secret-length(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-other-secret-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-other-secret-length(private-other-secret-length))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-other-secret-length(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-other-secret-length: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-other-secret-length(private-other-secret-length))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-ai(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_Ai)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-ai(s: psa-tls12-prf-key-derivation-sp): <> c-array<int>
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-ai.cextern/ptr/carray

pub inline fun psa-tls12-prf-key-derivation-sc/private-ai(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> c-array<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-ai)

pub inline fun psa-tls12-prf-key-derivation-scb/private-ai(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> c-array<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-ai)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-ai(s: intptr_t, private-ai: c-pointer<int>): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_Ai = (uint8_t*)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-ai(s: psa-tls12-prf-key-derivation-sp, private-ai: c-array<int>): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-ai(private-ai.cextern/carray/ptr)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-ai(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-ai: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-ai(private-ai))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-ai(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-ai: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-ai(private-ai))

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/private-output-block(s: intptr_t): c-pointer<int>
  c inline "(intptr_t)(((struct psa_tls12_prf_key_derivation_s*)#1)->private_output_block)"

pub inline fun psa-tls12-prf-key-derivation-sp/private-output-block(s: psa-tls12-prf-key-derivation-sp): <> c-array<int>
  s.cextern/c-pointer/ptr.psa-tls12-prf-key-derivation-s-ptrraw/private-output-block.cextern/ptr/carray

pub inline fun psa-tls12-prf-key-derivation-sc/private-output-block(^s: psa-tls12-prf-key-derivation-sc<s::S>): <> c-array<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-output-block)

pub inline fun psa-tls12-prf-key-derivation-scb/private-output-block(^s: psa-tls12-prf-key-derivation-scb<s::S>): <> c-array<int>
  s.with-ptr(psa-tls12-prf-key-derivation-sp/private-output-block)

pub inline extern psa-tls12-prf-key-derivation-s-ptrraw/set-private-output-block(s: intptr_t, private-output-block: c-pointer<int>): ()
  c inline "((struct psa_tls12_prf_key_derivation_s*)#1)->private_output_block = (uint8_t*)#2"

pub inline fun psa-tls12-prf-key-derivation-sp/set-private-output-block(s: psa-tls12-prf-key-derivation-sp, private-output-block: c-array<int>): ()
  s.psa-tls12-prf-key-derivation-s-ptrraw/set-private-output-block(private-output-block.cextern/carray/ptr)

pub inline fun psa-tls12-prf-key-derivation-sc/set-private-output-block(^s: psa-tls12-prf-key-derivation-sc<s::S>, private-output-block: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-output-block(private-output-block))

pub inline fun psa-tls12-prf-key-derivation-scb/set-private-output-block(^s: psa-tls12-prf-key-derivation-scb<s::S>, private-output-block: c-array<int>): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.psa-tls12-prf-key-derivation-sp/set-private-output-block(private-output-block))

type mbedtls-key-exchange-type-t
  MBEDTLS_KEY_EXCHANGE_NONE
  MBEDTLS_KEY_EXCHANGE_RSA
  MBEDTLS_KEY_EXCHANGE_DHE_RSA
  MBEDTLS_KEY_EXCHANGE_ECDHE_RSA
  MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA
  MBEDTLS_KEY_EXCHANGE_PSK
  MBEDTLS_KEY_EXCHANGE_DHE_PSK
  MBEDTLS_KEY_EXCHANGE_RSA_PSK
  MBEDTLS_KEY_EXCHANGE_ECDHE_PSK
  MBEDTLS_KEY_EXCHANGE_ECDH_RSA
  MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA
  MBEDTLS_KEY_EXCHANGE_ECJPAKE

pub fun mbedtls-key-exchange-type-t/int(i: mbedtls-key-exchange-type-t): int32
  match i
    MBEDTLS_KEY_EXCHANGE_NONE -> 0.int32
    MBEDTLS_KEY_EXCHANGE_RSA -> 1.int32
    MBEDTLS_KEY_EXCHANGE_DHE_RSA -> 2.int32
    MBEDTLS_KEY_EXCHANGE_ECDHE_RSA -> 3.int32
    MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA -> 4.int32
    MBEDTLS_KEY_EXCHANGE_PSK -> 5.int32
    MBEDTLS_KEY_EXCHANGE_DHE_PSK -> 6.int32
    MBEDTLS_KEY_EXCHANGE_RSA_PSK -> 7.int32
    MBEDTLS_KEY_EXCHANGE_ECDHE_PSK -> 8.int32
    MBEDTLS_KEY_EXCHANGE_ECDH_RSA -> 9.int32
    MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA -> 10.int32
    MBEDTLS_KEY_EXCHANGE_ECJPAKE -> 11.int32

pub fun int/mbedtls-key-exchange-type-t(i: int32): exn mbedtls-key-exchange-type-t
  match i.int
    0 -> MBEDTLS_KEY_EXCHANGE_NONE
    1 -> MBEDTLS_KEY_EXCHANGE_RSA
    2 -> MBEDTLS_KEY_EXCHANGE_DHE_RSA
    3 -> MBEDTLS_KEY_EXCHANGE_ECDHE_RSA
    4 -> MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA
    5 -> MBEDTLS_KEY_EXCHANGE_PSK
    6 -> MBEDTLS_KEY_EXCHANGE_DHE_PSK
    7 -> MBEDTLS_KEY_EXCHANGE_RSA_PSK
    8 -> MBEDTLS_KEY_EXCHANGE_ECDHE_PSK
    9 -> MBEDTLS_KEY_EXCHANGE_ECDH_RSA
    10 -> MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA
    11 -> MBEDTLS_KEY_EXCHANGE_ECJPAKE

// Security profile for certificate verification.
// 
// All lists are bitfields, built by ORing flags from MBEDTLS_X509_ID_FLAG().
// 
// The fields of this structure are part of the public API and can be
// manipulated directly by applications. Future versions of the library may
// add extra fields or reorder existing fields.
// 
// You can create custom profiles by starting from a copy of
// an existing profile, such as mbedtls_x509_crt_profile_default or
// mbedtls_x509_ctr_profile_none and then tune it to your needs.
// 
// For example to allow SHA-224 in addition to the default:
// 
// mbedtls_x509_crt_profile my_profile = mbedtls_x509_crt_profile_default;
// my_profile.allowed_mds |= MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA224 );
// 
// Or to allow only RSA-3072+ with SHA-256:
// 
// mbedtls_x509_crt_profile my_profile = mbedtls_x509_crt_profile_none;
// my_profile.allowed_mds = MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA256 );
// my_profile.allowed_pks = MBEDTLS_X509_ID_FLAG( MBEDTLS_PK_RSA );
// my_profile.rsa_min_bitlen = 3072;
pub struct mbedtls-x509-crt-profile
  // < MDs for signatures
  allowed-mds: int
  // < PK algs for public keys;
  // this applies to all certificates
  // in the provided chain.
  allowed-pks: int
  // < Elliptic curves for ECDSA
  allowed-curves: int
  // < Minimum size for RSA keys
  rsa-min-bitlen: int

pub type mbedtls-x509-crt-profile-c
pub alias mbedtls-x509-crt-profilep = c-pointer<mbedtls-x509-crt-profile-c>
pub alias mbedtls-x509-crt-profilec = owned-c<mbedtls-x509-crt-profile-c>
pub alias mbedtls-x509-crt-profilecb<s::S> = borrowed-c<s,mbedtls-x509-crt-profile-c>
pub alias mbedtls-x509-crt-profileca = owned-c<c-array<mbedtls-x509-crt-profile-c>>

pub extern mbedtls-x509-crt-profile/size-of(c: c-null<mbedtls-x509-crt-profile-c>): int32
  c inline "sizeof(struct mbedtls_x509_crt_profile)"

pub fun mbedtls-x509-crt-profilec(): mbedtls-x509-crt-profilec
  malloc(?size-of=mbedtls-x509-crt-profile/size-of)

pub fun mbedtls-x509-crt-profilec-calloc(): mbedtls-x509-crt-profilec
  malloc-c(?size-of=mbedtls-x509-crt-profile/size-of)

pub fun mbedtls-x509-crt-profilec-array(n: int): mbedtls-x509-crt-profileca
  malloc(n.int32, ?size-of=mbedtls-x509-crt-profile/size-of)

pub fun mbedtls-x509-crt-profilec-array-calloc(n: int): mbedtls-x509-crt-profileca
  malloc-c(n.int32, ?size-of=mbedtls-x509-crt-profile/size-of)

pub inline extern mbedtls-x509-crt-profile-ptrraw/allowed-mds(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_x509_crt_profile*)#1)->allowed_mds)"

pub inline fun mbedtls-x509-crt-profilep/allowed-mds(s: mbedtls-x509-crt-profilep): <> int
  s.cextern/c-pointer/ptr.mbedtls-x509-crt-profile-ptrraw/allowed-mds.int

pub inline fun mbedtls-x509-crt-profilec/allowed-mds(^s: mbedtls-x509-crt-profilec): <> int
  s.with-ptr(mbedtls-x509-crt-profilep/allowed-mds)

pub inline fun mbedtls-x509-crt-profilecb/allowed-mds(^s: mbedtls-x509-crt-profilecb<s::S>): <> int
  s.with-ptr(mbedtls-x509-crt-profilep/allowed-mds)

pub inline extern mbedtls-x509-crt-profile-ptrraw/set-allowed-mds(s: intptr_t, allowed-mds: int32): ()
  c inline "((struct mbedtls_x509_crt_profile*)#1)->allowed_mds = (int32_t)#2"

pub inline fun mbedtls-x509-crt-profilep/set-allowed-mds(s: mbedtls-x509-crt-profilep, allowed-mds: int): ()
  s.mbedtls-x509-crt-profile-ptrraw/set-allowed-mds(allowed-mds.int32)

pub inline fun mbedtls-x509-crt-profilec/set-allowed-mds(^s: mbedtls-x509-crt-profilec, allowed-mds: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profilep/set-allowed-mds(allowed-mds))

pub inline fun mbedtls-x509-crt-profilecb/set-allowed-mds(^s: mbedtls-x509-crt-profilecb<s::S>, allowed-mds: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profilep/set-allowed-mds(allowed-mds))

pub inline extern mbedtls-x509-crt-profile-ptrraw/allowed-pks(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_x509_crt_profile*)#1)->allowed_pks)"

pub inline fun mbedtls-x509-crt-profilep/allowed-pks(s: mbedtls-x509-crt-profilep): <> int
  s.cextern/c-pointer/ptr.mbedtls-x509-crt-profile-ptrraw/allowed-pks.int

pub inline fun mbedtls-x509-crt-profilec/allowed-pks(^s: mbedtls-x509-crt-profilec): <> int
  s.with-ptr(mbedtls-x509-crt-profilep/allowed-pks)

pub inline fun mbedtls-x509-crt-profilecb/allowed-pks(^s: mbedtls-x509-crt-profilecb<s::S>): <> int
  s.with-ptr(mbedtls-x509-crt-profilep/allowed-pks)

pub inline extern mbedtls-x509-crt-profile-ptrraw/set-allowed-pks(s: intptr_t, allowed-pks: int32): ()
  c inline "((struct mbedtls_x509_crt_profile*)#1)->allowed_pks = (int32_t)#2"

pub inline fun mbedtls-x509-crt-profilep/set-allowed-pks(s: mbedtls-x509-crt-profilep, allowed-pks: int): ()
  s.mbedtls-x509-crt-profile-ptrraw/set-allowed-pks(allowed-pks.int32)

pub inline fun mbedtls-x509-crt-profilec/set-allowed-pks(^s: mbedtls-x509-crt-profilec, allowed-pks: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profilep/set-allowed-pks(allowed-pks))

pub inline fun mbedtls-x509-crt-profilecb/set-allowed-pks(^s: mbedtls-x509-crt-profilecb<s::S>, allowed-pks: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profilep/set-allowed-pks(allowed-pks))

pub inline extern mbedtls-x509-crt-profile-ptrraw/allowed-curves(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_x509_crt_profile*)#1)->allowed_curves)"

pub inline fun mbedtls-x509-crt-profilep/allowed-curves(s: mbedtls-x509-crt-profilep): <> int
  s.cextern/c-pointer/ptr.mbedtls-x509-crt-profile-ptrraw/allowed-curves.int

pub inline fun mbedtls-x509-crt-profilec/allowed-curves(^s: mbedtls-x509-crt-profilec): <> int
  s.with-ptr(mbedtls-x509-crt-profilep/allowed-curves)

pub inline fun mbedtls-x509-crt-profilecb/allowed-curves(^s: mbedtls-x509-crt-profilecb<s::S>): <> int
  s.with-ptr(mbedtls-x509-crt-profilep/allowed-curves)

pub inline extern mbedtls-x509-crt-profile-ptrraw/set-allowed-curves(s: intptr_t, allowed-curves: int32): ()
  c inline "((struct mbedtls_x509_crt_profile*)#1)->allowed_curves = (int32_t)#2"

pub inline fun mbedtls-x509-crt-profilep/set-allowed-curves(s: mbedtls-x509-crt-profilep, allowed-curves: int): ()
  s.mbedtls-x509-crt-profile-ptrraw/set-allowed-curves(allowed-curves.int32)

pub inline fun mbedtls-x509-crt-profilec/set-allowed-curves(^s: mbedtls-x509-crt-profilec, allowed-curves: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profilep/set-allowed-curves(allowed-curves))

pub inline fun mbedtls-x509-crt-profilecb/set-allowed-curves(^s: mbedtls-x509-crt-profilecb<s::S>, allowed-curves: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profilep/set-allowed-curves(allowed-curves))

pub inline extern mbedtls-x509-crt-profile-ptrraw/rsa-min-bitlen(s: intptr_t): int32
  c inline "(int32_t)(((struct mbedtls_x509_crt_profile*)#1)->rsa_min_bitlen)"

pub inline fun mbedtls-x509-crt-profilep/rsa-min-bitlen(s: mbedtls-x509-crt-profilep): <> int
  s.cextern/c-pointer/ptr.mbedtls-x509-crt-profile-ptrraw/rsa-min-bitlen.int

pub inline fun mbedtls-x509-crt-profilec/rsa-min-bitlen(^s: mbedtls-x509-crt-profilec): <> int
  s.with-ptr(mbedtls-x509-crt-profilep/rsa-min-bitlen)

pub inline fun mbedtls-x509-crt-profilecb/rsa-min-bitlen(^s: mbedtls-x509-crt-profilecb<s::S>): <> int
  s.with-ptr(mbedtls-x509-crt-profilep/rsa-min-bitlen)

pub inline extern mbedtls-x509-crt-profile-ptrraw/set-rsa-min-bitlen(s: intptr_t, rsa-min-bitlen: int32): ()
  c inline "((struct mbedtls_x509_crt_profile*)#1)->rsa_min_bitlen = (int32_t)#2"

pub inline fun mbedtls-x509-crt-profilep/set-rsa-min-bitlen(s: mbedtls-x509-crt-profilep, rsa-min-bitlen: int): ()
  s.mbedtls-x509-crt-profile-ptrraw/set-rsa-min-bitlen(rsa-min-bitlen.int32)

pub inline fun mbedtls-x509-crt-profilec/set-rsa-min-bitlen(^s: mbedtls-x509-crt-profilec, rsa-min-bitlen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profilep/set-rsa-min-bitlen(rsa-min-bitlen))

pub inline fun mbedtls-x509-crt-profilecb/set-rsa-min-bitlen(^s: mbedtls-x509-crt-profilecb<s::S>, rsa-min-bitlen: int): ()
  s.with-ptr(fn(kk-internal-ptr) kk-internal-ptr.mbedtls-x509-crt-profilep/set-rsa-min-bitlen(rsa-min-bitlen))

// Which parameter to access in mbedtls_dhm_get_value().
type mbedtls-dhm-parameter
  // !<  The prime modulus.
  MBEDTLS_DHM_PARAM_P
  // !<  The generator.
  MBEDTLS_DHM_PARAM_G
  // !<  Our secret value.
  MBEDTLS_DHM_PARAM_X
  // !<  Our public key = \c G^X mod \c P.
  MBEDTLS_DHM_PARAM_GX
  // !<  The public key of the peer = \c G^Y mod \c P.
  MBEDTLS_DHM_PARAM_GY
  // !<  The shared secret = \c G^(XY) mod \c P.
  MBEDTLS_DHM_PARAM_K

pub fun mbedtls-dhm-parameter/int(i: mbedtls-dhm-parameter): int32
  match i
    MBEDTLS_DHM_PARAM_P -> 0.int32
    MBEDTLS_DHM_PARAM_G -> 1.int32
    MBEDTLS_DHM_PARAM_X -> 2.int32
    MBEDTLS_DHM_PARAM_GX -> 3.int32
    MBEDTLS_DHM_PARAM_GY -> 4.int32
    MBEDTLS_DHM_PARAM_K -> 5.int32

pub fun int/mbedtls-dhm-parameter(i: int32): exn mbedtls-dhm-parameter
  match i.int
    0 -> MBEDTLS_DHM_PARAM_P
    1 -> MBEDTLS_DHM_PARAM_G
    2 -> MBEDTLS_DHM_PARAM_X
    3 -> MBEDTLS_DHM_PARAM_GX
    4 -> MBEDTLS_DHM_PARAM_GY
    5 -> MBEDTLS_DHM_PARAM_K

// Defines the source of the imported EC key.
type mbedtls-ecdh-side
  // < Our key.
  MBEDTLS_ECDH_OURS
  // < The key of the peer.
  MBEDTLS_ECDH_THEIRS

pub fun mbedtls-ecdh-side/int(i: mbedtls-ecdh-side): int32
  match i
    MBEDTLS_ECDH_OURS -> 0.int32
    MBEDTLS_ECDH_THEIRS -> 1.int32

pub fun int/mbedtls-ecdh-side(i: int32): exn mbedtls-ecdh-side
  match i.int
    0 -> MBEDTLS_ECDH_OURS
    1 -> MBEDTLS_ECDH_THEIRS

// Defines the ECDH implementation used.
// 
// Later versions of the library may add new variants, therefore users should
// not make any assumptions about them.
type mbedtls-ecdh-variant
  // !< Implementation not defined.
  MBEDTLS_ECDH_VARIANT_NONE
  // !< The default Mbed TLS implementation
  MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0

pub fun mbedtls-ecdh-variant/int(i: mbedtls-ecdh-variant): int32
  match i
    MBEDTLS_ECDH_VARIANT_NONE -> 0.int32
    MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0 -> 1.int32

pub fun int/mbedtls-ecdh-variant(i: int32): exn mbedtls-ecdh-variant
  match i.int
    0 -> MBEDTLS_ECDH_VARIANT_NONE
    1 -> MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0

pub struct mbedtls-ssl-premaster-secret
pub type mbedtls-ssl-premaster-secret-c
pub alias mbedtls-ssl-premaster-secretp = c-pointer<mbedtls-ssl-premaster-secret-c>
pub alias mbedtls-ssl-premaster-secretc<s::S> = owned-c<mbedtls-ssl-premaster-secret-c>
pub alias mbedtls-ssl-premaster-secretcb<s::S> = borrowed-c<s,mbedtls-ssl-premaster-secret-c>
pub alias mbedtls-ssl-premaster-secretca<s::S> = owned-c<c-array<mbedtls-ssl-premaster-secret-c>>

type mbedtls-ssl-states
  MBEDTLS_SSL_HELLO_REQUEST
  MBEDTLS_SSL_CLIENT_HELLO
  MBEDTLS_SSL_SERVER_HELLO
  MBEDTLS_SSL_SERVER_CERTIFICATE
  MBEDTLS_SSL_SERVER_KEY_EXCHANGE
  MBEDTLS_SSL_CERTIFICATE_REQUEST
  MBEDTLS_SSL_SERVER_HELLO_DONE
  MBEDTLS_SSL_CLIENT_CERTIFICATE
  MBEDTLS_SSL_CLIENT_KEY_EXCHANGE
  MBEDTLS_SSL_CERTIFICATE_VERIFY
  MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC
  MBEDTLS_SSL_CLIENT_FINISHED
  MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC
  MBEDTLS_SSL_SERVER_FINISHED
  MBEDTLS_SSL_FLUSH_BUFFERS
  MBEDTLS_SSL_HANDSHAKE_WRAPUP
  MBEDTLS_SSL_NEW_SESSION_TICKET
  MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT
  MBEDTLS_SSL_HELLO_RETRY_REQUEST
  MBEDTLS_SSL_ENCRYPTED_EXTENSIONS
  MBEDTLS_SSL_END_OF_EARLY_DATA
  MBEDTLS_SSL_CLIENT_CERTIFICATE_VERIFY
  MBEDTLS_SSL_CLIENT_CCS_AFTER_SERVER_FINISHED
  MBEDTLS_SSL_CLIENT_CCS_BEFORE_2ND_CLIENT_HELLO
  MBEDTLS_SSL_SERVER_CCS_AFTER_SERVER_HELLO
  MBEDTLS_SSL_CLIENT_CCS_AFTER_CLIENT_HELLO
  MBEDTLS_SSL_SERVER_CCS_AFTER_HELLO_RETRY_REQUEST
  MBEDTLS_SSL_HANDSHAKE_OVER
  MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET
  MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET_FLUSH

pub fun mbedtls-ssl-states/int(i: mbedtls-ssl-states): int32
  match i
    MBEDTLS_SSL_HELLO_REQUEST -> 0.int32
    MBEDTLS_SSL_CLIENT_HELLO -> 1.int32
    MBEDTLS_SSL_SERVER_HELLO -> 2.int32
    MBEDTLS_SSL_SERVER_CERTIFICATE -> 3.int32
    MBEDTLS_SSL_SERVER_KEY_EXCHANGE -> 4.int32
    MBEDTLS_SSL_CERTIFICATE_REQUEST -> 5.int32
    MBEDTLS_SSL_SERVER_HELLO_DONE -> 6.int32
    MBEDTLS_SSL_CLIENT_CERTIFICATE -> 7.int32
    MBEDTLS_SSL_CLIENT_KEY_EXCHANGE -> 8.int32
    MBEDTLS_SSL_CERTIFICATE_VERIFY -> 9.int32
    MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC -> 10.int32
    MBEDTLS_SSL_CLIENT_FINISHED -> 11.int32
    MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC -> 12.int32
    MBEDTLS_SSL_SERVER_FINISHED -> 13.int32
    MBEDTLS_SSL_FLUSH_BUFFERS -> 14.int32
    MBEDTLS_SSL_HANDSHAKE_WRAPUP -> 15.int32
    MBEDTLS_SSL_NEW_SESSION_TICKET -> 16.int32
    MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT -> 17.int32
    MBEDTLS_SSL_HELLO_RETRY_REQUEST -> 18.int32
    MBEDTLS_SSL_ENCRYPTED_EXTENSIONS -> 19.int32
    MBEDTLS_SSL_END_OF_EARLY_DATA -> 20.int32
    MBEDTLS_SSL_CLIENT_CERTIFICATE_VERIFY -> 21.int32
    MBEDTLS_SSL_CLIENT_CCS_AFTER_SERVER_FINISHED -> 22.int32
    MBEDTLS_SSL_CLIENT_CCS_BEFORE_2ND_CLIENT_HELLO -> 23.int32
    MBEDTLS_SSL_SERVER_CCS_AFTER_SERVER_HELLO -> 24.int32
    MBEDTLS_SSL_CLIENT_CCS_AFTER_CLIENT_HELLO -> 25.int32
    MBEDTLS_SSL_SERVER_CCS_AFTER_HELLO_RETRY_REQUEST -> 26.int32
    MBEDTLS_SSL_HANDSHAKE_OVER -> 27.int32
    MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET -> 28.int32
    MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET_FLUSH -> 29.int32

pub fun int/mbedtls-ssl-states(i: int32): exn mbedtls-ssl-states
  match i.int
    0 -> MBEDTLS_SSL_HELLO_REQUEST
    1 -> MBEDTLS_SSL_CLIENT_HELLO
    2 -> MBEDTLS_SSL_SERVER_HELLO
    3 -> MBEDTLS_SSL_SERVER_CERTIFICATE
    4 -> MBEDTLS_SSL_SERVER_KEY_EXCHANGE
    5 -> MBEDTLS_SSL_CERTIFICATE_REQUEST
    6 -> MBEDTLS_SSL_SERVER_HELLO_DONE
    7 -> MBEDTLS_SSL_CLIENT_CERTIFICATE
    8 -> MBEDTLS_SSL_CLIENT_KEY_EXCHANGE
    9 -> MBEDTLS_SSL_CERTIFICATE_VERIFY
    10 -> MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC
    11 -> MBEDTLS_SSL_CLIENT_FINISHED
    12 -> MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC
    13 -> MBEDTLS_SSL_SERVER_FINISHED
    14 -> MBEDTLS_SSL_FLUSH_BUFFERS
    15 -> MBEDTLS_SSL_HANDSHAKE_WRAPUP
    16 -> MBEDTLS_SSL_NEW_SESSION_TICKET
    17 -> MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT
    18 -> MBEDTLS_SSL_HELLO_RETRY_REQUEST
    19 -> MBEDTLS_SSL_ENCRYPTED_EXTENSIONS
    20 -> MBEDTLS_SSL_END_OF_EARLY_DATA
    21 -> MBEDTLS_SSL_CLIENT_CERTIFICATE_VERIFY
    22 -> MBEDTLS_SSL_CLIENT_CCS_AFTER_SERVER_FINISHED
    23 -> MBEDTLS_SSL_CLIENT_CCS_BEFORE_2ND_CLIENT_HELLO
    24 -> MBEDTLS_SSL_SERVER_CCS_AFTER_SERVER_HELLO
    25 -> MBEDTLS_SSL_CLIENT_CCS_AFTER_CLIENT_HELLO
    26 -> MBEDTLS_SSL_SERVER_CCS_AFTER_HELLO_RETRY_REQUEST
    27 -> MBEDTLS_SSL_HANDSHAKE_OVER
    28 -> MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET
    29 -> MBEDTLS_SSL_TLS1_3_NEW_SESSION_TICKET_FLUSH

// Human-friendly representation of the (D)TLS protocol version.
type mbedtls-ssl-protocol-version
  // !< Context not in use or version not yet negotiated.
  MBEDTLS_SSL_VERSION_UNKNOWN
  // !< (D)TLS 1.2
  MBEDTLS_SSL_VERSION_TLS1_2
  // !< (D)TLS 1.3
  MBEDTLS_SSL_VERSION_TLS1_3

pub fun mbedtls-ssl-protocol-version/int(i: mbedtls-ssl-protocol-version): int32
  match i
    MBEDTLS_SSL_VERSION_UNKNOWN -> 0.int32
    MBEDTLS_SSL_VERSION_TLS1_2 -> 771.int32
    MBEDTLS_SSL_VERSION_TLS1_3 -> 772.int32

pub fun int/mbedtls-ssl-protocol-version(i: int32): exn mbedtls-ssl-protocol-version
  match i.int
    0 -> MBEDTLS_SSL_VERSION_UNKNOWN
    771 -> MBEDTLS_SSL_VERSION_TLS1_2
    772 -> MBEDTLS_SSL_VERSION_TLS1_3

type mbedtls-tls-prf-types
  MBEDTLS_SSL_TLS_PRF_NONE
  MBEDTLS_SSL_TLS_PRF_SHA384
  MBEDTLS_SSL_TLS_PRF_SHA256
  MBEDTLS_SSL_HKDF_EXPAND_SHA384
  MBEDTLS_SSL_HKDF_EXPAND_SHA256

pub fun mbedtls-tls-prf-types/int(i: mbedtls-tls-prf-types): int32
  match i
    MBEDTLS_SSL_TLS_PRF_NONE -> 0.int32
    MBEDTLS_SSL_TLS_PRF_SHA384 -> 1.int32
    MBEDTLS_SSL_TLS_PRF_SHA256 -> 2.int32
    MBEDTLS_SSL_HKDF_EXPAND_SHA384 -> 3.int32
    MBEDTLS_SSL_HKDF_EXPAND_SHA256 -> 4.int32

pub fun int/mbedtls-tls-prf-types(i: int32): exn mbedtls-tls-prf-types
  match i.int
    0 -> MBEDTLS_SSL_TLS_PRF_NONE
    1 -> MBEDTLS_SSL_TLS_PRF_SHA384
    2 -> MBEDTLS_SSL_TLS_PRF_SHA256
    3 -> MBEDTLS_SSL_HKDF_EXPAND_SHA384
    4 -> MBEDTLS_SSL_HKDF_EXPAND_SHA256

type mbedtls-ssl-key-export-type
  MBEDTLS_SSL_KEY_EXPORT_TLS12_MASTER_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_EARLY_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_EARLY_EXPORTER_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_HANDSHAKE_TRAFFIC_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_HANDSHAKE_TRAFFIC_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_APPLICATION_TRAFFIC_SECRET
  MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_APPLICATION_TRAFFIC_SECRET

pub fun mbedtls-ssl-key-export-type/int(i: mbedtls-ssl-key-export-type): int32
  match i
    MBEDTLS_SSL_KEY_EXPORT_TLS12_MASTER_SECRET -> 0.int32
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_EARLY_SECRET -> 1.int32
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_EARLY_EXPORTER_SECRET -> 2.int32
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_HANDSHAKE_TRAFFIC_SECRET -> 3.int32
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_HANDSHAKE_TRAFFIC_SECRET -> 4.int32
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_APPLICATION_TRAFFIC_SECRET -> 5.int32
    MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_APPLICATION_TRAFFIC_SECRET -> 6.int32

pub fun int/mbedtls-ssl-key-export-type(i: int32): exn mbedtls-ssl-key-export-type
  match i.int
    0 -> MBEDTLS_SSL_KEY_EXPORT_TLS12_MASTER_SECRET
    1 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_EARLY_SECRET
    2 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_EARLY_EXPORTER_SECRET
    3 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_HANDSHAKE_TRAFFIC_SECRET
    4 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_HANDSHAKE_TRAFFIC_SECRET
    5 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_CLIENT_APPLICATION_TRAFFIC_SECRET
    6 -> MBEDTLS_SSL_KEY_EXPORT_TLS1_3_SERVER_APPLICATION_TRAFFIC_SECRET

pub struct mbedtls-ssl-user-data-t
pub type mbedtls-ssl-user-data-t-c
pub alias mbedtls-ssl-user-data-tp = c-pointer<mbedtls-ssl-user-data-t-c>
pub alias mbedtls-ssl-user-data-tc = owned-c<mbedtls-ssl-user-data-t-c>
pub alias mbedtls-ssl-user-data-tcb<s::S> = borrowed-c<s,mbedtls-ssl-user-data-t-c>
pub alias mbedtls-ssl-user-data-tca = owned-c<c-array<mbedtls-ssl-user-data-t-c>>

type mbedtls-nist-kw-mode-t
  MBEDTLS_KW_MODE_KW
  MBEDTLS_KW_MODE_KWP

pub fun mbedtls-nist-kw-mode-t/int(i: mbedtls-nist-kw-mode-t): int32
  match i
    MBEDTLS_KW_MODE_KW -> 0.int32
    MBEDTLS_KW_MODE_KWP -> 1.int32

pub fun int/mbedtls-nist-kw-mode-t(i: int32): exn mbedtls-nist-kw-mode-t
  match i.int
    0 -> MBEDTLS_KW_MODE_KW
    1 -> MBEDTLS_KW_MODE_KWP

// PKCS #7 types
type mbedtls-pkcs7-type
  MBEDTLS_PKCS7_NONE
  MBEDTLS_PKCS7_DATA
  MBEDTLS_PKCS7_SIGNED_DATA
  MBEDTLS_PKCS7_ENVELOPED_DATA
  MBEDTLS_PKCS7_SIGNED_AND_ENVELOPED_DATA
  MBEDTLS_PKCS7_DIGESTED_DATA
  MBEDTLS_PKCS7_ENCRYPTED_DATA

pub fun mbedtls-pkcs7-type/int(i: mbedtls-pkcs7-type): int32
  match i
    MBEDTLS_PKCS7_NONE -> 0.int32
    MBEDTLS_PKCS7_DATA -> 1.int32
    MBEDTLS_PKCS7_SIGNED_DATA -> 2.int32
    MBEDTLS_PKCS7_ENVELOPED_DATA -> 3.int32
    MBEDTLS_PKCS7_SIGNED_AND_ENVELOPED_DATA -> 4.int32
    MBEDTLS_PKCS7_DIGESTED_DATA -> 5.int32
    MBEDTLS_PKCS7_ENCRYPTED_DATA -> 6.int32

pub fun int/mbedtls-pkcs7-type(i: int32): exn mbedtls-pkcs7-type
  match i.int
    0 -> MBEDTLS_PKCS7_NONE
    1 -> MBEDTLS_PKCS7_DATA
    2 -> MBEDTLS_PKCS7_SIGNED_DATA
    3 -> MBEDTLS_PKCS7_ENVELOPED_DATA
    4 -> MBEDTLS_PKCS7_SIGNED_AND_ENVELOPED_DATA
    5 -> MBEDTLS_PKCS7_DIGESTED_DATA
    6 -> MBEDTLS_PKCS7_ENCRYPTED_DATA

type mbedtls-block-cipher-id-t
  // < Unset.
  MBEDTLS_BLOCK_CIPHER_ID_NONE
  // < The AES cipher.
  MBEDTLS_BLOCK_CIPHER_ID_AES
  // < The Camellia cipher.
  MBEDTLS_BLOCK_CIPHER_ID_CAMELLIA
  // < The Aria cipher.
  MBEDTLS_BLOCK_CIPHER_ID_ARIA

pub fun mbedtls-block-cipher-id-t/int(i: mbedtls-block-cipher-id-t): int32
  match i
    MBEDTLS_BLOCK_CIPHER_ID_NONE -> 0.int32
    MBEDTLS_BLOCK_CIPHER_ID_AES -> 1.int32
    MBEDTLS_BLOCK_CIPHER_ID_CAMELLIA -> 2.int32
    MBEDTLS_BLOCK_CIPHER_ID_ARIA -> 3.int32

pub fun int/mbedtls-block-cipher-id-t(i: int32): exn mbedtls-block-cipher-id-t
  match i.int
    0 -> MBEDTLS_BLOCK_CIPHER_ID_NONE
    1 -> MBEDTLS_BLOCK_CIPHER_ID_AES
    2 -> MBEDTLS_BLOCK_CIPHER_ID_CAMELLIA
    3 -> MBEDTLS_BLOCK_CIPHER_ID_ARIA

// Used internally to indicate whether a context uses legacy or PSA.
// 
// Internal use only.
type mbedtls-block-cipher-engine-t
  MBEDTLS_BLOCK_CIPHER_ENGINE_LEGACY
  MBEDTLS_BLOCK_CIPHER_ENGINE_PSA

pub fun mbedtls-block-cipher-engine-t/int(i: mbedtls-block-cipher-engine-t): int32
  match i
    MBEDTLS_BLOCK_CIPHER_ENGINE_LEGACY -> 0.int32
    MBEDTLS_BLOCK_CIPHER_ENGINE_PSA -> 1.int32

pub fun int/mbedtls-block-cipher-engine-t(i: int32): exn mbedtls-block-cipher-engine-t
  match i.int
    0 -> MBEDTLS_BLOCK_CIPHER_ENGINE_LEGACY
    1 -> MBEDTLS_BLOCK_CIPHER_ENGINE_PSA

// The Identifier of the LMS parameter set, as per
// https://www.iana.org/assignments/leighton-micali-signatures/leighton-micali-signatures.xhtml
// We are only implementing a subset of the types, particularly H10, for the sake of simplicity.
type mbedtls-lms-algorithm-type-t
  MBEDTLS_LMS_SHA256_M32_H10

pub fun mbedtls-lms-algorithm-type-t/int(i: mbedtls-lms-algorithm-type-t): int32
  match i
    MBEDTLS_LMS_SHA256_M32_H10 -> 6.int32

pub fun int/mbedtls-lms-algorithm-type-t(i: int32): exn mbedtls-lms-algorithm-type-t
  match i.int
    6 -> MBEDTLS_LMS_SHA256_M32_H10

// The Identifier of the LMOTS parameter set, as per
// https://www.iana.org/assignments/leighton-micali-signatures/leighton-micali-signatures.xhtml.
// We are only implementing a subset of the types, particularly N32_W8, for the sake of simplicity.
type mbedtls-lmots-algorithm-type-t
  MBEDTLS_LMOTS_SHA256_N32_W8

pub fun mbedtls-lmots-algorithm-type-t/int(i: mbedtls-lmots-algorithm-type-t): int32
  match i
    MBEDTLS_LMOTS_SHA256_N32_W8 -> 4.int32

pub fun int/mbedtls-lmots-algorithm-type-t(i: int32): exn mbedtls-lmots-algorithm-type-t
  match i.int
    4 -> MBEDTLS_LMOTS_SHA256_N32_W8

pub val kmbedtls-key-length-none: int = 0

pub val kmbedtls-key-length-des: int = 64

pub val kmbedtls-key-length-des-ede: int = 128

pub val kmbedtls-key-length-des-ede3: int = 192

